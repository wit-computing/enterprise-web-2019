


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-Interactive_Apps",
  "img" : "img/main.jpg",
  "videoid" : "none",
  "objectives" : "<p>Continue the development of the three SPAs by adding <strong>statefulness</strong> and making them <strong>interactive and dynamic</strong>.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Building React SPAs (Dynamic).",
    "shortTitle": "Lab-Interactive_Apps",
    "contentMd" : "# Building React SPAs (Dynamic).\n \nContinue the development of the three SPAs by adding __statefulness__ and making them __interactive and dynamic__.\n"
    },
  
    {
    "title": "## Startup.",
    "shortTitle": "Startup",
    "contentMd" : "## Startup.\n\nUse the code developed in the previous lab (the `threeApps` folder) as the starting point for this one."
    },
  
    {
    "title": "## Contact List App.",
    "shortTitle": "Contact_List",
    "contentMd" : "## Contact List App.\n\nThe objective is to allow the user edit or delete an existing contact, with the option to undo / cancel the operation, if required. We also want to enable the addition of new contacts to the list.\n\n### Stub API\n\nIn production mode a SPA gets its model data from a 'real' web API. However, during development a __stub API__ is a common technique, either because the API is not yet developed or to postpone integration until the SPA is complete. \n\nCreate the file `contactlist/src/dataStore/stubAPI.js` and add the following code:\n\n      import _ from 'lodash';\n\n      class StubAPI {\n          constructor() {\n              this.contacts = [\n                  {\n                  'name': 'Contact 1',\n                  'address': '123 Test St',\n                  'phone_number': '132-3212'\n                  },        \n                  {\n                  'name': 'Contact 2',\n                  'address': '23 Main St',\n                  'phone_number': '934-4329'\n                  }, \n                  {\n                  'name': 'Contact 3',\n                  'address': '4 Lower St',\n                  'phone_number': '432-5832'\n                  },\n                  {\n                  'name': 'Contact 4',\n                  'address': '49 Upper Street',\n                  'phone_number': '934-4290'\n                  },\n                  {\n                  'name': 'Contact 5',\n                  'address': '4 High Street',\n                  'phone_number': '933-3390'\n                  }\n              ] ; \n          }\n\n          delete(k) {\n              let elements = _.remove(this.contacts, \n                  (contact) => contact.phone_number === k\n              );\n              return elements; \n          }\n          getAll() {\n              return this.contacts ;\n          }\n\n          add(n,a,p) {\n              let len = this.contacts.length ;\n              let newLen = this.contacts.push({\n                  name: n, address : a, phone_number: p }) ;\n              return newLen > len ;\n          }\n\n          update(key,n,a,p) {\n              let index = _.findIndex(this.contacts, \n                  (contact) => contact.phone_number === key\n              );      \n              if (index !== -1) {\n                  this.contacts.splice(index, 1, \n                      {name: n, address: a, phone_number: p});\n                  return true ;\n              }\n              return false ;\n          }\n      }\n\n      export default (new StubAPI() );\n         \nThis code uses the *lodash* utility package. To install it, in the terminal window go to the `contactList` folder and type:\n\n       $ npm install  lodash@2.4.2 --save\n\n[This installs the package in `node_modules` and updates (--save) the local `package.json` file.]\n\nStart the development server from the `contactlist` folder:\n\n       $ npm start\n\nIn `contactlist/src/App.js`, the App component should now get the sample model data from the stub API. Replace the entire content of the file with the following: \n\n      import React , { Component } from 'react';\n      import './App.css';\n      import Header from './components/header' \n      import ContactForm from './components/contactForm' \n      import ContactList from './components/contactList' \n      import api from './dataStore/stubAPI'  // NEW\n\n      class App extends Component {\n          render() {\n              let contacts = api.getAll() ;    // NEW\n              return (    \n                  <div className=\"jumbotron\">\n                      <Header noContacts={contacts.length} />\n                      <ContactForm />\n                      <ContactList contacts={contacts}  />  \n                  </div>\t\t              \n                  );\n          }\n      }\n\n    export default App;\n\nThe app should now render in the browser as before.\n\n![][app]\n\nFrom the `contactlist` folder update the local Git repo:\n\n    $ git add -A\n    $ git commit -m \"Added stub API\"\n\nRestart the development server. \n\n### UI state.\n\nIn React terms, a common source of UI state is user input controls, including:\n\n+ Input Text field.\n+ Drop-down menu.\n+ Radio button or checkbox.\n\nAn analysis of this app's behavior requirements gives the following UI state breakdown:\n\n1. Contact details - A contact's properties (name, address, etc) are editable and therefore should be stored as UI state.\n1. New contact details - The input fields on the Add contact mini form are UI state.\n1. Contact status - A contact's 'status' changes when the user clicks the Edit or Delete button. The change is reflected in the label, color and meaning of its two buttons. Three status types are possible: Normal (default); Edit (button labels change to Undo and Save); and Delete (button labels change to Confirm and Cancel). As a status change results from user input, it maps to React's *component state* concept.\n\n### Stateful components.\n\nWhich components should manage the app's UI state? \n\nOnly the Contact component is concerned about the status attribute. Also, no other component needs to be re-rendered while the user is editing/updating a contact. The web Form component can manage the new contact's details while they are being entered. When the user submits the data it is only then the App components needs to be informed.\n\nIn `src/components/contact.js`, change the Contact component as shown below:\n\n      class Contact extends Component {\n          state = {\n            status : '',\n            name: this.props.contact.name,\n            address: this.props.contact.address,\n            phone_number: this.props.contact.phone_number,\n            previousDetails: {\n              name: this.props.contact.name,\n              address: this.props.contact.address,\n              phone_number: this.props.contact.phone_number  \n            }\n          };\n          render() {\n              . . . as before . . .\n          }\n      }\n\nNotes:\n\n1. For simplicity, the normal (default) contact status will be represented by an empty string. The values 'edit' and 'del' will be used for the other status options - see later.\n1. The initial values for a contact's details are passed in as props. While props are not normally stored as state, it is necessary here to support the edit feature.\n1. The previousDetails nested object is necessary to support the undo operation of the edit feature - we need to reset the contact's properties back to pre-edit values.\n\n#### Externalize configuration.\n\nThe attributes (color, label) of the buttons associated with a contact could be considered __configuration data__. It is good practice to separate configuration from logic, thus making an app easier to reconfigure. Create the file  `src/config/buttonsConfig.js` and add the following code:\n\n      let buttons = {\n         normal : { \n            leftButtonVal : 'Edit',\n            rightButtonVal : 'Delete',\n            leftButtonColor : 'btn-default',\n            rightButtonColor : 'btn-danger'\n         },\n         delete : { \n            leftButtonVal : 'Undo' ,\n            rightButtonVal : 'Confirm' ,\n            leftButtonColor : 'btn-success',\n            rightButtonColor : 'btn-danger'\n         },\n         edit : {\n            leftButtonVal : 'Save' ,\n            rightButtonVal : 'Cancel' ,\n            leftButtonColor : 'btn-danger',\n            rightButtonColor : 'btn-success'\n         }\n      }\n      export default buttons;\n\nThis configuration data is used in the next section.\n\n### Adding dynamic behavior.\n\nWe will start by adding support for a contact's Edit button. The code will involve the following:\n\n1. Change the Contact component's status to 'edit'. \n1. Keep the contact details stored in the state object in sync with the text input fields as the user is typing. React's *onChange* event will facilitate synchronization.\n1. If the user cancels an edit operation then the contact's details must be reset.\n\nSignificant changes are required to `components/contact.js`. Update its content as detailed below:\n\n    . . . . other imports . . . . \n    import buttons from '../config/buttonsConfig';\n    import _ from 'lodash';\n    import api from '../dataStore/stubAPI'\n\n    class Contact extends Component {\n        state = { . . . as before . . . };\n        handleEdit = () =>  this.setState({ status : 'edit'} );\n        handleSave = (e) =>  null ;  // Implemented later\n        handleCancel = () => {\n          let {name, address, phone_number} = this.state.previousDetails ;\n          this.setState({ status : '', \n              name, address, phone_number } ) ;\n        }; \n        handleNameChange = (e) =>  this.setState({name: e.target.value});\n        handleAddressChange = (e) => this.setState({address: e.target.value});  \n        handlePhoneNumChange = (e) =>  \n                  this.setState({phone_number: e.target.value});             \n        render() {\n              let activeButtons = buttons.normal ;\n              let leftButtonHandler = this.handleEdit;\n              let rightButtonHandler = this.handleDelete;\n              if (this.state.status === 'edit' ) {\n                  activeButtons = buttons.edit ;\n                  leftButtonHandler = this.handleSave;\n                  rightButtonHandler = this.handleCancel ;\n              }    \n              return (\n                <div className=\"col-sm-3\" >\n                  <div className=\"panel panel-primary\">\n                      <div className=\"panel-heading\">\n                          { this.state.name }\n                      </div>\n                      <div className=\"panel-body\">\n                      {  this.state.status === 'edit' ? \n                          [ \n                          <input type=\"text\" className=\"form-control\"\n                              value={this.state.name}\n                              onChange={this.handleNameChange} />,\n                          <input type=\"text\" className=\"form-control\"\n                              value={this.state.address}\n                              onChange={this.handleAddressChange} />,\n                          <input type=\"text\" className=\"form-control\"\n                              value={this.state.phone_number}\n                              onChange={this.handlePhoneNumChange} />\n                          ] :\n                          [\n                              <p key={'name'}>{this.state.name}</p>,\n                              <p key={'address'} >{this.state.address}</p>,\n                              <p key={'phone_number'} >{this.state.phone_number}</p>,\n                          ]   \n                      }        \n                      </div>\n                      <div className=\"panel-footer\"> \n                        <div className=\"btn-group btn-group-justified\" role=\"group\" aria-label=\"...\">\n                          <div className=\"btn-group\" role=\"group\">\n                              <button type=\"button\" \n                                  className={'btn ' + activeButtons.leftButtonColor} \n                                  onClick={leftButtonHandler} >\n                                  {activeButtons.leftButtonVal}\n                              </button>\n                          </div>\n                          <div className=\"btn-group\" role=\"group\">\n                              <button type=\"button\" \n                                  className={'btn ' + activeButtons.rightButtonColor} \n                                  onClick={rightButtonHandler} >\n                                  {activeButtons.rightButtonVal}\n                              </button>  \n                          </div>\n                      </div>                     \n                      </div>          \n                  </div>\n                </div>\n              ) ; \n            }\n        } \n        export default Contact;\n\n\nNotes:\n\n1. ES6 arrow functions have 'this' bound to the containing object. \n1. In ES6, for single-line anonymous functions the curly-braces are optional and the return keyword is omitted.\n1. In edit mode, the Contact component's data fields change from non-editable text to input fields. The ternary operator (?:) is used inside the above JSX to implement the conditional switch. The JSX (and ultimately HTML) is being __dynamically computed__ based on the status property of the state object.\n1. We use this.state instead of this.props to set the value of an input field. This ensures the state object is in sync with the current input.    \n1. The save changes feature is not implemented, yet.\n\nTo test the above code, click the Edit button of any contact. \n\n![][edit]\n\nThe contact's details are now editable. Change some values (say, address) and click Cancel to reset it.\n\nTo get save working, implement the *handleSave*, as follows:\n\n    class Contact extends Component {\n        . . . . . . \n        handleSave = (e) => {\n            e.preventDefault();\n            let updatedName = this.state.name.trim();\n            let updatedAddress = this.state.address.trim();\n            let updatedPhone_number = this.state.phone_number.trim();\n            if (!updatedName || !updatedAddress || !updatedPhone_number ) {\n                return ;\n            }\n            let {name, address, phone_number} = this.state ;\n            this.setState({status : '',\n                previousDetails: { name, address, phone_number  }\n            })\n            api.update( this.state.previousDetails.phone_number,\n                updatedName , updatedAddress, updatedPhone_number )\n        };                              \n        handleCancel = (e) => { . . .  as before . . . }\n\nNow try editing a contact and saving the changes.\n\n### Inverse data flow.\n\nTo implement the Delete contact feature we need to follow the inverse data flow design pattern. For a Delete action the Contact component must request the App component to complete the delete, via the stub API. The App then re-renders itself to ensure the 'number of contacts' badge is updated. The elements of the inverse data flow pattern includes:\n\n+ A function in App to communicate with the API and perform re-rendering.\n+ Pass a reference to above function to the Contact components. \n+ Contact component invokes the function when required. \n\n[ The re-rendering by the App component does lead to some unnecessary re-rendering by the Contact components. We will remove this unnecessary execution later.]\n\nIn `src/App.js`, make the following changes:\n\n      .\n      .\n      .\n      class App extends Component {\n          deleteContact = (key) => {\n              api.delete(key); \n              this.setState({});                          \n          };\n\n          render() {\n                . . . . as before . .  .\n                return (\n                    . . . as before . . . \n                    <ContactList contacts={contacts} \n                          deleteHandler={this.deleteContact} />\n                    . . . as before . . . \n            );\n        }\n      }\n      export default App;\n\nIn `components/contactList.js` make the following changes:\n\n      export default class ContactList extends Component {\n          render() {\n            let contactPanels =   this.props.contacts.map(\n                (c) => <Contact key={c.phone_number} contact={c} \n                          deleteHandler={this.props.deleteHandler} /> \n            );\n            return (\n                . . . . as before . . . .\n              ) ;\n          }\n      }\n\nThe final change is to complete the data flow pattern, in  `components/contact.js`:\n\n       . . . . . . \n       class Contact extends Component {\n          . . . . other handlers . . . . \n          handleDelete = () =>  this.setState({ status : 'del'} );\n          handleConfirm = (e) => {\n            e.preventDefault();\n            this.props.deleteHandler(this.state.phone_number);\n          };\n          render() { \n              . . . . . . . \n             if (this.state.status === 'edit' ) {\n                 . . . as before . . . \n             } else if (this.state.status === 'del' ) {\n                activeButtons = buttons.delete ;\n                leftButtonHandler = this.handleCancel ;\n                rightButtonHandler = this.handleConfirm;\n             }\n             return ( . . . as before . . . )   \n      }\n      export default Contact;\n\nNote, for convenience we are using a contact's phone number as a unique key/ identifier. In the browser, test the Delete feature.\n\nFrom the `threeApps/contactlist` folder commit this work:\n\n     $ git add -A\n     $ git commit -m \"Edit and Delete features completed\"\n\n### Add Contact,\n\nThe mini web form to add a new contact is the remaining feature. The inverse data flow pattern applies here also, in that we need:\n\n+ A function in App to pass the new contact details to the API and perform a re-rendering.\n+ To pass a reference to above function to the ContactForm component. \n+ ContactForm component invokes the function when required.\n\nIn `src/App.js` make the following changes:\n\n       . . . . imports . . . . \n\n       class App extends Component {\n          addContact = (n, a, p) => {\n               api.add(n,a,p) ;\n               this.setState({});\n          };\n          deleteContact = ..... as before .....\n\nand in the render method of the same component, pass this new function to the form component:\n\n         . . . . .. \n         <ContactForm  addHandler={this.addContact} />\n         . . . . . . \n\nIn a React app, data entry fields must be managed by your code (for HTML-based forms the browser DOM does it). The approach is to store a field's value in state and update it on every key press. In `components/contactForm.js` replace the entire code with the following: \n\n      import React , { Component } from 'react';\n\n      class ContactForm extends Component {\n          state = { name: '', address: '', phone_number : ''};\n          handleSubmit = (e) => {\n            e.preventDefault();\n            let name = this.state.name.trim();\n            let address = this.state.address.trim();\n            let phone_number = this.state.phone_number.trim();\n            if (!name || !address || !phone_number) {\n                return;\n            }\n            this.props.addHandler(name,address,phone_number);\n            this.setState({name: '', address: '', phone_number: ''});\n        }\n          handleNameChange = (e) =>  this.setState({name: e.target.value});\n          handleAddressChange = (e) => this.setState({address: e.target.value});\n          handlePhoneNumChange = (e) =>  this.setState({phone_number: e.target.value});\n\n          render() {\n              return (\n                  <div className=\"container-fluid\">\n                      <div className=\"row\">\n                      <div className=\"col-sm-2\" >\n                         <button type=\"button\" className=\"btn btn-success\"\n                             onClick={this.handleSubmit} >Add Contact</button>\n                      </div>              \n                      <div className=\"col-sm-3\" >\n                        <input type=\"text\" className=\"form-control\" \n                            placeholder=\"Name\"\n                            value={this.state.name}\n                            onChange={this.handleNameChange}\n                        />\n                      </div>\n                      <div className=\"col-sm-3\" >\n                        <input type=\"text\" className=\"form-control\"\n                            placeholder=\"Address\"\n                            value={this.state.address}\n                            onChange={this.handleAddressChange}\n                        />\n                      </div>\n                      <div className=\"col-sm-2\" >\n                        <input type=\"text\" className=\"form-control\" \n                            placeholder=\"Phone No.\"\n                            value={this.state.phone_number}\n                            onChange={this.handlePhoneNumChange}\n                        />\n                      </div>                             \n                    </div>\n                  </div>\n              );\n          }\n      }\n      export default ContactForm;\n\nIn the browser, test the feature works.\n\nOn completion, commit the work:\n\n     $ git add -A\n     $ git commit -m \"Add contact completed\"\n                  \n[app]: ./img/app.png\n[edit]: ./img/edit.png\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "## Phone Catalogue App.",
    "shortTitle": "Phone_Catalogue",
    "contentMd" : "## Phone Catalogue App.\n\nIn this app when the user enters text in the search field it should display only those phones whose name contains the entered text. Also, the order of the list of matching phones should change when the drop-down menu options is changed.\n\nFrom `threeApps/phonecatalogue` folder, install the lodash package:\n\n         $ npm install  lodash@2.4.2 --save\n\nStart the development server:\n\n         $ npm start \n\n### UI state.\n\nThe UI state for this application consists of:\n \n1. The search text - Every character typed in the text box will require a recalculation of the matching subset of phones.\n1. The Sort drop-down menu selection - Changes the ordering of the current matching subset of phone.\n\n### Stateful components.\n\nBoth the SelectControls and App components need to know the current search text value. SelectControls uses it to set the text input field value, while App uses it to compute the matching subset of phones. As App is higher up the component hierarchy, it should manage this state value. The same argument can be made for the sort drop-down menu selection.\n\nIn `phonesCatalogue/src/App.js`, add a state object, as follows:\n\n      class App extends Component {\n        state = { search: '', sort: 'name' };\n        render() {\n            . . . as before . . .\n        }\n      }\n\n### Adding dynamic behavior.\n\nWe need to implement inverse data flow between the App and SelectControls components. In `src/components/selectControls/index.js`, completely replace its content with the following code:\n\n    import React, { Component } from 'react';\n\n     export default class SelectControls extends Component {\n        handleChange = (e, type, value) => {\n            e.preventDefault();\n            this.props.onUserInput(type, value);\n        };\n        handleTextChange = (e) => {\n            this.handleChange( e, 'search', e.target.value);\n        };\n        handleSortChange = (e) => {\n            this.handleChange(e, 'sort', e.target.value);\n        };\n\n        render() {\n            return (\n                <div className=\"col-md-10\">\n                    <input type=\"text\" placeholder=\"Search\" \n                        value={this.props.filterText}\n                        onChange={this.handleTextChange} />\n                    <span> Sort by: </span>\n                    <select id=\"sort\" value={this.props.order } \n                        onChange={this.handleSortChange} >\n                        <option value=\"name\">Alphabetical</option>\n                        <option value=\"age\">Newest</option>\n                    </select>\n                </div>\n            );\n        }\n      }\n\nNote, the handlerChange function calls a props function (not yet defined) belonging to the App component. The App function updates the state object, re-computation of the matching phone list, and forces a re-rendering. Make the following changes to `src/App.js`:\n\n      class App extends React.Component {\n        state = { . . . as before . . . };\n\n        handleChange = (type, value) => {\n            type === 'search' ?\n                this.setState( { search: value } ) :\n                this.setState( { sort: value } ) ;\n        };\n\n        render() {\n            console.log( \n                `Criteria: Search=  ${this.state.search} ; Sort= ${this.state.sort}`);\n            let filteredList = Phones ; // Incomplete\n            return (\n              <div className=\"jumbotron\">\n                  <div className=\"container-fluid\">\n                    <div className=\"row\">\n                     <div className=\"col-md-10\">\n                        <h2>Phone Catalogue App</h2>\n                     </div>\n                     <SelectControls onUserInput={this.handleChange } \n                            filterText={this.state.search} \n                            sort={this.state.sort} />\n                     <PhoneList phones={filteredList} />\n                  </div> \n                </div>                   \n             </div>\n            );\n        }\n      }\n\nThis code is incomplete because the subset of matching phones is not being recomputed, however, the `console.log()` statement in the render method allows us verify the 'inverse data flow' is working. To prove it, in the browser, open the Chrome developer tools. Now type 'sam' in the search text field and select 'Newest' in the sort dropdown. The screenshot below shows the console output. \n\n![][console]\n\nIn `src/App.js`, add the import  at the top:\n\n  \t\timport _ from 'lodash';\n\nand update the App component's render method, as shown:\n\n        render() {\n            let list = Phones.filter( \n                (p) => \n                p.name.toLowerCase().search(this.state.search.toLowerCase()) !== -1 \n            );\n            let filteredList = _.sortBy(list, this.state.sort) ;\n            return ( . . . as before . . . );\n        }\n\nThe features used above include:\n\n1. The array *filter* method - creates a new array consisting of those entries in the source (this.props.phones) for which the arrow function returns true.\n1. The string *search* method - returns the position of a substring (this.state.search) within a source string (p.name); otherwise, returns -1 when not present.\n1. The lodash *sortBy* utility function.\n\nIn the browser check the app is fully-functional by using the search text and drop-down menu inputs.\n\n### Storybook addons.\n\nStorybook can accommodate components that expect a function prop by providing a stub replacement. We use an addon to implement the stub.  Add the following line to the configuration file `.storybook/addons.js`:\n\n      import '@storybook/addon-actions/register';\n \n In `stories/phoneApp.js` add a new import at the top:\n\n      import { action } from '@storybook/addon-actions';\n\nand update the related story:\n\n        storiesOf('Phone Catalogue', module)\n            .add('Select controls', \n              () =>   <SelectControls \n                        onUserInput={ action('input changed') }\n                        filterText='' /> \n            )\n            .add('Phone', . . . . as before . . . . \n\nWe are passing a dummy function (or action ) to the SelectControls component. The dummy will simply display a message ('input changed') when invoked.  Start the server:\n\n      $ npx start-storybook -s ./public -p 9001 -c .storybook\n\nBrowse to http://localhost:9001/ , select the story, and in the component change the drop-down menu selection and type in the search field. Confirmation of the dummy function calls can be seen in the 'Action Logger' panel.\n\n![][story]\n\nsee [here][addons] for a full list of Storybook addons.\n\nCommit these changes to git:\n\n        $ git add -A\n        $ git commit -m \"Search page completed\"\n     \n\n[console]: ./img/console.png   \n[story]: ./img/phonestory.png   \n[addons]: https://storybook.js.org/addons/addon-gallery/"
    },
  
    {
    "title": "## Hacher News.",
    "shortTitle": "Hacker_News",
    "contentMd" : "## Hacher News.\n\n### Setup.\n\nFrom `threeApps/hackerNews`, install the lodash packages:\n\n         $ npm install  lodash@2.4.2 --save\n\nFrom the same folder start the server:\n\n         $ npm start \n\n### Stub API\n\nAgain we will use a stub API as the model data source. Create the file `hackerNews/src/dataStore/stubAPI.js` and paste in the following code:\n\n\timport _ from 'lodash';\n\n\tclass StubAPI {\n\t\tconstructor() {\n\t\t\tthis.posts = [\n\t\t\t\t{  id: 1 ,\n\t\t\t\t\ttitle : 'India - Tiger population sees 30% increase.',\n\t\t\t\t\tlink : 'http://www.bbc.com/news/world-asia-30896028',\n\t\t\t\t\tusername : 'jbloggs',\n\t\t\t\t\tcomments : [],\n\t\t\t\t\tupvotes : 10\n\t\t\t\t},\n\t\t\t\t{ \n\t\t\t\t\tid: 2,\n\t\t\t\t\ttitle : 'The button that is not.',\n\t\t\t\t\tlink : 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\n\t\t\t\t\tusername : 'notme',\n\t\t\t\t\tcomments : [],\n\t\t\t\t\tupvotes : 12\n\t\t\t\t},\n\t\t\t\t{ \n\t\t\t\t\tid: 3,\n\t\t\t\t\ttitle : 'Google Nears $1B Investment in SpaceX',\n\t\t\t\t\tlink : null,\n\t\t\t\t\tusername : 'notme',\n\t\t\t\t\tcomments : [],\n\t\t\t\t\tupvotes : 12\n\t\t\t\t},\n\t\t\t\t{ \n\t\t\t\t\tid: 4,\n\t\t\t\t\ttitle : 'Coinbase Raises $75M from DFJ Growth, USAA, and More',\n\t\t\t\t\tlink : 'http://blog.coinbase.com/post/108642362357/coinbase-raises-75m-from-dfj-growth-usaa-nyse',\n\t\t\t\t\tusername : 'psmith',  \n\t\t\t\t\tcomments : [],\n\t\t\t\t\tupvotes : 2\n\t\t\t\t}\n\t\t\t] ;\n\t\t}\n\n\t\tgetAll() {\n\t\t\treturn this.posts ;\n\t\t}\n\n\t\tadd(title, link) {\n\t\t\tlet id = 1 ;\n\t\t\tlet last = _.last(this.posts) ;\n\t\t\tif (last) {\n\t\t\t\tid = last.id + 1 ;\n\t\t\t}\n\t\t\tlet len = this.posts.length ;\n\t\t\tlet newLen = this.posts.push({ \n\t\t\t\tid, title, link, \n\t\t\t\tusername: '', \n\t\t\t\tcomments: [], \n\t\t\t\tupvotes: 0 }) ;\n\t\t\treturn newLen > len ;\n\t\t}\n\n\t\tupvote(id) {\n\t\t\tlet index = _.findIndex(this.posts, \n\t\t\t\t(post) => post.id === id\n\t\t\t);   \n\t\t\tif (index !== -1) {                 \n\t\t\t\tthis.posts[index].upvotes += 1 ;\n\t\t\t\treturn true ;\n\t\t\t}\n\t\t\treturn false ;\n\t\t}\n\n\t\tgetPost(id) {\n\t\t\tlet index = _.findIndex(this.posts, \n\t\t\t\t(post) => post.id === id\n\t\t\t)   \n\t\t\tlet result = index !== -1 ?                  \n\t\t\t\tthis.posts[index] :\n\t\t\t\tnull ;\n\t\t\treturn result;\n\t\t}\n\n\t\taddComment(postId,c,n) {\n\t\t\tlet post = this.getPost(postId ) ;\n\t\t\tlet id = 1 ;\n\t\t\tlet last = _.last(post.comments) ;\n\t\t\tif (last) {\n\t\t\t\tid = last.id + 1 ;\n\t\t\t}\n\t\t\tpost.comments.push({ 'id': id,  \n\t\t\t\tcomment: c , author: n, upvotes: 0 } ) ;\n\t\t}\n\n\t\tupvoteComment(postId,commentId) {\n\t\t\tlet post = this.getPost(postId ) ;\n\t\t\tlet index = _.findIndex(post.comments, \n\t\t\t\t(c) => c.id === commentId\n\t\t\t);  \n\t\t\tif (index !== -1) {                 \n\t\t\t\tpost.comments[index].upvotes += 1 ;\n\t\t\t}\n\t\t}\n\t}\n\n\texport default (new StubAPI() );\n\nNote: An __id__ has been added to each post (news item) object for convenience. The add method of the API computes the id of a new post by simply adding 1 to the id of the last one in the array. The upvote method is passed the id of the post to be upvoted.\n\nIn `src/App.js` completely replace the current code with the following:\n\n        import React, { Component } from 'react';\n        import NewsList from './components/newsList';\n        import Form from './components/newsForm';\n        import api from './dataStore/stubAPI';\n\n        export default class App extends Component {\n        \n            render() {\n                let posts =  api.getAll();\n                return (\n                  <div className=\"jumbotron\">\n                    <div className=\"container-fluid\">\n                      <div className=\"row\">\n                        <div className=\"col-md-9 col-md-offset-3\" >\n                            <a href=\"/\"><h1>Hacker News</h1></a>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"container\">\n                       <div className=\"row\">\n                          <div className=\"col-md-9 col-md-offset-1\">\n                            <NewsList posts={posts}  />\n                            <Form />\n                          </div>\n                       </div>\n                    </div>\n                </div>\n                );\n            }\n        }\n\nThe browser should render the news items as before.\n\n### Dynamic behaviour.\n\nWe will add the upvoting feature first. In `src/App.js` add a new function:\n  \n\texport default class App extends Component {\n\t\tincrementUpvote = (id) => {\n\t\t\tapi.upvote(id) ;\n\t\t\tthis.setState({});\n\t\t};\n\t\n       render() {\n           . . . . . . \n               <NewsList posts={posts} \n                    upvoteHandler={this.incrementUpvote} />\n           . . . . . . \n      }\n\nThis function is called when the user clicks a thumb-up glyph. Therefore it must be passed down the component hierarchy to NewsItem. In `components/newsList/index.js`, update the NewsItem set of props:\n\n    render() {\n        let items = this.props.posts.map(\n            (post,index) => \n                <NewsItem key={index} \n                    post={post} \n                    upvoteHandler={this.props.upvoteHandler} /> \n        );\n        return ( . . . as before . . )\n\nIn `components/newsItwm/index.js`, add the onClick handler:\n\n        export default class NewsItem extends Component {\n            handleVote = () =>  this.props.upvoteHandler(this.props.post.id);\n\n            render() {\n                . . . . . . \n                return (\n                   . . . . .\n                    <span className=\"glyphicon glyphicon-thumbs-up ptr\" \n                          onClick={this.handleVote}/>\n                    {this.props.post.upvotes}\n                   . . . . . . . . \n                \nIn the browser you should now be able to increment a news item's upvote count. We also want the items to be in descending order, by vote count. In `src/App.js` compute the order in the render method:\n\n         . . . . imports . . . \n        import _ from 'lodash';\n        . . . . . . .\n        render() {\n           let posts = _.sortBy(api.getAll(), \n                (post) => - post.upvotes\n           );\n           return ( \n                . . . as before . . \n\nIn the browser upvote an item a few times to force a reordering.\n\nFrom the `threeApps/hackerNews` folder, commit the work so far:\n\n     $ git add -A\n     $ git commit -m \"Upvote feature completed\"\n\n### Add news item.\n\nThe add news item feature is very similar to the add contact feature in the Contact List app. We need the following:\n\n+ A state object in the NewsForm component to store the current values being typed into the form fields.\n+ A function to pass the new item to the API and force a re-rendering.\n    + The function needs to be part of the App component.\n\nIn `src/App.js` make the following changes:\n\n\n    export default class App extends Component {\n        addNewsItem = (title,link) => {\n            api.add(title,link)\n            this.setState({})\n        }\n        incrementUpvote = (id) => { . . . as before }\n\nand in the render method change the Form tag:\n\n        <Form handleAdd={ this.addNewsItem } />\n\n#### Exercise.\n\nYou are required to complete the implementation. The code that needs modifying is `components/newsForm/index.js` - use the Add contact form from the Contact List App  as a guide.\n\n\n### Storybook.\n\nFor completeness we should update the Storybook code for the NewsForm component/ \nIn `.storybook/addons.js` register the addon-action plugin:\n\n      import '@storybook/addon-actions/register';\n\nIn `stories/hackerApp.js` import the plugin:\n\n      import { action } from '@storybook/addon-actions';\n\n#### Exercise.\n\nYou are required to update the effected story in `stories/hackerApp.js`.\n\nWhen completed, start the Storybook server and test it in the browser. Fill out the form and click the Add button. The screenshot shows a sample result.\n\n![][newsstory]\n\n----------------------------\n\nOn completion, go to the `hackerNews` folder and commit the work:\n\n     $ git add -A\n     $ git commit -m \"Add news item feature completed\"\n\n\n[newsstory]: ./img/newsstory.png"
    }
  
  ]
  }

