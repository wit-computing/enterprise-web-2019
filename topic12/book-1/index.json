


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-React_Basics",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab guides you through the basic concepts of ReactJS by completing a series of exercises aimed at producing a set of simple UI components. Also, a first look at create-react-app tool.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# ReactJS Basics.",
    "shortTitle": "Lab-React_Basics",
    "contentMd" : "# ReactJS Basics.\n\nThis lab guides you through the basic concepts of ReactJS by completing a series of exercises aimed at producing a set of simple UI components. Also, a first look at create-react-app tool.\n"
    },
  
    {
    "title": "## Startup.",
    "shortTitle": "Startup",
    "contentMd" : "## Startup.\n\nDownload and unzip [this archive][code]. Open a terminal window, go to the base folder (`basicReactLab`) and type:\n\n     $ npm install\n\n[This installs the JS modules needed (e.g. React and its dependencies) in a local folder, called `node_modules`. npm is a package/library management tool for Node. It is independent of React.]\n\nThe base folder contains the following top-level folder structure:\n\n     basicReactLab\n       |\n       |---.storybook\n       |---components\n       |     |\n       |     |---exercises\n       |     |---samples\n\t   |\n       |---node_modules\n       |---stories\n       package.json\n\nYou need to focus only on the two sub-folders of `components`. In the `components/samples` folder are the fully coded sample components covered in the lectures. The `components/exercises` folder has skeleton implementations of the components you will develop during this lab. In the terminal, from the base folder, type:\n\n     $ npx start-storybook -p 9001 -c .storybook\n\nnpx runs the named binary executable, locating it in `./node_modules/.bin`. 'start-storybook' transpiles any ES6 code (e.g. in `components/samples`) and starts the storybook web server on port 9001. Open a web browser and navigate to: http://localhost:9001 \n\n![][storybook] \n\n### The samples.\n\nEach file in the `components/samples` folder contains a component implementation. The file names are prefixed with a sequence number (01_, 02_ etc) to help relate it to the text name that appear in the side panel of the Storybook browser page. For example, the component definition in `components/samples/03_props.js` can be seen in Storybook at 'Samples -> 03 - component with props'.\n\n![][numbers] \n\nIn the browser, click through some of the other samples to see them rendered and also find the related component file - no need to fully understand the code, yet. \n\n[ Normally a component file name matches the component class name it contains. The only reason this practice is not applied in this lab (e.g. `03_props.js` contains class *DynamicLanguagesWithProps*) is to assist with file navigation.]\n\nA nice feature of Storybook is you can see the effect of code changes immediately. For example, in the browser, click the `01 - static component` sample. In your editor, open the file  `components/samples/01_staticComponent.js` and change the  HTML list of languages to the following:\n\n      <ul>\n         <li>Erlang</li>\n         <li>Clojure</li>\n      </ul>  \n\nOn saving the change, return to the browser and notice the change is automatically reloaded (no manual reload necessary), This feature is termed live-reloading and helps speed-up development. \n\n\n### The exercises folder\n\nClick on any of the exercises components in the browser side panel to confirm they are not completed.\n\n![][exercises] \n\nLeave the Storybook server running while completing this lab's exercises. If you do need to stop it type 'cntl/c'. To restart type:\n\n      $ npx start-storybook -p 9001 -c .storybook\n\n[code]: ./archives/start.zip\n[storybook]: ./img/storybook.png\n[numbers]: ./img/numbers.png\n[exercises]: ./img/exercises.png"
    },
  
    {
    "title": "## Exercise 1 (Static Component).",
    "shortTitle": "Static_Component",
    "contentMd" : "## Exercise 1 (Static Component).\n\n__You are required__ to use the React framework to implement a simple (static) component that renders a view similar to that illustrated below (use any two of the module names that you have/will study on this course):\n\n![][exercise1]\n\nAs a guide, the raw HTML table syntax for the above might look as follows:\n\n      <table className=\"table table-bordered\">\n           <thead>\n              <tr>\n              <th>Name</th>\n              <th>No lectures</th>\n              <th>No practicals</th>\n              </tr>\n          </thead>\n          <tbody >\n            <tr>\n              <td>Data Mining</td>\n              <td>2</td>\n              <td>2</td>\n            </tr>\n            <tr>\n              <td>Enterprise Web Dev</td>\n              <td>3</td>\n              <td>2</td>\n            </tr>\n          </tbody >\n    </table>\n\nFor now we will assume exactly two modules are included in the table body. The steps to completing this exercise are:\n\n+ __Step 1__: In the browser, in the side panel of the Storybook page, click the link: 'Samples -> 01 - static component'. Examine the code that produced this component: `components/samples/01_staticComponent.js`. Use it as a guide.\n+ __Step 2__: In the browser, click the link: 'Exercises -> 01 - static component'. It just renders TODO. Open the related file:  `components/exercises/01_staticComponent.js`. THis is where you should implement the new component. Only the render method needs to change. Do not change the class name as this will effect the rendering.\n\nAs you work through this exercise, check how the component is rendering in the browser. Remember live-reloading is happens every time you perform a file save. \n\nYou may wish to consult the [Exercise 1 solution][solutions].\n\nOn completion, stop the Storybook server and update the local Git repo:\n\n        $ git add -A\n        $ git commit -m \"Exercise 1 completed\"\n\nRestart the server:\n\n      $ npx start-storybook -p 9001 -c .storybook\n\n[exercise1]: ./img/exercise1.png      \n[solutions]: ./index.html#/Solutions\n"
    },
  
    {
    "title": "## Exercise 2 (Embedded variables).",
    "shortTitle": "Embedded_Variables",
    "contentMd" : "## Exercise 2 (Embedded variables).\n\nIn exercise 1 the course data was hard-coded in the JSX - course name, module details (name, no. of lectures, etc).  A slight improvement would be to place the data in local variables (say, a two-element array for the module details) and reference them from the JSX code as embedded variables. __You are required__ to implement this improvement, however, for convenience we will use a separate file/component. \n\nThe steps to completing this exercise are as follows:\n\n+ __Step 1__: In the browser, click the link: 'Samples -> 02 - JSX embedded variables'. Examine the related source code code: `components/samples/02_embeddedVariables.js`.\n+ __Step 2__: Open the file  `components/exercises/02_embeddedVars.js` and copy over the *render()* method from the solution to exercise 1. Now adapt the code according to the specification given above. Assume the component is still 'static' in that their is exactly two modules in the course - no need for a loop construct. \n+ __Step 3__: In the browser, click the link: 'Exercises -> 02 - JSX embedded variables' to see the result. As before, do not change the class name as this will effect the rendering.\n\nHint: The pseudo-HTML code below is a guide to the solution required:\n       \n       . . . . . . \n       <tr>\n          <td>modules[1].name</td>\n          <td>modules[1].noLectures</td>\n          <td>modules[1].noPracticals</td>\n        </tr>\n        . . . . . . . \n\n(See Exercise 2 solution [here][solutions].)\n\nOn completing the exercise, stop the server and type these commands:\n\n        $ git add -A\n        $ git commit -m \"Exercise 2 completed\"\n\nRestart the server.\n\n[solutions]: ./index.html#/Solutions\n"
    },
  
    {
    "title": "## Exercise 3 (Props).",
    "shortTitle": "Props",
    "contentMd" : "## Exercise 3 (Props).\n\nThe next design improvement to our course component is to make it __reusable__ by passing the data in as __props__. The component's props include:\n\n+ An array of (exactly) two modules and\n+ The course name. \n\n__You are required__ to implement your solution in `components/exercises/03_props.js`. Use the *render()* method from the solution to exercise 2 as the starting point. A useful guide to the changes required might be the code in `components/samples/03_props.js`.\n\nNOTE: For Storybook to render your solution  correctly, the prop names must be as follows:\n\n+ course - the course name (i.e. this.props.course).\n+ modules - the two-element array of modules.\n\nIn the browser, click 'Exercises -> 03 component with props' to see your solution render.\nOn completing the exercise, stop the server and type these commands:\n\n        $ git add -A\n        $ git commit -m \"Exercise 3 completed\"\n\nRestart the server.\n\n\n"
    },
  
    {
    "title": "## Exercise 4 (Iteration).",
    "shortTitle": "Iteration",
    "contentMd" : "## Exercise 4 (Iteration).\n \nIn the previous exercise the component was hard-coded to expect a modules array prop of exactly two elements. It should be able to handle any __array size__. \n\n__You are required__ to implement your solution to this requirement in `components/exercises/04_iteration.js`. Use `components/samples/04_iteration.js` as a guide.\n\nNOTE: For Storybook to render your solution component correctly, your prop names must be as follows:\n\n+ course -  course name.\n+ modules - the n-element array of modules.\n\nTHe Storybook page renders your solution on clicking 'Exercises -> 04 - iteration'. THe rendered output should be as follows:\n\n![][exercise4] \n\nAn outline solution is [available here][solutions].\n\nOn completing the exercise, update the local repository:\n\n        $ git add -A\n        $ git commit -m \"Exercise 4 completed\"\n\nThat completes this part of the lab. We now switch focus from individual components to a complete app.\n\n[solutions]: ./index.html#/Solutions\n[exercise4]: ./img/exercise4.png\n\n"
    },
  
    {
    "title": "## The create-react-app tool.",
    "shortTitle": "CRA_tool",
    "contentMd" : "## The create-react-app tool.\n\nWhile *Storybook* is a tool for developing individual components, the *create-react-app* tool is for application (app) development. For convenience, we will use the 'course modules' context again (but add some small improvements).\n\nIn the terminal window, create a new folder (away from `basicReactLab`). Go to this new folder and type the commands:\n\n       $ npx create-react-app course-app\n       $ cd course-app\n\nThe first command __scaffolded__ a React project, located in a new folder called `course-app` (see illustration).\n\n![][scaffold]\n\nIt's actually a runnable app already. To prove it, type the command:\n\n        $ npm start\n\nThis command performs the following task sequence:\n\n+ Transpiles any JSX and ES6 code in the `src` folder. It starts with `src/index.js` and then follows the import statements to find other source files. Note, you will not see physical evidence of the transpiled files on the filesystem. This will only occur at the production stage (later). \n+ Starts a __development-mode web server__ on port 3000.\n+ Opens a tab in your default web browser and issue a HTTP request to http://localhost:3000/\n+ The server responds with `public/index.html`, followed by relevant assets (transpiled JS, CSS).\n\nThe server perform __live reloading__ - watches all project source files for updates and re-transpiles and reload the app in the browser when changes occur.\n\nThe browser should be displaying the default React app:\n\n![][default]\n\nWe will mold this skeleton app into our simple custom app. The desired user interface is as follows:\n\n![][obj]\n\nThe app's component hierarchy design will be as follows:\n\n               App (default)\n                |\n                |\n                V\n              Course\n                |\n                |  (multiple)\n                V\n              Module \n\nThe App component renders a child called Course. Course renders many instances of a Module component. To achieve this, first create a sub-folder of `src` called `components`. Create a new file `src/components/module.js` and paste in the following code:\n\n\n    import React , { Component } from 'react';\n\n    export default class Module extends Component { \n        render() {\n            return (\n                <tr>\n                    <td>{this.props.description.name}</td>\n                    <td>{this.props.description.noLectures}</td>\n                    <td>{this.props.description.noPracticals}</td>\n                </tr>\n            );\n        } \n    \n    }\n\nCreate a second file `src/components/course.js` and paste in the following:\n\n    import React , { Component } from 'react';\n    import Module from './module'\n\n    export default class Course extends Component { \n        render() {\n            let list = this.props.modules.map(\n                (module, index) => <Module key={index} description={module} />\n            );       \n            return (\n                <div>\n                    <h1>{`${this.props.title} modules table`} </h1>\n                    <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>No lectures</th>\n                                <th>No practicals</th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {list}\n                        </tbody >\n                    </table>\n                </div> \n            );\n        } \n    \n    }\n\nDownload [this image][wit] and move it to the `src` folder. In `src/App.js`, replace the entire content with the following:\n\n    import React, { Component } from 'react';\n    import Course from './components/course';\n    import './App.css'\n    import witCrest from './wit_crest.png';\n\n    class App extends Component {\n      render() {\n        let modules = [\n            {\n                name: 'Agile S/W Dev',\n                noLectures: 2,\n                noPracticals: 2  \n            },\n            {\n                name: 'Cloud Architecture',\n                noLectures: 2,\n                noPracticals: 3  \n            },\n            {\n                name: 'Data Mining',\n                noLectures: 2,\n                noPracticals: 2  \n            },\n            {\n                name: 'Enterprise Web Dev',\n                noLectures: 2,\n                noPracticals: 1  \n            }\n        ] ;\n        let name = 'MSc Enterprise Systems' ;\n\n        return ( \n           <div >\n             <header className=\"App-header\">\n                <img src={witCrest} alt=\"logo\" />\n             </header>\n             <div className=\"course\">\n               <Course title={name} modules={modules} />\n             </div>\n           </div>\n        );\n      }\n    }\n    export default App;\n\nReplace the content of `src/App.css` with the following:\n\n        .App-header {\n           background-color: lightblue;\n           height: 120px;\n           padding: 10px;\n           color: white;\n        }\n\n        .course {\n           padding: 10px;\n        }\n\nAssuming the server is still running (if not, start it with '$ npm start'), the browser should now be rendering the desired result, except for some styling issues (see below). You should now review all the above code changes to ensure you understand how the app produced it's UI. \n\nThe styling problem is due to our omission of the Bootstrap CSS file. Stop the server and install it as follows:\n\n      $ npm install --save  bootstrap@3.3.6\n      $ npm start\n\nThe traditional approach (which we won't use) to referencing CSS is by adding a link tag in `index.html`:\n\n          <link href=\"... path to CSS file ...\" rel=\"stylesheet\">\n\nA newer and more developer-friendly approach is to reference it directly from the JS code. In `src/index.js` add the following line (at the top):\n\n     import '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nAlso, remove these two unnecessary lines:\n\n1. import * as serviceWorker from './serviceWorker';\n1. serviceWorker.unregister();\n\nThe app should now be rendering as planned. In `src/index.js` notice the statement:\n\n    ReactDOM.render(<App />, document.getElementById('root'));\n\nThis attaches the App component (and its subordinates - Course and Modules) to the browser's DOM at the element with id root. This element was declared by create-react-app in the body of `public/index.html`:\n\n    <div id=\"root\"></div>\n\nThe tool's development server treats `public/index.html` as a template. At runtime it:\n\n1. Merges all the JS code, starting at `src/index.js`, into one JS asset. The code includes your custom code, React and other third party libraries. \n1. Inserts a script tag into the body of `index.html` to reference that asset.\n\nDuring development mode (default) their is no evidence of the merged JS on your filesystem. It only appears when in production mode (see later).\n\nLive reloading is a great aid when debugging. As a simple example, suppose we deliberately add an error to `src/App.js` by changing the line:\n\n\t\t  let name = 'MSc Enterprise Systems' ;\n\nto: \n\n\t\t  let course_name = 'MSc Enterprise Systems' ;\n\nOn saving the change the tool re-transpiles the code and reports any errors to the terminal window:\n\n![][error]\n\nUndo the change to fix the error.\n\nThe app is now complete but clearly the development server environment is not suitable for a public-facing or production app. Transpilation should not be happening dynamically and all file sizes should be __minified__, thus improving load-time performance. To build a production-ready app, stop the development server and type the command:\n\n        $ npm run build\n\nThis creates a `build` folder to house the production-quality, static form of the app: \n\n![][build]\n\nAll the app's JS code is stored in ONE JS file and the content is __minified__. The file name is a computed hash value to aid browser caching operations.\n\nTo use the production version of the app we need a standard web server. If you already have one installed, start it from the `course-app/build` folder and view it in the browser. Otherwise, install this simple HTTP server:\n\n      $ npm install -g httpserver\n\nand start it from the `course-app/build` folder, as follows:\n\n      $ httpserver\n\nIn the browser navigate to: http://localhost:8080.\n\n[Housekeeping: Assuming you will not be doing further developing of this app, to conserve disk space you should delete the `node_modules` folder. If you need to experiment with the code at some future point, remember to first reinstall the required packages with the command (from the `course-app` folder): $ npm install  ]\n\n\n[transforms]: https://github.com/substack/node-browserify/wiki/list-of-transforms\n[scaffold]: ./img/scaffold.png\n[obj]: ./img/obj.png\n[default]: ./img/default.png\n[wit]: ./img/wit_crest.png\n[error]: ./img/error.png\n[error2]: ./img/errorbrowser.png\n[css]: ./img/css.png\n[build]: ./img/build.png\n"
    },
  
    {
    "title": "## Exercise 1 (Static Component) solution.",
    "shortTitle": "Solutions",
    "contentMd" : "## Exercise 1 (Static Component) solution.\n\n    import React , { Component } from 'react';\n    import '../../node_modules/bootstrap/dist/css/bootstrap.css';\n\n    export default class CourseModules extends Component { \n    \n        render() {\n            return (\n                <div>\n                  <h1>MSc Enterprise Systems - Modules table </h1>\n                  <table className=\"table table-bordered\">\n                    <thead>\n                        <tr>\n                        <th>Name</th>\n                        <th>No lectures</th>\n                        <th>No practicals</th>\n                        </tr>\n                    </thead>\n                    <tbody >\n                       <tr >\n                         <td>Data Mining</td>\n                         <td>2</td>\n                         <td>2</td>\n                       </tr>\n                       <tr >\n                         <td>Enterprise Web Dev</td>\n                         <td>3</td>\n                         <td>2</td>\n                       </tr>\n                    </tbody >\n                 </table>\n               </div> \n            );\n        }\n    }\n\n\n## Exercise 2 solution.\n\n        import React , { Component } from 'react';\n        import '../../node_modules/bootstrap/dist/css/bootstrap.css';\n\n        export default class CourseModulesEmbeddedVars extends Component { \n        \n            render() {\n                let name =  'MSc Enterprise Systems - Modules table'; \n                let modules = [\n                    {\n                        name: 'Data Mining',\n                        noLectures: 2,\n                        noPracticals: 2  \n                    },\n                    {\n                        name: 'Enterprise Web Dev.',\n                        noLectures: 2,\n                        noPracticals: 1  \n                    }\n                ] ;\n\n                return (\n                     <div>\n                        <h1>{name}</h1>\n                        <table className=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>No lectures</th>\n                                    <th>No practicals</th>\n                                </tr>\n                            </thead>\n                            <tbody >\n                                <tr >\n                                    <td>{modules[0].name}</td>\n                                    <td>{modules[0].noLectures}</td>\n                                    <td>{modules[0].noPracticals}</td>\n                                </tr>\n                                <tr >\n                                    <td>{modules[1].name}</td>\n                                    <td>{modules[1].noLectures}</td>\n                                    <td>{modules[1].noPracticals}</td>\n                                </tr>\n                            </tbody >\n                        </table>\n                    </div> \n                );\n                }\n        }\n\t\n\n## Exercise 4 (outline) solution .\n\n    import React , { Component } from 'react';\n    import '../../node_modules/bootstrap/dist/css/bootstrap.css';\n\n    export default class CourseModulesIteration extends Component { \n    \n        render() {\n            let list = this.props.modules.map((module, index) => { \n                return (\n                    <tr key={index}>\n                    . . . . TODO . . . . \n                </tr>\n                );\n            });       \n            return (\n                <div>\n                    <h1>{`${this.props.course} modules table`} </h1>\n                    <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>No lectures</th>\n                                <th>No practicals</th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            . . . . TODO . . . . \n                        </tbody >\n                    </table>\n                </div> \n            );\n        } \n    \n    }\n"
    }
  
  ]
  }

