


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Authentication-JWT",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab implements a JWT-based Authentication strategy on the Hacker News solution from the previous lab.</p>",
  "folder" : "book-01",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Authentication using JWT and Passport",
    "shortTitle": "Authentication-JWT",
    "contentMd" : "# Authentication using JWT and Passport\r\n\r\nThis lab implements a JWT-based Authentication strategy on the Hacker News solution from the previous lab.\r\n\r\n"
    },
  
    {
    "title": "# Introduction",
    "shortTitle": "JWT",
    "contentMd" : "# Introduction\r\nThis lab will create authentication with JSON Web Tokens for the hacker news solution in previous labs. You will include the jwt token with every request, meaning that we don’t need sessions. This way you don’t need cookies, but clients of the service will need to save the JWT in localStorage or other places on the frontend.\r\n\r\nIn this lab you will:\r\n\r\n+ create an */api/users* route to register and acquire a token\r\n+ add authorisation middleware the *api/posts* route, making it only is available to users with a valid JSON web token\r\n+ update the HackerNews React app to use the API.\r\n+ add basic login/signin functionality to HackerNews app.\r\n\r\n\r\n\r\n# Set up\r\nYou will need the solution form last weeks lab(lab-node3) as a starting point. You can find a solution to the last lab [here](https://github.com/fxwalsh/ewd-examples-2019.git) in */labs/lab-node3*.\r\n\r\n## Install dependencies\r\nYou'll need the following dependencies to implement the authentication functionality:\r\n\r\n~~~bash\r\nnpm install --save passport passport-jwt jsonwebtoken bcrypt-nodejs\r\n~~~\r\n\r\n\r\n## Create Mongoose User Model\r\nYou will need to create a new user model for authentication.\r\n\r\n+ Create a new folder **/api/users/** in the root project folder. In this folder, create a new file called **userModel.js** and enter the following code:\r\n\r\n~~~javascript\r\nimport mongoose from 'mongoose';\r\nimport bcrypt from  'bcrypt-nodejs';\r\n\r\nconst Schema = mongoose.Schema;\r\nconst UserSchema = new Schema({\r\n  username: {\r\n        type: String,\r\n        unique: true,\r\n        required: true,\r\n    },\r\n  password: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n});\r\n\r\nUserSchema.pre('save', function(next) {\r\n    const user = this;\r\n    if (this.isModified('password') || this.isNew) {\r\n        bcrypt.genSalt(10, (err, salt)=> {\r\n            if (err) {\r\n                return next(err);\r\n            }\r\n            bcrypt.hash(user.password, salt, null, (err, hash)=> {\r\n                if (err) {\r\n                    return next(err);\r\n                }\r\n                user.password = hash;\r\n                next();\r\n            });\r\n        });\r\n    } else {\r\n        return next();\r\n    }\r\n});\r\n\r\nUserSchema.statics.findByUserName = function(username) {\r\n    return this.findOne({ username: username});\r\n  };\r\n\r\nUserSchema.methods.comparePassword = function(passw, cb) {\r\n    bcrypt.compare(passw, this.password, (err, isMatch) => {\r\n        if (err) {\r\n            return cb(err);\r\n        }\r\n        cb(null, isMatch);\r\n    });\r\n};\r\n\r\nmodule.exports = mongoose.model('User', UserSchema);\r\n~~~\r\n\r\nThis script defines the schema for a user. Note that it includes a pre-save hook that encrypts the password property before it is saved or updated. Also, the comparePassword() instance method can be used to authenticate users.\r\n\r\n# Seed database with User Data\r\nFor development and testing purposes it would be a good idea to seed the database with some user data.\r\n\r\n+ Create a new file called **userData.js** in the root folder of the project and enter the following Javascipt code:\r\n\r\n~~~javascript\r\nimport userModel from './api/users/userModel';\r\n\r\nconst users = [{\r\n        'username': 'user1',\r\n        'password': 'test1',\r\n    },\r\n    {\r\n        'username': 'user2',\r\n        'password': 'test2',\r\n    },\r\n];\r\n\r\n\r\nexport default async function loadUsers() {\r\n\r\n    try {\r\n        await userModel.deleteMany();\r\n        new userModel(users[0]).save();\r\n        new userModel(users[1]).save();\r\n        console.info(`${users.length} users were successfully stored.`);\r\n    } catch (err) {\r\n        console.error(`failed to Load user Data: ${err}`);\r\n    }\r\n}\r\n~~~\r\n\r\n+ Update the main script for the app,  **/index.js**,  to import userdata.js and run the loadUsers() function. Add the following lines of code to **/index.js** in the root folder.\r\n\r\n~~~javascript\r\n...\r\nimport loadUsers from './userData';\r\n...\r\n\r\n// Populate DB with sample data\r\nif (process.env.seedDb) {\r\n  loadContacts();\r\n  loadPosts();\r\n// ADD THE NEXT LINE :)\r\n  loadUsers();\r\n}\r\n\r\n~~~\r\n\r\n+ Open a terminal window in the root folder and start the app by entering ``npm start``. Confirm that the users are being loaded by checking that you see the following console output:\r\n\r\n~~~bash\r\n[nodemon] starting `babel-node index.js`\r\nbody-parser deprecated undefined extended: provide extended option index.js:82:30\r\nServer running at 8080\r\n2 users were successfully stored.\r\n4 contacts were successfully stored.\r\n4 posts were successfully stored.\r\n~~~\r\n"
    },
  
    {
    "title": "# User API",
    "shortTitle": "Hashing & Salting",
    "contentMd" : "# User API\r\n\r\nYou will now create the routes for logging in (authentication) and  registering new users.\r\n\r\n### Get Users\r\n+ In **/api/users/** create a new file called **index.js**. Add the following code to the file:\r\n\r\n~~~javascript\r\nimport express from 'express';\r\nimport User from './userModel';\r\nimport asyncHandler from 'express-async-handler';\r\n\r\nconst router = express.Router(); // eslint-disable-line\r\n\r\n// Get all users\r\nrouter.get('/', asyncHandler(async (req, res) => {\r\n    const users = await User.find();\r\n    res.status(200).json(users);\r\n}));\r\n\r\nexport default router;\r\n~~~\r\n\r\n+ Now add the following two lines of code to the  */index.js* in the root folder to include this router in the Express app.\r\n\r\n~~~Javascript\r\n...\r\nimport usersRouter from './api/users';\r\n...\r\n\r\napp.use('/api/users', usersRouter);\r\n\r\n...\r\n\r\n~~~\r\n\r\n+ Using Postman (or in a browser), make a HTTP GET request for http://localhost:8080/api/users. You should get the following:\r\n\r\n~~~json\r\n[{\"_id\":\"5ad4a415d868c95db7089568\",\r\n  \"username\":\"user1\",\r\n  \"password\":\"$2a$10$Yr2RaZZys7/ot/cfKQOmHOgiJdC53FOYfb7m6dzA5yXMh8wvUwuDq\",\"__v\":0},\r\n{\"_id\":\"5ad4a415d868c95db7089569\",\r\n    \"username\":\"user2\",\r\n    \"password\":\"$2a$10$0WvCY4f5g9QBOPwzHqoIquSGMSAqX3uT5I82LQp.NwPkKGWKFJQcW\",\r\n    \"__v\":0}]\r\n~~~\r\n+ Note how the passwords are being hashed before being saved in the database.\r\n\r\n### Register/Authenicate Users\r\nYou will use the **POST** on */api/users* to both authenticate and register users. The 'action' parameter in the query string can be used to distinguish between login and signup/register. We will also need to specify a secret environment variable that will be used to create the Javascript Web Token.\r\n\r\n+ Add the following entry for the secret variable into the *.env* file\r\n\r\n~~~bash\r\nsecret=ilikecake\r\n~~~\r\n\r\n+ Add the following import statement and route to */api/users/index.js*.\r\n\r\n~~~javascript\r\nimport jwt from 'jsonwebtoken';\r\n\r\n....\r\n\r\n// Register/login a user, using async handler\r\nrouter.post('/', asyncHandler(async (req, res) => {\r\n  if (!req.body.username || !req.body.password) {\r\n    res.json({\r\n      success: false,\r\n      msg: 'Please pass username and password.',\r\n    });\r\n  };\r\n  if (req.query.action === 'register') {\r\n    const newUser = new User({\r\n      username: req.body.username,\r\n      password: req.body.password,\r\n    });\r\n    // save the user\r\n    await newUser.save();\r\n    res.status(201).json({\r\n      success: true,\r\n      msg: 'Successful created new user.',\r\n    });\r\n  } else {\r\n    const user = await User.findByUserName(req.body.username);\r\n    if (!user) return res.status(401).send({success: false, msg: 'Authentication failed. User not found.'});\r\n    user.comparePassword(req.body.password, (err, isMatch) => {\r\n      if (isMatch && !err) {\r\n        // if user is found and password is right create a token\r\n        const token = jwt.sign(user.username, process.env.secret);\r\n        // return the information including token as JSON\r\n        res.status(200).json({\r\n          success: true,\r\n          token: 'BEARER ' + token,\r\n        });\r\n      } else {\r\n        res.status(401).send({\r\n          success: false,\r\n          msg: 'Authentication failed. Wrong password.',\r\n        });\r\n      }\r\n    });\r\n  };\r\n}));\r\n~~~\r\n\r\nThe above function checks for both username and password in the request. If the action parameter's value is \"register\", it attempts to create a new user in the database (using the mongoose User model). Otherwise, it authenticates the user, creates the JWT token using the secret and signed with the users username.\r\nThe token is then returned to the client for use in future requests.\r\n\r\n## Testing using Postman\r\n\r\nTest that you can create and authenticate a user by trying the following tests in Postman:\r\n\r\n+ **Get Users**:Test that a HTTP GET for */api/users/* returns a collection of User documents with encrypted passwords.\r\n\r\n![Get Users](./img/user1.png)\r\n\r\n+ **Register a User**:Test that a HTTP POST for */api/users/* with ``action=regster`` as a parameter Adds a new User document with an encrypted password. Remember to include a User JSON document in the HTTP request body.\r\n\r\n![Register a New User](./img/user2.png)\r\n\r\n+ **Authenticate a User**:Test that a HTTP POST for */api/users/* authenticates a User. Again, remember to include a User JSON document in the HTTP request body.\r\n\r\n![Authenticate a New User](./img/user3.png)\r\n\r\nIn this case, the API will return the JWT token in the response body.\r\n\r\n+ **Unknown User/Password**: Try to authenticate with an unknown user. You should see the following response:\r\n\r\n![Unknown User](./img/user4.png)"
    },
  
    {
    "title": "# Add Passport Authentication",
    "shortTitle": "Passport",
    "contentMd" : "# Add Passport Authentication\r\n\r\nPassport strategies are a middleware functions that a requests runs through before getting to the actual route.​ You will now create a JWT strategy and add it to the /api/posts route.\r\n\r\n+ in the root folder create a new folder called **auth**.\r\n+ Create a new file called **/auth/index.js** with the following contents:\r\n\r\n~~~javascript\r\nimport passport from 'passport';\r\nimport passportJWT from 'passport-jwt';\r\nimport UserModel from './../api/users/userModel';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst JWTStrategy = passportJWT.Strategy;\r\nconst ExtractJWT = passportJWT.ExtractJwt;\r\n\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJWT.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = process.env.secret;\r\nconst strategy = new JWTStrategy(jwtOptions, async function(payload, next) {\r\n  // usually this would be a database call:\r\n  const user = await UserModel.findByUserName(payload);\r\n  if (user) {\r\n    next(null, user);\r\n  } else {\r\n    next(null, false);\r\n  }\r\n});\r\n\r\npassport.use(strategy);\r\n\r\nexport default passport;\r\n~~~\r\nThe above script extracts the user from the token in the request (the payload) and verifies it is a valid username. The *user id* is then passed on to the next middleware, accessible through the request object.\r\n\r\nUpdate the HackerNews posts API to use the user id by adding ``user`` field to the post schema and including it in the posts API:\r\n\r\n+ Replace PostSchema in /api/posts/postsModel.js with the following:\r\n\r\n~~~Javascript\r\nimport mongoose from 'mongoose';\r\nconst Schema = mongoose.Schema;\r\n\r\nconst CommentSchema = new Schema({\r\n  body: {type: String, required: true},\r\n  user: {type: Schema.Types.ObjectId,ref:'User', required: true},\r\n  upvotes: {type: Number, default: 0},\r\n  });\r\n\r\n const PostSchema = new Schema({\r\n   title: {type: String, required: true},\r\n   link: {type: String, optional: true},\r\n   user: {type: Schema.Types.ObjectId,ref:'User', required: true},\r\n   comments: [CommentSchema],\r\n   upvotes: {type: Number, min: 0, max: 100, default: 0},\r\n   created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  }\r\n });\r\nexport default mongoose.model('posts', PostSchema);\r\n~~~\r\n\r\n+ In */api/posts/index.js*, replace the \"Add a post\" route with the following code to add the username payload extracted from the JWT token\r\n\r\n~~~Javascript\r\n...\r\n// Add a post\r\nrouter.post('/', asyncHandler(async (req, res) => {\r\n    const newPost = req.body;\r\n    newPost.user = req.userId || 'anonymous';\r\n    if (newPost) {\r\n          const post = await Post.create(newPost);\r\n          return res.status(201).send({post});\r\n      } else {\r\n         return handleError(res, err);\r\n      }\r\n}));\r\n...\r\n~~~  \r\n\r\nYou need to import the jwt configured passport object into the main app script,  */index.js*.\r\n\r\n+ Open **/index.js** and make the following changes to add authentication to the /api/posts/ route:\r\n\r\n~~~javascript\r\n// import passport configured with JWT strategy​\r\nimport passport from './auth';\r\n\r\n…​\r\n\r\n// initialise passport​\r\napp.use(passport.initialize());​\r\n\r\n…​\r\n\r\n// Add passport.authenticate(..)  to middleware stack for protected routes​\r\napp.use('/api/posts', passport.authenticate('jwt', {session: false}), postsRouter);\r\n\r\n~~~\r\n\r\n## Test the Hacker News API\r\n\r\nNow test that access to the */api/posts* requires JWT token.\r\n\r\n+ As before, authenticate a known user in the database. This time, copy the JWT Token returned from the API:\r\n\r\n![Get JWT Token](./img/user3.png)\r\n\r\n+ Try to access */api/posts* without including the token - it will return a status 401 - unauthorised. \r\n\r\n![No/invalid JWT Token](./img/user5.png)\r\n\r\n+ Now, in Postman, add a ``authorization`` header to the request and paste in the JWT token copied in the  previous step. You should now see all existing posts returned.\r\n\r\n![No/invalid JWT Token](./img/user7.png)\r\n"
    },
  
    {
    "title": "# Hooking up the React App.",
    "shortTitle": "React",
    "contentMd" : "# Hooking up the React App.\r\nWe will now connect your Hacker News React App to the API. This step requires completion of the React labs.\r\n\r\n## System Architecture\r\n\r\nWe will keep using the **create-react-app** framework you were using previously. **create-react-app** provides a mechanism for working with an API server in development. We can have the development server proxy requests intended for our API server as follows:\r\n\r\n![Development Architecture](./img/architecture.png)\r\n\r\nThe React app makes an API request to localhost:3000, the Webpack development server. The development server proxies that request to the API server. This will remove any Cross-Origin-Resource-Sharing (CORS) issues with the browser.\r\nFor this to work we need to launch both the create-react-app dev server and the API server in order to run the app locally. We also need to get the react dev server to proxy requests to the Express API.\r\n\r\n+ Copy the complete hackerNews app from it's current location and put it in the root of your Express API (node-lab2). To speed things up, you could delete the *node-modules* folder before copying and then do a ``npm install`` in the now location.\r\nIt should look like this when complete:\r\n\r\n![HackerNews folder](./img/files.png)\r\n\r\n+ Open a console window in the hackerNews folder and start the react app:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nCheck that the app functions as before. If it's not working then check the error messages if any.\r\n\r\n## Set up\r\n\r\n#### Nodemon filter\r\nWe want the nodemon process to ignore any changes in the hackerNews folder as these will not affect the API. In the **package.json file in the lab-Node2 root folder**, update the scripts property to the following:\r\n\r\n```json\r\n\"scripts\": {\r\n      \"start\":  \"nodemon --ignore hackerNews/* --exec babel-node index.js\"\r\n    }\r\n```\r\n\r\n#### Proxy Server\r\nTo have the React development server proxy our API requests to our Express API server, we need to add the following to the **package.json file in the hackerNews folder.**   \r\n```json\r\n\"proxy\":\"http://localhost:8080\",\r\n```\r\n\r\nThis should forward any request for unknown resources though to our Express app listening on port 8080.\r\n\r\n#### Axios\r\n\r\nWe will need to make http requests to the Express API from the React App. In the **hackerNews** folder, install **axois**.\r\n\r\n```\r\nnpm install --save axios\r\n```\r\n\r\nAxios is a promise-based HTTP client for the browser and node.js. You will use it to make requests to the Express API.\r\n\r\n### Start both servers\r\nYou will need to now start both the react app server and the Express API at the same time. Open two separate command windows in the hackerNews folder and the parent lab folder. Start the respective servers in both windows:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nYou should see both processes come to life. As before, they support 'hot code changes' so you should not have to restart the processes as you make changes.\r\n\r\n## Integrate the Express Hacker News API\r\n\r\nCurrently the Hacker News app uses a stubAPI to mimic a real API. We will now replace this with functionality that integrates with our API.  We also need to manage JWT tokens in local storage in the browser.\r\n\r\n+ In the hackerNews/src folder create a file called **auth.js** with the following content:   \r\n\r\n```javascript\r\nclass Auth {\r\n\r\n  /**\r\n   * Authenticate a user. Save a token string in Local Storage\r\n   *\r\n   * @param {string} token\r\n   */\r\n  static authenticateUser(token) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  /**\r\n   * Check if a user is authenticated - check if a token is saved in Local Storage\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  static isUserAuthenticated() {\r\n    return localStorage.getItem('token') !== null;\r\n  }\r\n\r\n  /**\r\n   * Deauthenticate a user. Remove a token from Local Storage.\r\n   *\r\n   */\r\n  static deauthenticateUser() {\r\n    localStorage.removeItem('token');\r\n\r\n\r\n  /**\r\n   * Get a token value.\r\n   *\r\n   * @returns {string}\r\n   */\r\n\r\n  static getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n}\r\n\r\nexport default Auth;\r\n\r\n```\r\n\r\n+ Create a new script in the *hackerNews/src* folder called **api.js** and enter the following code:\r\n\r\n```javascript\r\nimport axios from 'axios';\r\nimport auth from './auth';\r\nexport const upvote = async (postId) => {\r\n   axios.post(`/api/posts/${postId}/upvote`)\r\n              .then(resp => resp.data);\r\n};\r\n\r\nexport const getAll = async () => {\r\n   const resp = await axios.get('/api/posts',{headers: {'Authorization': auth.getToken()}},)\r\n   return resp.data;\r\n};\r\n\r\nexport const getPost = async (postId) => {\r\n  const resp = await axios.get(`/api/posts/${postId}`,{headers: {'Authorization': auth.getToken()}})\r\n  return resp.data;\r\n};\r\n\r\nexport const add = async (newTitle, newLink) => {\r\n  const resp = await axios.post('/api/posts',{title: newTitle, link: newLink }, {headers: {'Authorization': auth.getToken()}});\r\n  return resp.data;\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n  const resp = await axios.post('/api/users', { username: username, password: password });\r\n  return resp.data;\r\n};\r\n\r\nexport const signup = async (username, password) => {\r\n  const resp = await axios.post('/api/users?action=register', { username: username, password: password });\r\n  return resp.data;\r\n};\r\n```\r\n\r\nNotice how the routes match what is implemented in the Express API **and** what was tested using postman. The proxy property in the HackerNews *package.json* provides the host information required to complete the request(i.e. localhast:8080).\r\n\r\n+ In the ``hackerNews/src``, edit ``App.js`` as follows: Add and import statement for the new **api** package.\r\n\r\n```javascript\r\nimport * as api from './api';\r\n```\r\n\r\n+ We are going to place the posts returned from the Express API in the HackerApp component state. We will only show the NewsList component if we successfully retrieve all posts from the API. We include an *isHidden* property to indicate this.\r\nIn *App.js*, us the  function  ``componentDidMount()`` of the App component to get the posts from the Express API:\r\n\r\n```javascript\r\n...\r\n    async componentDidMount () {\r\n        try{\r\n              const resp = await api.getAll();\r\n              this.setState({\r\n                       posts: resp,\r\n                       isHidden: false,\r\n                     });\r\n           } catch (e){\r\n             this.setState({\r\n                      isHidden: true\r\n                    });\r\n           }\r\n      };\r\n    ...\r\n    ...\r\n```\r\n\r\n+ Now replace the ``render`` function of the HackerApp component with the following code. This replaces the previous use of stubAPI with the new posts state retrieved from the *api* package.\r\n\r\n```javascript\r\nrender() {\r\n  const posts = _.sortBy(this.state.posts, post =>\r\n        post.upvotes);\r\n  return (\r\n    <div>\r\n    {!this.state.isHidden && <NewsList posts={posts}\r\n          upvoteHandler={this.incrementUpvote} />}\r\n     <Form addHandler={this.addPost} />\r\n   </div>\r\n  );\r\n}\r\n```\r\n\r\nNow have a look at the app in the browser. You should see the list of news items as before. This time, however, they are retrieved from the Express API.\r\nTry to add a new post. You'll notice nothing happens. Next we will update the addPost() method.\r\n\r\n### Adding a post\r\n\r\n+ Locate the ``addPost`` function in the HackerApp component. Replace it with the following:\r\n\r\n```javascript\r\n...\r\naddPost = async (title, link) => {\r\n  try{\r\n    const resp = await api.add(title, link);\r\n    const newPost = {\"id\":resp.id,\"title\":title,\"link\":link,\"upvotes\":0, \"comments\":[]};\r\n    this.setState({posts: this.state.posts.concat([newPost])});\r\n  } catch(e){\r\n    alert(`failed to add post: ${e}`);\r\n  }\r\n};\r\n...\r\n```\r\nThis function calls the Express API using async/await. When the await returns, then it pushes the new post onto the posts state property. The HackerApp should react to this state and call the render function again.\r\n\r\nCheck the app in the browser again. You should be able add posts to the list.\r\n\r\n### Upvoting a Post\r\n\r\nThe upvote will cause errors if you try to use it at the moment.\r\nReplace the **incrementUpvote** function in the ReactApp component with the following:\r\n\r\n```javascript\r\n\r\nincrementUpvote = async (id) => {\r\ntry{\r\n  await api.upvote(id)\r\n  var upvotedPost = _.find(this.state.posts, post=>post.id === id);\r\n  upvotedPost.upvotes++;\r\n  this.setState({})} catch(e){\r\n    alert(`failed to upvote post ${id}: ${e}`);\r\n  }\r\n};\r\n```\r\nNow start the application. You will probably notice you get a proxy message failure message as the react app tries to start.\r\n\r\n~~~bash\r\nroxy error: Could not proxy request /api/posts from localhost:3000 to http://localhost:8080.\r\nSee https://nodejs.org/api/errors.html#errors_common_system_errors for more information (ECONNREFUSED).\r\n~~~\r\n\r\nThis is because the react app (the client) has not retrieved a valid Javascript Web Token to use the HackerNews Express API.\r\nIn the next part, we will include a Login page to allow user authentication.\r\n"
    },
  
    {
    "title": "# Create a Login/Signin page",
    "shortTitle": "Login",
    "contentMd" : "# Create a Login/Signin page\r\n\r\nFinally, lets create a basic React component that can manage User registration and Authentication from your Hacker News App.\r\n\r\n+ In */hackerNews/src/components*  folder, create a new folder called **loginPage** and add a file **index.js** with the following contents:\r\n\r\n~~~Javascript\r\nimport React, {Component} from \"react\";\r\nimport * as api from '../../api';\r\nimport Auth from '../../auth';\r\nimport {Redirect} from 'react-router'\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      confirmpassword: \"\",\r\n      authenticated: false,\r\n      action: \"Log In\"\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSignUp = async (event) => {\r\n    try {\r\n      if (this.state.password !== this.state.comfirmpassword) {\r\n        alert('Passwords Must Match');\r\n        console.log(\"failed\")\r\n      } else {\r\n        const result = await api.signup(this.state.username, this.state.password);\r\n        this.setState({\r\n          authenticated: true\r\n        })\r\n      }\r\n\r\n    } catch (e) {\r\n      alert(`Registration Failed ${e}`)\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  submitForm = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  validateForm = () => {\r\n    return this.state.username.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleLogin = async (event) => {\r\n    try {\r\n      const result = await api.login(this.state.username, this.state.password);\r\n      Auth.authenticateUser(result.token);\r\n      this.setState({\r\n        authenticated: true\r\n      })\r\n    } catch (e) {\r\n      alert(`Authentication Failed: ${e}`)\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  switchView = event => {\r\n    this.setState({\r\n      action: event.target.value\r\n    })\r\n    event.preventDefault()\r\n  }\r\n\r\n  render() {\r\n\r\n    const { from } = this.props.location.state || '/';\r\n    const { authenticated } = this.state;\r\n\r\n    return (\r\n   <div className=\"col-md-4 col-md-offset-3\">\r\n   <h2  className=\"card-title mb-4 mt-1\">{this.state.action}</h2>\r\n\t <form onSubmit={this.submitForm}>\r\n    <div className=\"form-group\">\r\n    \t<label>Your username</label>\r\n        <input id=\"username\" name=\"\" className=\"form-control\" placeholder=\"username\" onChange={this.handleChange} />\r\n    </div> \r\n    <div  className=\"form-group\">\r\n    \t<label>Your password</label>\r\n      <input id=\"password\" className=\"form-control\" placeholder=\"******\" type=\"password\" onChange={this.handleChange}/>\r\n        {this.state.action===\"Register\" && <div><label>Confirm password</label><input id=\"comfirmpassword\" className=\"form-control\" placeholder=\"******\" type=\"password\" onChange={this.handleChange}/></div>}\r\n    </div>\r\n    <div className=\"form-group\">\r\n      {this.state.action===\"Log In\" && <button type=\"submit\"  disabled={!this.validateForm()} className=\"btn btn-primary btn-block\" onClick={this.handleLogin}> Log In  </button>}\r\n      {this.state.action===\"Register\" && <button type=\"submit\" disabled={!this.validateForm()} className=\"btn btn-primary btn-block\" onClick={this.handleSignUp}> Register  </button>}\r\n      <div style={{float: 'left',paddingTop:10}}>\r\n        {this.state.action===\"Log In\" && <button   type=\"submit\"  onClick={this.switchView} className=\"btn btn-secondary\" value=\"Register\">Register</button>}\r\n        {this.state.action===\"Register\" && <button type=\"submit\"   onClick={this.switchView} className=\"btn btn-secondary\" value=\"Log In\">Log In</button>}\r\n      </div>\r\n      <div style={{float: 'right',paddingTop:10}}>\r\n        <button type=\"button\"  className=\"btn btn-secondary\" >Forgot?</button>\r\n      </div>\r\n  </div>\r\n</form>\r\n{authenticated && (<Redirect to={from || '/'}/>)}\r\n</div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n~~~\r\n\r\nAgain we import the *api.js* script to interact with the users api. We also use the *auth.js* script to manage local storage of the JWT token.\r\n\r\n## Add the loginPage to HackerNews App\r\nWe will now update the HackerNews app such that, if the user has not authenticated, we will present a link (in the form of a button) to the login page.\r\n\r\n+ Open hackernews/src/index.js and add a new route for the login page.\r\n\r\n~~~Javascript\r\nimport LoginPage from './components/loginPage';\r\n\r\n...\r\n\r\n<Switch>\r\n          <Route path='/posts/:post_id' component={ CommentPage } />\r\n          <Route path='/login' component={LoginPage} />\r\n          <Route exact path='/' component={ HackerApp } />\r\n          <Redirect from='*' to='/' />\r\n</Switch>\r\n~~~  \r\n\r\n+ Locate the render function in the HackerApp component and replace with the following so that the app redirects to the login page if not authenticated:\r\n\r\n~~~Javascript\r\nrender() {\r\n        const posts = _.sortBy(this.state.posts, post =>\r\n            post.upvotes);\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-9 col-md-offset-1\">\r\n                    {this.state.isHidden &&  <Link to={'/login' }><button type=\"button\" class=\"btn btn-primary\">Log In</button></Link>}\r\n                    {!this.state.isHidden && <NewsList posts={posts} upvoteHandler={this.incrementUpvote} />}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-9 col-md-offset-1\">\r\n                        <Form handleAdd={ this.addNewsItem } />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n~~~\r\n\r\n> NOTE: Your render function might be different to the above. The main objective is to locate the NewsList component and replace it with the two statements that display/hide the login button and the NewsList component.\r\n\r\n+ Now Test the HackerNews app. If not logged in you should see the following:\r\n\r\n![Not Authenticated](./img/hacker1.png)\r\n\r\n+ Click on the \"login/signin\" button. This should display the Login page:\r\n\r\n![Login Page](./img/hacker2.png)\r\n\r\n+ Authenticate using username: user1, password: test1. This should return you to the main page and the list of news posts.\r\n\r\n ![Authenticated](./img/hacker3.png)\r\n\r\nCongratulations! You've included JWT in your app.\r\n\r\n## Challenge\r\n\r\nReview your progress so far. Use the same approach to accomplish the following:\r\n\r\n+ integrate the API with the comment page.\r\n+ Update the ContactList app to use the API developed in this lab.\r\n"
    }
  
  ]
  }

