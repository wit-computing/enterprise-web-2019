


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "node-lab3",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab introduces Mongoose, a simple way of interacting with your Mongo database.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Mongoose",
    "shortTitle": "node-lab3",
    "contentMd" : "# Mongoose\r\n\r\nThis lab introduces Mongoose, a simple way of interacting with your Mongo database.\r\n"
    },
  
    {
    "title": "# Set up",
    "shortTitle": "01",
    "contentMd" : "# Set up\r\n\r\nThis lab continues from last weeks lab. If you have not completed last weeks lab you will need to do so.\r\n\r\nIf you don't have the last lab, it will eventually be available in the labs directory of the  [samples](https://github.com/fxwalsh/node-samples-2018.git) repository on Github.\r\n\r\nCheck it works as before by running:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\n### Get Mongo, Mongoose and Express Async Handler\r\n![Mongoose](./img/download.png)\r\n+ Download and install Mongodb by selecting the relevant installer for your OS:\r\n\r\n[MongoDB](https://www.mongodb.com/download-center?jmp=nav#community)\r\n\r\nFollow the instructions and accept all defaults.\r\n\r\nOpen the  command line in the directory where you want to put your db directory and enter the following commands:\r\n\r\n```bash\r\nmkdir db\r\nmongod -dbpath db\r\n```\r\n\r\nThis should create your db directory and start the Mongodb service on your local host.\r\n\r\n+ Install Mongoose in your lab project directory for the Express app (**DONT** innstall it in the React app directory) \r\n\r\n```bash\r\nnpm install -save mongoose\r\n```\r\n\r\n+ We will be using Mongoose with the async await pattern. To help us deal with rejected promises in Express, download the express-async-handler from NPM:\r\n\r\n```bash\r\nnpm install -save express-async-handler\r\n```\r\n"
    },
  
    {
    "title": "# Create a Mongoose Schema for Contacts",
    "shortTitle": "02",
    "contentMd" : "# Create a Mongoose Schema for Contacts\r\n\r\nWith Mongoose we declare the object structure (or schema) for each collection in the database - this app has only one. In your Express app directory, navicate to *api/contact/* and create the file *contactModel.js* containing the following code:\r\n\r\n```javascript\r\nimport mongoose from 'mongoose';\r\nconst Schema = mongoose.Schema;\r\n\r\nconst ContactSchema = new Schema({\r\n  name: String,\r\n  address: String,\r\n  age: {\r\n    type: Number,\r\n    min: 0,\r\n    max: 120,\r\n  },\r\n  email: String,\r\n  updated: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport default mongoose.model('Contact', ContactSchema);\r\n```\r\n\r\nSchema is a constructor function provided by Mongoose for creating schema instances (in this case, ``ContactSchema``). The last line of code above associates the schema instance with a database collection named 'Contact' (MongoDB creates unknown collections automatically, if necessary). The ``model()`` method returns a model object, which has special methods for querying and manipulating the associated collection, e.g. ``find()``, ``findById()``, ``create()`` etc.\r\n"
    },
  
    {
    "title": "# Add configuration parameters",
    "shortTitle": "03",
    "contentMd" : "# Add configuration parameters\r\nYou will need to configure Mongoose to connect to your Mongodb database.\r\n\r\nIt is risky to have configuration parameters such as user-names, passwords, and instance specific parameters \"hard coded\" into your javascript programs. In this exercise you will externalise these paramters into the \".env\" file.\r\n\r\nAdd the following mongoDb URI to the end of your ``.env`` file in the root folder of the express app.\r\n\r\n```bash\r\nmongoDB=mongodb://localhost:27017/contacts_db\r\nseedDb=true\r\n```\r\n\r\nAlso, we will include a ``seedDb`` property to indicate if we wish to seed the database with data. This would only be used in development/testing environments. We will use this later when we cover testing.\r\n\r\n\r\n\r\n## Connect the Database\r\n\r\nYou should only need to connect to the Mongo database once, when your Express application starts\r\n\r\n+ In the root directory of your express app, create a new file called ``db.js`` with the following contents:\r\n\r\n```javascript\r\nimport dotenv from 'dotenv';\r\nimport mongoose from 'mongoose';\r\n\r\ndotenv.config();\r\n\r\n// Connect to database\r\nmongoose.connect(process.env.mongoDB);\r\nconst db = mongoose.connection;\r\n\r\ndb.on('error', (err) => {\r\n    console.log(`database connection error: ${err}`);\r\n});\r\ndb.on('disconnected', () => {\r\n    console.log('database disconnected');\r\n});\r\ndb.once('open', () => {\r\n    console.log(`database connected to ${db.name} on ${db.host}`);\r\n})\r\n```\r\n\r\n+ Add the following line to the import statements at the top of ``index.js`` in the root folder of your Express app.\r\n\r\n~~~javascript\r\nimport './db'\r\n....\r\n~~~\r\n\r\nThis will automatically trigger the connection to the database when the app starts up. \r\nWhen the Express App reloads, you should see output at the command line as following:\r\n\r\n![Successful DB connection](./img/connection.png)\r\n\r\n\r\n## Load Contact Data to MongoDB\r\n\r\n+ Create a new script called ``contactsData.js`` in the root folder of your Express app and enter the following code:\r\n\r\n```javascript\r\nimport contactModel from './api/contacts/contactModel';\r\n\r\nconst contacts = [{\r\n    'name': 'Contact 1',\r\n    'address': '123 Test St',\r\n    'phone_number': '132-3212',\r\n  },\r\n  {\r\n    'name': 'Contact 2',\r\n    'address': '23 Main St',\r\n    'phone_number': '934-4329',\r\n  },\r\n  {\r\n    'name': 'Contact 3',\r\n    'address': '4 Lower St',\r\n    'phone_number': '432-5832',\r\n  },\r\n  {\r\n    'name': 'Contact 4',\r\n    'address': '49 Upper Street',\r\n    'phone_number': '934-4290',\r\n  },\r\n];\r\n\r\nexport default async function loadContacts() {\r\n  try {\r\n    await contactModel.deleteMany();\r\n    await contactModel.collection.insertMany(contacts);\r\n    console.info(`${contacts.length} contacts were successfully stored.`);\r\n  } catch (err) {\r\n    console.error(`failed to Load Contact Data: ${err}`);\r\n  }\r\n}\r\n```\r\n\r\nThe ``loadContacts()`` function exported from the above script will initialise the database with the contacts data we used in the previous labs.\r\n\r\n+ Add the following code to ``index.js`` in the root folder of your Express app.\r\n\r\n```javascript\r\nimport loadContacts from './contactsData';\r\n\r\n....\r\n\r\nif (process.env.seedDb) {\r\n  loadContacts();\r\n}\r\n....\r\n```\r\n\r\nCheck, using the Mongo Shell or Mongo administration app , that the data has been entered when the server restarts. The following image shows the loaded contacts collection using MongoDB  Compass with MongoDB running on the same local machine:\r\n\r\n![MongoDB Compass](./img/compass.png)\r\n"
    },
  
    {
    "title": "# Update Contacts Routing Package",
    "shortTitle": "04",
    "contentMd" : "# Update Contacts Routing Package\r\nWe need to change ``api/contacts/index.js`` to incorporate Mongoose to connect to MongoDB.\r\n+ Replace  ``/api/contacts/index.js``  with the following code\r\n```javascript\r\n\r\nimport express from 'express';\r\nimport Contact from './contactModel';\r\nimport asyncHandler from 'express-async-handler';\r\n\r\nconst router = express.Router(); // eslint-disable-line\r\n\r\n\r\n// Get all contacts, using try/catch to handle errors\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const contacts = await Contact.find();\r\n    res.status(200).json(contacts);\r\n  } catch (error) {\r\n    handleError(res, error.message);\r\n  }\r\n});\r\n\r\n// Create a contact, using async handler\r\nrouter.post('/', asyncHandler(async (req, res) => {\r\n  const contact = await Contact.create(req.body);\r\n  res.status(201).json(contact);\r\n}));\r\n\r\n// Update a contact\r\nrouter.put('/:id', asyncHandler(async (req, res) => {\r\n  if (req.body._id) delete req.body._id;\r\n  const contact = await Contact.update({\r\n    _id: req.params.id,\r\n  }, req.body, {\r\n    upsert: false,\r\n  });\r\n  if (!contact) return res.sendStatus(404);\r\n  return res.json(200, contact);\r\n}));\r\n\r\n// Delete a contact\r\nrouter.delete('/:id', asyncHandler(async (req, res) => {\r\n  const contact = await Contact.findById(req.params.id);\r\n  if (!contact) return res.send(404);\r\n  await contact.remove();\r\n  return res.status(204).send(contact);\r\n}));\r\n\r\n\r\n/**\r\n * Handle general errors.\r\n * @param {object} res The response object\r\n * @param {object} err The error object.\r\n * @return {object} The response object\r\n */\r\nfunction handleError(res, err) {\r\n  return res.send(500, err);\r\n};\r\n\r\nexport default router;\r\n\r\n```\r\n\r\nWe use the Mongoose schema object to manipulate our contacts collection. Some characteristics to take note of:\r\n\r\n- the code is more concise and simple compared to the *\"error first\"* or *\"errback\"* call back pattern .\r\n- notice the use of a common, generic *\"asyncHandler\"* function. This is used to take care of any rejected promises/exceptions inside of async express routes and passing them to express error handlers.\r\n"
    },
  
    {
    "title": "# Test the app",
    "shortTitle": "05",
    "contentMd" : "# Test the app\r\n\r\nUse Postman to experiment with the API. Check that the following functions work:\r\n\r\n * GET     /contacts              ->  index\r\n * POST    /contacts            ->  create\r\n * PUT     /contacts/:id          ->  update\r\n * DELETE  /contacts/:id          ->  delete\r\n\r\nTry to add a contact with an invalid age. Notice how the app responds using the built in validation provided by Mongoose.\r\n![Age Validation Error](./img/age_validation.png)\r\n### Custom validator\r\n\r\n+ In */api/contacts/contactSchema.js*, add the following custom validator to ensure that the address property's length is greater than 5 characters and less than 50 characters.\r\n\r\n```javascript\r\nContactSchema.path('address').validate((v)=>{\r\n\tif(v.length>50||v.length<5){\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n\r\n});\r\n```\r\n\r\n## Challenge\r\n\r\nUsing the material covered in lectures, update your app to do the following:\r\n\r\n+ Make the *name* and *address* fields required.\r\n+ Validate the format of the email address (hint: write a custom validator that uses regular expressions. Check out this post [stack overflow](http://stackoverflow.com/questions/18022365/mongoose-validate-email-syntax)).\r\n"
    },
  
    {
    "title": "# Hacker News API",
    "shortTitle": "06",
    "contentMd" : "# Hacker News API\r\n\r\n+ Create a new file, ``postsModel.js``, in the */api/posts/* folder and add the following content:\r\n\r\n```javascript\r\nimport mongoose from 'mongoose';\r\nconst Schema = mongoose.Schema;\r\n\r\nconst CommentSchema = new Schema({\r\n  body: {type: String, required: true},\r\n  author: {type: String, required: true},\r\n  upvotes: {type: Number, default: 0},\r\n  });\r\n\r\n const PostSchema = new Schema({\r\n   title: {type: String, required: true},\r\n   link: {type: String, optional: true},\r\n   username: {type: String, required: true},\r\n   comments: [CommentSchema],\r\n   upvotes: {type: Number, min: 0, max: 100, default: 0},\r\n });\r\nexport default mongoose.model('posts', PostSchema);\r\n```\r\nThis file exports the model for hacker news posts. Notice the use of two schemas, CommentSchema and PostSchema, with the former used as the type for the comments in the latter.\r\n+ We want to be able to seed the database with test data during development. Create a new file called *postsData.js* in the root *node-lab3* folder.\r\n\r\n```javascript\r\nimport postModel from './api/posts/postsModel';\r\n\r\nconst posts = [\r\n         {id: 1,\r\n           title: 'India - Tiger population sees 30% increase.',\r\n           link: 'http://www.bbc.com/news/world-asia-30896028',\r\n           username: 'jbloggs',\r\n            comments: [],\r\n            upvotes: 10,\r\n          },\r\n         {\r\n            id: 2,\r\n            title: 'The button that is not.',\r\n            link: 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\r\n            username: 'notme',\r\n            comments: [],\r\n            upvotes: 12,\r\n          },\r\n          {\r\n            id: 3,\r\n            title: 'Google Nears $1B Investment in SpaceX',\r\n            link: null,\r\n            username: 'notme',\r\n            comments: [],\r\n            upvotes: 12,\r\n          },\r\n          {\r\n            id: 4,\r\n            title: 'Coinbase Raises $75M from DFJ Growth, USAA, and More',\r\n            link: 'http://blog.coinbase.com/post/108642362357/coinbase-raises-75m-from-dfj-growth-usaa-nyse',\r\n            username: 'psmith',\r\n            comments: [],\r\n            upvotes: 2,\r\n          },\r\n      ];\r\nexport const loadPosts = () => {\r\npostModel.find({}).remove(function() {\r\n    postModel.collection.insert(posts, (err, docs)=>{\r\n    if (err) {\r\n      console.log(`failed to Load Post Data`);\r\n    } else {\r\n      console.info(`${posts.length} posts were successfully stored.`);\r\n    }\r\n  });\r\n});\r\n};\r\n\r\n```\r\n\r\n+ Open ``index.js`` and include the script.\r\n\r\n```javascript\r\n...\r\nimport {loadPosts} from './postsData';\r\n\r\n...\r\n\r\n// Populate DB with sample data\r\nif (process.env.seedDb) {\r\n  loadContacts();\r\n  loadPosts();\r\n}\r\n...\r\n```\r\n\r\nThe Server should now load the news data to MongoDB.\r\n"
    },
  
    {
    "title": "# Update HackerNews API",
    "shortTitle": "07",
    "contentMd" : "# Update HackerNews API\r\n\r\nThe routing script for the news API needs to by updated to include the Mongoose ``postsModel``.\r\n\r\n+ Replace the code in ``/api/posts/indexjs`` with the following:\r\n\r\n\r\n```javascript\r\nimport express from 'express';\r\nimport Post from './postsModel';\r\nimport asyncHandler from 'express-async-handler';\r\n\r\nconst router = express.Router();// eslint-disable-line\r\n\r\nrouter.get('/', asyncHandler(async (req, res) => {\r\n  const posts = await Post.find();\r\n  return res.send(posts);\r\n}));\r\n\r\n// Add a post\r\nrouter.post('/', asyncHandler(async (req, res) => {\r\n    const newPost = req.body;\r\n    if (newPost) {\r\n          const post = await Post.create(newPost);\r\n          return res.status(201).send({post});\r\n      } else {\r\n         return handleError(res, err);\r\n      }\r\n}));\r\n\r\n// upvote a post\r\nrouter.post('/:id/upvotes', asyncHandler(async (req, res) => {\r\n  const id = req.params.id;\r\n  const post = await Post.findById(id);\r\n  post.upvotes++;\r\n  await post.save();\r\n  return res.status(201).send({post});\r\n}));\r\n\r\n// get post\r\nrouter.get('/:id', asyncHandler(async (req, res) => {\r\n    const id = req.params.id;\r\n    const post = await Post.findById(id);\r\n    return res.send({post});\r\n}));\r\n\r\n\r\n\r\n/**\r\n * Handle general errors.\r\n * @param {object} res The response object\r\n * @param {object} err The error object.\r\n * @return {object} The response object\r\n */\r\nfunction handleError(res, err) {\r\n  return res.status(500).send(err);\r\n};\r\n\r\nexport default router;\r\n```\r\n## Challenge\r\n\r\n+ add the correct route for adding a comment.\r\n+ add the correct route for upvoting a comment.\r\n+ add the correct route for deleting a comment.\r\n+ update the code to return just the first 5 posts, ordered by date added.\r\n"
    }
  
  ]
  }

