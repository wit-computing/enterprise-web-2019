


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "node_lab2",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab uses Express implement APIs for the contact and Hacker News examples.  In this lab you will use routing, parameterise URLs, and parsing Middleware.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "##Node and Express 2",
    "shortTitle": "node_lab2",
    "contentMd" : "##Node and Express 2\n\nThis lab uses Express implement APIs for the contact and Hacker News examples.  In this lab you will use routing, parameterise URLs, and parsing Middleware.\n"
    },
  
    {
    "title": "# Contacts API",
    "shortTitle": "01",
    "contentMd" : "# Contacts API\nWe will enhance the Contacts API from last weeks lab. The following is a suggested API design for Contacts API.\n\n\n# API Design\nWe are going to create an API to manage contact data. The proposed API is as follows:\n\n\n\n![Contacts API](./img/contacts_api.png)\n\n### Set up\n\n+ User the **node-lab1** folder from last weeks lab as the starting point for this lab. If you do not have a solution for last weeks lab, you can get it from the labs folder in the examples repo at https://github.com/fxwalsh/ewd-examples-2019.git.\n\n+ Install the following packages in your lab folder.\n\n> ```script\nnpm install --save body-parser\nnpm install --save lodashgit \n```\nBody-parser is a middleware that express can use to parse json.\n\n+ Update index.js to import and use **body-parser** in it's middleware stack.\n\n> ```javascript\nimport bodyParser from 'body-parser';\n....\n//configure body-parser\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded());\n....\n```\n\n+ Before we go any further, test the contacts API using your Rest client(e.g. Postman). This should be still working the same from last weeks lab.\n![contacts API](./img/contacts_api_1.png)\n\n\n## Add a Contact\n+ Now replace the contents of the contacts routing script, **/api/contacts/index.js**, with the following code.\n\n```javascript\nimport express from 'express';\nimport contacts from './contacts';\n\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.send({ contacts: contacts });\n});\n\nrouter.post('/', (req, res) => {\n\t\tlet newContact = req.body;\n\t\tif (newContact){\n          contacts.push({name: newContact.name, address : newContact.address, phone_number: newContact.phone_number }) ;\n          res.status(201).send({message: \"Contact Created\"});\n      }else{\n      \t  res.status(400).send({message: \"Unable to find Contact in request. No Contact Found in body\"});\n      }\n});\n\nexport default router;\n```\nThe above script adds a HTTP post route that gets a new contact data from the request body (``req.body``) and pushes it onto the contacts list.\n\n- Test with your Rest Client. You will need to supply a JSON representation of the new client in the HTTP request **body** and make sure to select **post** as the HTTP method.\n\n![Add contact (HTTP post)](./img/contacts_post.png)\n\nAll going well, you should see a successfull reponse similar to the following:\n\n![Add contact (HTTP post)](./img/contacts_post_success.png)\n\n## Update a Contact\n\n+ Updating a contact involves replacing a contact with the new data in the HTTP request body. This corresponds to a HTTP PUT request. For now, use the phone number as the unique key to identify contacts. Add the following routing code to the end of **/api/contacts/index.js**.\n\n\n```javascript\n// Update a contact\nrouter.put('/:id', (req, res) => {\n     const key = req.params.id;\n     const updateContact = req.body;\n     const index = contacts.map((contact)=>{\nreturn contact.phone_number;\n}).indexOf(key);\n            if (index !== -1) {\n               contacts.splice(index, 1, {name: updateContact.name, address: updateContact.address,\n               phone_number: updateContact.phone_number});\n               res.status(200).send({message: 'Contact Updated'});\n              } else {\n          res.status(400).send({message: 'Unable to find Contact in request. No Contact Found in body'});\n      }\n});\n```\n\nTest using a Rest client by doing a **HTTP PUT** using\nthe  URL of an existing contact as follows and include a JSON document in the HTTP body to replace it.\n\n > http://localhost:8080/api/contacts/934-4329\n\nUsing Postman, you should see something similar to the following: \n\n![Update Contact (HTTP Put)](./img/put.png)\n\n## Delete a Contact\n\n+ Include the following function and test that the function removes a contact.(e.g. perform a HTTP DELETE on http://localhost:8080/api/contacts/934-4329). You do not need to provide any body data for a delete.\n\n```javascript\n// Delete a contact\nrouter.delete('/:id', (req, res) => {\n     const key = req.params.id;\n     const index = contacts.map((contact)=>{\nreturn contact.phone_number;\n}).indexOf(key);\n    if (index > -1) {\ncontacts.splice(index, 1);\n        res.status(200).send({message: `Deleted contact with phone_number: ${key}.`});\n    } else {\n      res.status(400).send({message: `Unable to find contact with phone_number: ${key}.`});\n      }\n});\n```\n\nCheck by performing a Delete followed by a Get.\n\n## Commit it\n\nCommit the changes you just made to your repo.\n\n```\ngit add --all\ngit commit -m \"added routing for add,update,delete contact\"\n```\n"
    },
  
    {
    "title": "# Hacker News API",
    "shortTitle": "02",
    "contentMd" : "# Hacker News API\n\nNow we will create an API for [Hacker News](https://news.ycombinator.com/). Hacker News is a social news website focusing on computer science and entrepreneurship. In general, content that can be submitted is defined as \"anything that gratifies one's intellectual curiosity\".The following is a suggested API design for Hacker News Posts. \n\nNote that the URL parameters arepreceeded by a colon(\":\")\n\n![Hacker News API](./img/hacker_api.png)\n\n# Set up\n+ Create a new *posts* directory in the *api* directory for the Hacker News  API scripts.\n\n```script\n+api\n  +posts\n```\n\n\n+ In */api/posts*, create two new javascript files, *stubAPI.js* and *index.js*.:\n\n```script\n+api\n   +posts\n      |- stubAPI.js\n      |- index.js\n```\n\n## StubAPI.js\n\n+ The *stubAPI.js* will take the place of the Mongo database for the time being. In *stubAPI.js*, enter the following code:\n\n```javascript\nimport _ from 'lodash';\n\n  const posts = [\n         {id: 1,\n            title: 'India - Tiger population sees 30% increase.',\n            link: 'http://www.bbc.com/news/world-asia-30896028',\n            username: 'jbloggs',\n            comments: [],\n            upvotes: 10,\n          },\n         {\n            id: 2,\n            title: 'The button that is not.',\n            link: 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\n            username: 'notme',\n            comments: [],\n            upvotes: 12,\n          },\n          {\n            id: 3,\n            title: 'Google Nears $1B Investment in SpaceX',\n            link: null,\n            username: 'notme',\n            comments: [],\n            upvotes: 12,\n          },\n          {\n            id: 4,\n            title: 'Coinbase Raises $75M from DFJ Growth, USAA, and More',\n            link: 'http://blog.coinbase.com/post/108642362357/coinbase-raises-75m-from-dfj-growth-usaa-nyse',\n            username: 'psmith',\n            comments: [],\n            upvotes: 2,\n          },\n      ];\n\n\n     const stubAPI = {\n         getAll: () => {\n            return posts;\n          },\n         add: (t, l) => {\n              if (!(t && l)) return false;\n              let id = 1;\n              const last = _.last(posts);\n              if (last) {\n                 id = last.id + 1;\n              }\n              let len = posts.length;\n              let newLen = posts.push({\n                  'id': id,\n                 'title': t, 'link': l, 'username': '', 'comments': [], 'upvotes': 0});\n               return newLen > len?id:-1;\n              },\n         upvote: (id) => {\n             const index = _.findIndex(posts,\n                   (post) => {\n                    return post.id == id;\n                  } );\n             if (index !== -1) {\n                  posts[index].upvotes += 1;\n                  return true;\n                }\n              return false;\n           },\n         getPost: (id) => {\n            let result = null;\n            const index = _.findIndex(posts,\n                   (post) => {\n                    return post.id == id;\n                  } );\n             if (index !== -1) {\n                result = posts[index];\n                    }\n            return result;\n            },\n         addComment: (postId, c, n) => {\n            let result = false;\n            const post = stubAPI.getPost(postId);\n            let id = 1;\n            if (post) {\n            const last = _.last(post.comments);\n            if (last) {\n               id = last.id + 1;\n            }\n            post.comments.push({'id': id,\n                     'comment': c, 'author': n, 'upvotes': 0} );\n            result = true;\n            }\n          return result;\n            },\n         upvoteComment: (postId, commentId) => {\n            let result = false;\n            const post = stubAPI.getPost(postId);\n            if (post) {\n            const index = _.findIndex(post.comments, (c) => {\n                      return c.id == commentId;\n                    });\n             if (index !== -1) {\n                 post.comments[index].upvotes += 1;\n                 result = true;\n                }\n              }\n            return result;\n          },\n      };\n    export default stubAPI;\n```\n\n# Routing\n\n+ We will use the same service to handle hacker news as well as contacts. We will need to add the  a new route in index.js for Hacker News. Add the following statements to the top of index.js to import and use the hacker news routes.\n\n```javascript\nimport postsRouter from './api/posts';\n\n......\n\napp.use('/api/posts', postsRouter);\n```\n\n# Get and Post\n\nGetting and posting posts is very similar to the Contacts API. Add the following to **api/posts/index.js**:\n\n```javascript\nimport express from 'express';\nimport stubAPI from './stubAPI';\n\nconst router = express.Router();\n\n// get all posts\nrouter.get('/', (req, res) => {\n  const posts = stubAPI.getAll();\n  res.send({posts: posts});\n});\n\n\n// Add a post\nrouter.post('/', (req, res) => {\n    const newPost = req.body;\n\n    if (newPost && stubAPI.add(newPost.title, newPost.link)) {\n         return res.status(201).send({message: 'Posts Created'});\n    }\n    return res.status(400).send({message: 'Unable to find Post in request.'});\n});\n\n// get a post\nrouter.get('/:id', (req, res) => {\n    const id = req.params.id;\n    const post = stubAPI.getPost(id);\n\n       if (post) {\n               return res.status(200).send(post);\n              }\n              return res.status(404).send({message: `Unable to find Post ${id}`});\n});\n\nexport default router;\n```\n\n+ Save and test using your Rest client. Make sure any changes using POST are visible using GET on http://locahost:8080/api/posts\n\n## Upvotes and Comments.\n\n+ Add the following route to */api/posts/index.js* to allow for post upvotes:\n\n```javascript\n// upvote a post\nrouter.post('/:id/upvote', (req, res) => {\n     const id = req.params.id;\n            if (stubAPI.upvote(id)) {\n                 return res.status(200).send({message: `Post ${id} Upvoted`});\n            }\n            return res.status(404).send({message: `Unable to find Post ${id}`});\n});\n```\n\nThe function extracts the ``:id`` parameter and uses it to upvote the corresponding post.\nTest using your Rest client, making sure upvotes are recorded correctly.\n\n## Commit it\n\n+ Commit the changes you just made to your repo.\n\n```bash\ngit add --all\ngit commit -m \"added routing for hacker news API\"\n```\n\n## Challenge\n\nExamine and understand the code for adding a post and upvoting a post. Now try to implement adding and upvoting comments.\n\n> ** hint: ** an example comment would be ``{\"comment\":\"this is a great post!\", \"author\":\"fxwalsh\"}``. Refer to the API Design table for the correct parametised routing. The functions you will need from the stubAPI are addComment(postId, comment.comment, comment.author) and upvoteComment(postId, commentId).\n"
    },
  
    {
    "title": "# Hooking up the React App.",
    "shortTitle": "03",
    "contentMd" : "# Hooking up the React App.\nWe will now connect your Hacker News React App to the API. This step requires completion of the React labs.\n\n## System Architecture\n\nWe will keep using the **create-react-app** framework you were using previously. **create-react-app** provides a mechanism for working with an API server in development. We can have the development server proxy requests intended for our API server as follows:\n\n![Development Architecture](./img/architecture.png)\n\nThe React app makes an API request to localhost:3000, the Webpack development server. The development server proxies that request to the API server. This will remove any Cross-Origin-Resource-Sharing (CORS) issues with the browser.\nFor this to work we need to launch both the create-react-app dev server and the API server in order to run the app locally. We also need to get the react dev server to proxy requests to the Express API.\n\n+ Copy the complete hackerNews app from it's current location and put it in the root of your Express API. It should look like this:\n![HackerNews folder](./img/files.png)\n\n+ The proxy functionality requires the version of *react-scripts* to be greater than 0.8.5. Check this is the case by looking at the dependencies list in */hackernews/package.json*.\n\n+ Open a console window in the hackerNews folder and start the react app:\n```\nnpm start\n```\n\nCheck that the app functions as before. If it's not working then check the error messages if any.\n\n## Set up\n\n#### Nodemon filter\nWe want the nodemon process to ignore any changes in the *hackerNews* folder as these will not affect the API. In the **package.json file in the node app root folder (/package.json**, update the scripts property to the following:\n\n```json\n\"scripts\": {\n    \"start\": \"nodemon --ignore hackerNews/* --exec babel-node index.js\"\n  }\n```\n\n#### Proxy Server\nTo have the React development server proxy our API requests to our Express API server, we need to add the following to the **package.json file in the hackerNews folder (/hackerNewes/package.json).**\n\n```json\n...\n\"proxy\":\"http://localhost:8080\",\n...\n```\n\n- **You must restart your React app for the new proxy setting to take affect.** \nThe Webpack server should now forward any request for unknown resources coming into the Webpack server though to your Express app listening on port 8080.\n\n#### JSX Linting\nCheck that your current linter will not recognise JSX syntax. This should be already the case from the previous lab. If not, install the relevant plugin:\n\n- Run ``npm install --save-dev eslint-plugin-react``\n\n- If not already there, add ``\"plugins\": [\"react\"]`` to your .eslintrc config file.\n\nIn your hackerNews folder, create a new ``.eslintrc.json`` file with the following contents:\n\n~~~json\n{\n   \"env\": {\n       \"browser\": true,\n       \"node\": true\n   },\n\n   \"globals\": {\n       \"React\": true\n   },\n\n   \"ecmaFeatures\": {\n       \"jsx\": true\n   },\n\n   \"plugins\": [\n       \"react\"\n   ]\n}\n~~~\n\n#### Axios\n\nWe will need to make http requests to the Express API from the React App. In the **hackerNews** folder, install **axois**.\n\n```\nnpm install --save axios\n```\n\nAxios is a promise-based HTTP client for the browser and node.js. You will use it to make requests to the Express API.\n\n### Start both servers\nYou will need to now start both the react app server and the Express API at the same time. Open two separate command windowsin the hackerNews folder and the parent lab folder. Start the respective servers in both windows:\n\n```\nnpm start\n```\n\nYou should see both processes come to life. As before, they support 'hot code changes' so you should not have to restart the processes as you moake changes.\n\n## Integrate the Express Hacker News API\n\nCurrently the Hacker News app uses a stubAPI to mimic a real API. We need to replace this.\n\n+ create a new script in the *hackerNews/src* folder called **api.js** and enter the following code:\n\n```javascript\nimport axios from 'axios';\n\nexport const upvote = postId => {\n  return axios.post(`/api/posts/${postId}/upvote`)\n              .then(resp => resp.data);\n};\n\nexport const getAll = () => {\n   return axios('/api/posts')\n              .then(resp => resp.data);\n};\n\nexport const getPost = postId => {\n  return axios.get(`/api/posts/${postId}`)\n              .then(resp => resp.data);\n};\n\nexport const add = (newTitle, newLink) => {\n  return axios.post('/api/posts', { title: newTitle, link: newLink })\n              .then(resp => resp.data);\n};\n```\n\nNotice how the routes match what we've implemented in the Express Hacker News API. The proxy property of the package.json provides the host information required to complete the request.\n\n+ In the ``hackerNews/src``, edit ``App.js`` as follows: Replace the  ``import api from './dataStore/stubAPI'`` statement with the following.\n\n```javascript\nimport * as api from './api';\n```\n\n+ We are going to include posts as part of the HackerApp component state. In *App.js*, initialise the ``state`` and add the  ``componentDidMount()`` method to the HackerApp component to initialise the posts from the Express API:\n\n```javascript\nexport default class App extends Component {\n\n    state = {posts: [{}]};\n\n    componentDidMount() {\n        api.getAll().then(resp => {\n            this.setState({\n                posts: resp.posts\n            });\n        }).catch(console.error);\n    };\n\n    ...\n    ...\n```\n\n+ Now replace the ``render`` function of the HackerApp component with the following code. This replaces the previous use of stubAPI with the new posts state retrieved from the api package.\n\n```javascript\n...\n    render() {\n        const posts = _.sortBy(this.state.posts, post =>\n            post.upvotes);\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-9 col-md-offset-1\">\n                        <NewsList posts={posts} \n                        upvoteHandler={this.incrementUpvote} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-9 col-md-offset-1\">\n                        <Form handleAdd={ this.addNewsItem } />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n...\n```\n\nNow have a look at the app in the browser. You should see the list of news items as before. This time, however, they are retrieved from the Express API.\nTry to add a new post. You'll notice nothing happens. Next we will update the addPost() method.\n\n\n### Adding a post\n\n+ Locate the ``addNewsItem()`` function in the App component. Replace it with the following:\n\n```javascript\naddNewsItem = (title, link) => {\n        api.add(title,link)\n        .then(resp => {\n                      const newPost = {\"id\":resp.id,\"title\":title,\"link\":link,\"upvotes\":0, \"comments\":[]};\n                      this.setState({posts: this.state.posts.concat([newPost])});\n        })\n      };\n```\n\nThis function calls the Express API which returns a promise. When the promise is fulfilled, then it pushes the new post onto the posts state property. The HackerApp should react to this state and call the render function again.\n\nCheck the app in the browser again. You should be able add new posts posts to the list.\n\nYou can also check, via the API directly, that the new posts are being created.\n\n### Upvoting a Post\n\nThe upvote will now cause errors if you try to use it at the moment.\nReplace the **incrementUpvote** function in the App compnent with the following:\n\n\n```javascript\nincrementUpvote = (id) => {\n  api.upvote(id).then(resp=> {\n         var upvotedPost = _.find(this.state.posts, post=>post.id == id);\n         upvotedPost.upvotes++;  \n         this.setState({})\n       }) ;\n};\n```\n\n## Challenge\n\nReview your progress so far. Use the same approach to accomplish the following:\n\n+ integrate the API with the comment page.\n+ Update the contactList app to use the API developed in this lab.\n"
    }
  
  ]
  }

