


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "api-testing-ES6",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab shows you how to test a Node API using Mocha, Should, Sinon, and SuperTest.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# API Testing Lab",
    "shortTitle": "api-testing-ES6",
    "contentMd" : "# API Testing Lab\r\n\r\nThis lab shows you how to test a Node API using Mocha, Should, Sinon, and SuperTest.\r\n"
    },
  
    {
    "title": "## Hacker Refactor",
    "shortTitle": "refactor",
    "contentMd" : "## Hacker Refactor\r\n\r\nYou will now refactor the Hacker and Contact API with some improvements. This will then give us a reason to construct some tests\r\n\r\n## Seeding\r\n\r\nWe will consolodate the seeding data into the one module/location and use the *db.js* module to seed the db. This way we can simplify the main *index.js* file of the app.\r\n\r\n+ in the root folder of the Express application, creat a new folder called *seed*\r\n\r\n+ Create a new file called *hackerData.js* with the following content. \r\n\r\n```javascript\r\nimport userModel from '../api/users/userModel';\r\nimport postModel from '../api/posts/postsModel';\r\n\r\nconst posts = [\r\n    {id: 1,\r\n      title: 'India - Tiger population sees 30% increase.',\r\n      link: 'http://www.bbc.com/news/world-asia-30896028',\r\n      user: '',\r\n       comments: [],\r\n       upvotes: 10,\r\n     },\r\n    {\r\n       id: 2,\r\n       title: 'The button that is not.',\r\n       link: 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\r\n       user: '',\r\n       comments: [],\r\n       upvotes: 12,\r\n     },\r\n     {\r\n       id: 3,\r\n       title: 'Google Nears $1B Investment in SpaceX',\r\n       link: null,\r\n       user: '',\r\n       comments: [],\r\n       upvotes: 12,\r\n     },\r\n     {\r\n       id: 4,\r\n       title: 'Coinbase Raises $75M from DFJ Growth, USAA, and More',\r\n       link: 'http://blog.coinbase.com/post/108642362357/coinbase-raises-75m-from-dfj-growth-usaa-nyse',\r\n       user: '',\r\n       comments: [],\r\n       upvotes: 2,\r\n     },\r\n ];\r\n\r\nconst users = [{\r\n        'username': 'user1',\r\n        'password': 'test1',\r\n    },\r\n    {\r\n        'username': 'user2',\r\n        'password': 'test2',\r\n    },\r\n];\r\n\r\nexport default async function loadHackerData() {\r\n\r\n    try {\r\n        await userModel.deleteMany();\r\n        //Save user data to db\r\n        const user1 = await new userModel(users[0]).save();\r\n        const user2 = await new userModel(users[1]).save();\r\n\r\n        //assign users randomly to each post\r\n        posts.forEach((post)=>{post.user = ((Math.random<0.5)?user1._id : user2._id)});\r\n\r\n\r\n        //Load posts data\r\n        await postModel.deleteMany();\r\n        await postModel.collection.insertMany(posts);\r\n        console.info(`${posts.length} posts were successfully stored.`);\r\n\r\n        console.info(`${users.length} users were successfully stored.`);\r\n    } catch (err) {\r\n        console.error(`failed to Load user Data: ${err}`);\r\n    }\r\n}\r\n```\r\n\r\n+ Move the contactsData.js into the new *seed* folder\r\n\r\n+ Create a new file called ``index.js`` in the *seed* folder with the following content:\r\n\r\n```javascript\r\nimport loadContacts from './contactsData';\r\nimport loadHackerData from './hackerData';\r\n\r\nexport default () => {\r\n    loadContacts();\r\n    loadHackerData();\r\n};\r\n```\r\n\r\n+ Delete postsData.js and UserData.js from the root folder.\r\n\r\n+ Locate and **delete** the following from the code in ``index.js``  in the root folder of the Express app.\r\n\r\n```javascript\r\nif (process.env.seedDb) {\r\n  loadContacts();\r\n  loadPosts();\r\n  loadUsers();\r\n}\r\n```\r\n\r\n+ Finally, update the *db.js* file as follows to import the seed module and call it once the DB is loaded.\r\n\r\n```javascript\r\nimport seed from './seed';\r\n\r\n...\r\n\r\ndb.once('open', () => {\r\n    console.log(`database connected to ${db.name} on ${db.host}`);\r\n    seed();\r\n});\r\n```\r\n\r\nRemove all references to *userData.js, contactsData.js, postData.js* in the import dataements of the index.js.\r\n\r\n* Open /api/posts/index.js and update the GET /:id route to populate the user path:\r\n\r\n~~~javascript\r\n// get post\r\nrouter.get('/:id', asyncHandler(async (req, res) => {\r\n    const id = req.params.id;\r\n    const post = await Post.findById(id).populate('user');\r\n    return res.send({post});\r\n}));\r\n~~~\r\n\r\n\r\nWe can now create some unit and integration tests for the API."
    },
  
    {
    "title": "# Set up",
    "shortTitle": "set-up",
    "contentMd" : "# Set up\r\n\r\n+ You need a working version of the Contacts api for this lab. The solution to the last lab you completed will suffice. Otherwise, you can get the solution from the  [Github examples repo](https://github.com/fxwalsh/ewd-examples-2019.git).\r\n\r\n### Install dependencies\r\n\r\nAll the following are development dependencies because you will just use them for testing. As such, use the ``--save-dev`` option for npm installation.\r\n\r\n+ You need **Mocha, Should and SuperTest**. Install as development dependencies into your new lab folder as follows.\r\n```\r\nnpm install --save-dev mocha\r\nnpm install --save-dev should\r\nnpm install --save-dev sinon sinon-test\r\nnpm install --save-dev supertest\r\n```\r\n\r\n+ You need **babel-core** and **babel-polyfill**. As we are writing code using ES6, we need to be able to transpile our unit tests using Babel. We can use the existing Babel configuration  for the lab but we need to add *babel-core* and *babel-polyfill*. Install both as a dev dependency.\r\n\r\n```bash\r\nnpm install --save-dev babel-core\r\nnpm install --save-dev babel-polyfill\r\n```\r\n\r\n+ You need **Cross-Env**. ``NODE_ENV`` is an environment variable. ``NODE_ENV`` value is set to ‘test’ when we run our tests. We will also need to revert to 'development' when we're updating the code. Setting environment variables differs across Operating Systems/platforms. We also want to be able to set the value from a scipt. *Cross-Env* is an NPM package which uses a single command to set environment variables without worrying about the platform. Install *Cross-Env* as a development dependency:\r\n\r\n```bash\r\nnpm install save-dev cross-env\r\n```\r\n\r\n### Create your first integration test\r\n\r\n+ To enable us to test the app, we need to export the app object from *index.js* in the base folder of the project. Modify the *index.js* as follows:\r\n\r\n```javascript\r\n...\r\nexport const app = express(); //replaces the previous const app = express();\r\n...\r\n```\r\n\r\n+ Create  new folder called *test* in the root folder of the lab. Create a new file called ``/test/testContactsApi.js`` with the following content.\r\n\r\n```javascript\r\nimport supertest from 'supertest';\r\nimport {app} from './../index.js';\r\nimport should from 'should';\r\n\r\n// UNIT test begin\r\ndescribe('Contacts API test', function () {\r\n    this.timeout(120000);\r\n    // test #1: return a collection of json documents\r\n    it('should return collection of JSON documents', function (done) {\r\n        // calling home page api\r\n        supertest(app)\r\n            .get('/api/contacts')\r\n            .expect('Content-type', /json/)\r\n            .expect(200) // This is the HTTP response\r\n            .then(res => {\r\n                // HTTP status should be 200\r\n                res.should.have.property('status').equal(200);\r\n                done();\r\n            });\r\n    });\r\n});\r\n```\r\n\r\n## Update package.json\r\n\r\n+ Replace the *scripts* entry in the *package.json* file with the following.\r\n```json\r\n\r\n\"scripts\": {\r\n   \"start\": \"cross-env NODE_ENV=development nodemon --ignore hackerNews/* --exec babel-node index.js\",\r\n   \"test\": \"cross-env NODE_ENV=test mocha --require babel-core/register --require babel-polyfill --reporter mochawesome --exit\",\r\n   \"pretest\": \"eslint *.js ./api/contacts/*.js ./test/*.js\"\r\n }\r\n```\r\n\r\nThe above script entry for test will set ``NODE_ENV`` to test and then run mocha against the files matching the pattern provided (i.e. by default it'll pick up the test in the test folder). You also need to update the start script to set ``NODE_ENV`` to 'development' before starting the server.\r\n> **The pretest script is optional**. If you are linting, it might be a good idea to include a \"full lint\" before each test. When you run the test script, the pretest will be run automatically. \r\nAlso, to ignore any linting errors rlating to undeclared mocha functions like describe, create a new file called *.eslintrc* in the test folder and add the following content:\r\n\r\n~~~json\r\n{\r\n    \"env\": {\r\n        \"mocha\": true\r\n    },\r\n    \"rules\": {\r\n       \"no-unused-vars\":\"off\"\r\n    }\r\n}\r\n~~~\r\n\r\n+ Now test by running the test script:\r\n\r\n```bash\r\nnpm run test\r\n```\r\n\r\nThe first time you run it you will probably get a few errors and warnings similar to what's shown in the following diagram:\r\n\r\n![PreTest Linting Failures](./img/error1.png)\r\n\r\nFix the errors/warnings listed and you should see something similar to the following:\r\n\r\n![First Successful Mocha Test](./img/main.png)\r\n\r\n## Include Mockgoose\r\n\r\nThe current test is an integration test as it requires a real, functioning database. If we want our tests to just apply to the service interface then we should remove the dependency on the database. \r\n\r\n**Mockgoose** will allow us to test the code in isolation from MongoDB.\r\n\r\n+ Install Mockgoose as a development dependency:\r\n\r\n```\r\nnpm install --save-dev mockgoose\r\n```\r\n\r\nIn our current solution, we connect to the database by importing the *db.js* module. Update the *db.js* module to use Mockgoose for testing as follows:\r\n\r\n+ In *db.js*, Import the Mockgoose package\r\n\r\n~~~javascript\r\nimport {Mockgoose} from 'mockgoose';\r\n...\r\n~~~\r\n\r\n+ In *db.js*, replace the ``mongoose.connect(process.env.mongoDB);`` statement with the following code:\r\n\r\n ~~~ javascript\r\n ...\r\n// Connect to database\r\nif (process.env.NODE_ENV === 'test') {\r\n    // use mockgoose for testing\r\n    const mockgoose=new Mockgoose(mongoose);\r\n    mockgoose.prepareStorage().then(()=>{\r\n      mongoose.connect(process.env.mongoDB);\r\n    });\r\n  } else {\r\n    // use the real deal for everything else\r\n    mongoose.connect(process.env.mongoDB);\r\n  }\r\n...\r\n~~~\r\n\r\nThis code will wrap the existing Mongoose object with Mockgoose only if the ``NODE_ENV`` environment variable is set to test (i.e. we're running test cases).\r\n\r\n+ Now test again by running the test script:\r\n\r\n```bash\r\nnpm run test\r\n```\r\n\r\nThis time the first test run  will take longer as Mockgoose will create a local Mongodb in memory for the test. Subsequent tests will be faster though.\r\n![First Mocha Test](./img/main.png)\r\n"
    },
  
    {
    "title": "# Testing the Contacts API",
    "shortTitle": "integration-test",
    "contentMd" : "# Testing the Contacts API\r\n\r\nNow lets try to test the add contact function of the API.\r\n\r\n+ Add another unit test to the last test. This time we'll use SuperTest to post a new contact and test for the correct status:\r\n```javascript\r\n// test #2 add a contact\r\n    it('should add a contact', function (done) {\r\n        // post to /api/contacts\r\n        supertest(app)\r\n            .post('/api/contacts')\r\n            .send({\r\n                name: 'Contact 99',\r\n                address: '123 Strand St',\r\n                age:23\r\n            })\r\n            .expect('Content-type', /json/)\r\n            .expect(201)\r\n            .then ((res) => {\r\n                res.status.should.equal(201);\r\n                res.body.should.have.property('_id');\r\n                res.body.name.should.equal('Contact 99');\r\n                done();\r\n            });\r\n    });\r\n```\r\n\r\nNow run the test again ``npm run test``. You should see something similar to the following:\r\n![Add a contact test](./img/add_contact.png)\r\n\r\n## Delete a Contact\r\n\r\nFor this test, you will delete the first contact in the list returned from the API:\r\n\r\n+ Enter the following code:\r\n```javascript\r\n // #3 delete a contact\r\n    it('should delete a contact', () => {\r\n      return  supertest(app)\r\n            .get('/api/contacts')\r\n            .expect('Content-type', /json/)\r\n            .expect(200).then( (res) => {\r\n               const id=res.body[0]._id;\r\n               return supertest(app).delete(`/api/contacts/${id}`).expect(204); \r\n            }).then( (res) => {\r\n                res.status.should.equal(204);  \r\n            });\r\n    });\r\n```\r\n\r\n## Challenge\r\nDevelop a test for the following route in the Contacts API\r\n> PUT /api/contacts/[:id]\r\n\r\nUse the notes and online resources for support.\r\n"
    },
  
    {
    "title": "# Unit testing the Mongoose Models",
    "shortTitle": "unit-testing",
    "contentMd" : "# Unit testing the Mongoose Models\r\n\r\nIdeally, for unit testing, you would like to test without having to connect to a database. Unit-testing is where we test one single unit at a time in isolation from other functionalities. A DB connection would make the tests slow, difficult to set up, and really would become a form of integration testing because we would be testing database integration code as part of the test.\r\n\r\nTo unit test our models for Hacker News (postModel, commentModel, and userModel) we will use **Mocha.js** test framework. We will use **should.js** as the assertion mechanism to write the tests and finally **signon.js** to spy on and check correct function calls\r\n\r\n\r\n## postsModel\r\n\r\n+ create test folder in */api/posts/*\r\n\r\n+ Create a new .eslintrc file in /api/posts/tests with the following content:\r\n\r\n~~~json\r\n{\r\n    \"env\": {\r\n        \"mocha\": true\r\n    },\r\n    \"rules\": {\r\n       \"no-unused-vars\":\"off\"\r\n    }\r\n}\r\n~~~\r\n\r\n+ In */api/posts/tests* create a file called *testPostsSchema.js* and add the following code:\r\n\r\n~~~javascript\r\nimport should from 'should';\r\nimport postsModel from '../postsModel';\r\nimport mongoose from 'mongoose';\r\nconst Schema = mongoose.Schema;\r\n\r\ndescribe('postModelTests', () => {\r\n\r\n it('should validate a post with a user and title', (done) => {\r\n        const post={user: \"5ca22a64816cd8423c27214d\", title: \"A title\"};\r\n        const m = new postsModel(post);\r\n        m.validate((err) => {\r\n           should.not.exist(err);\r\n           m.title.should.equal(\"A title\");\r\n           m.user.toString().should.equal(\"5ca22a64816cd8423c27214d\");\r\n           done();\r\n        });\r\n    });\r\n});\r\n~~~\r\n\r\n+ In the root folder of the Express app, open *package.json* and, in the ``scripts`` property, add a new entry to run the mocha using the tests defined in the */api/* folders:\r\n\r\n~~~json\r\n...\r\n \"scripts\": {\r\n    \"start\": \"nodemon --ignore hackerNews/* --exec babel-node index.js\",\r\n    \"unit-test\": \"cross-env NODE_ENV=test mocha './api/**/tests/*.js --require babel-core/register --require babel-polyfill --exit\",\r\n    ...\r\n  }\r\n...\r\n~~~\r\n\r\n+ Open a command line at the root of the Exprss node app and  run the test by entering ``npm run unit-test``. You should see output similar to the following:\r\n\r\n   ![Unit Test - postModel](./img/unit1.png)\r\n\r\n+ Now add the following to check post and comments validation\r\n\r\n~~~javascript\r\n it('should require a user and title', (done) => {\r\n\r\n        const post={message: \"This is not valid\"};\r\n        const m = new postsModel(post);\r\n        m.validate((err) => {\r\n           const errors = err.errors;\r\n           errors.should.have.property(\"user\");\r\n           errors.should.have.property(\"title\");\r\n           done();\r\n        });\r\n    });\r\n\r\n  \r\n\r\n    it('should add a comment to a post', function(done) {\r\n        const post={user: \"5ca22a64816cd8423c27214d\", title: \"A title\"};\r\n        const m = new postsModel(post);\r\n        m.comments.push({body:\"a comment body\",user:\"5ca22a64816cd8423c27214c\"});\r\n        m.validate((err) => {\r\n           should.not.exist(err);\r\n           m.comments[0].body.should.equal(\"a comment body\");\r\n           m.comments[0].user.toString().should.equal(\"5ca22a64816cd8423c27214c\");\r\n           done();\r\n        });\r\n    });\r\n\r\n    it('should require a user and body for a comment to a post', function(done) {\r\n        const post={user: \"5ca22a64816cd8423c27214d\", title: \"A title\"};\r\n        const m = new postsModel(post);\r\n        m.comments.push({acomment:\"this is not a valid comment\"});\r\n        m.validate((err) => {\r\n           should.exist(err);\r\n           const errors = err.errors;\r\n           errors.should.have.property(\"comments.0.user\");\r\n           errors.should.have.property(\"comments.0.body\");\r\n           done();\r\n        });\r\n    });\r\n\r\n~~~\r\n\r\n+ Run the test script again, you should now see a few more test results:\r\n\r\n  ![More Unit Tests - postModel](./img/unit2.png)"
    },
  
    {
    "title": "# Unit Testing - User Model",
    "shortTitle": "unit-testing-stubbing",
    "contentMd" : "# Unit Testing - User Model\r\n\r\nIn the last lab we used instance and static methods in Mongoose. We would like to write some tests for there however, some instance methods access the database and, ideally, we'd like to absent db useage in our unit tests. This is a bit more challenging but we can use **sinon.js** to check that we are calling the instance methods correctly. \r\n\r\n+ As before, create a *tests* folder in */api/users*.\r\n+ In */api/users/tests*, create  file called *testUserSchema.js* and add the following simple tests:\r\n\r\n~~~javascript\r\nimport should from 'should';\r\nimport userModel from '../userModel';\r\n\r\ndescribe('userModelTests', () => {\r\n    it('should require a username and password', (done) => {\r\n\r\n        const user={auser: \"This is not valid\"};\r\n        const m = new userModel(user);\r\n        m.validate((err) => {\r\n           should.exist(err);\r\n           const errors = err.errors;\r\n           errors.should.have.property(\"username\");\r\n           errors.should.have.property(\"password\");\r\n           done();\r\n        });\r\n    });\r\n\r\n    it('should validate a user with a username and password', (done) => {   \r\n        const username=\"fxwalsh\";\r\n        const password=\"pass\";\r\n\r\n        const user={username: username, password: password};\r\n        const m = new userModel(user);\r\n        m.validate((err) => {\r\n           should.not.exist(err);\r\n           m.username.should.equal(username);\r\n           m.password.should.equal(password);\r\n           done();\r\n        });\r\n    });\r\n});\r\n~~~\r\n\r\n+ Run the tests as before and make sure they pass(the other Posts Model tests will run also)...\r\n\r\n![unit Tests - User Model](./img/unit3.png)\r\n\r\n## Testing User Schema Static Methods - findByUserName\r\n\r\n+ Add the following to the import section of testUserModel\r\n\r\n~~~javascript\r\nimport sinon from 'sinon';\r\nimport sinonTestFactory from 'sinon-test';\r\n~~~\r\n\r\n+ Now, in the same file, add the following test:\r\n\r\n~~~javascript\r\n    it('should search using username', sinonTest(function() {\r\n        this.stub(userModel, 'findOne');\r\n        const username=\"fxwalsh\";\r\n        userModel.findByUserName(username);\r\n        sinon.assert.calledWith(userModel.findOne, {\r\n            username: username\r\n        });\r\n    }));\r\n~~~\r\n\r\nWe start by stubbing ``userModel.findOne``. We \"stub it out\" so it doesn’t do any database access. Stubbing it also allows us to use **Sinon.js** to check whether it was called with the correct parameters.\r\n\r\nWe then  call ``userModel.findByUserName(username)`` and use ``sinon.assert.calledWith...`` to check the stubbed ``findOne`` was called correctly.\r\n\r\n## Testing Use Schema instance Methods - comparePasswords\r\n\r\nAs this method does not directly \"go at\" the database, it can be checked without stubbing.\r\n\r\n+ Insert the following test into the same file as above,  *testUserSchema.js*.\r\n\r\n~~~javascript\r\n    it('should detect matching passwords', sinonTest(function (done) {\r\n\r\n        const username = \"fxwalsh\";\r\n        const password = \"$2a$10$hxklBTD1KLdYOCrulbtf8OKxjxFEc5WBCODCCCYGb67udslRc0mHi\";\r\n\r\n        const user1 = {\r\n            username: username,\r\n            password: password\r\n        };\r\n\r\n        const user2 = {\r\n            username: username,\r\n            password: password\r\n        };\r\n\r\n        const m1 = new userModel(user1);\r\n        const m2 = new userModel(user2);\r\n\r\n        m1.comparePassword(m2.password, (err, result) => {\r\n                should.not.exist(err);\r\n                result.should.be.true;\r\n                done();\r\n            }\r\n\r\n\r\n        )\r\n    }));\r\n~~~\r\n\r\nThe above test creates 2 users with the same password. The ``comparePassword`` method is called and resulting callback validated the correct response(no ``err`` object and ``result==true``).\r\n\r\n\r\n"
    },
  
    {
    "title": "# Report Generation",
    "shortTitle": "Reporting",
    "contentMd" : "# Report Generation\r\n\r\nAt the moment, the tests report back to the console. You'll now use **Mochawesome** to generate a unit test report that visualises the test results.\r\n\r\n+ Install Mochawesome to you dev dependencies.\r\n```\r\nnpm install --save-dev mochawesome\r\n```\r\n\r\n+ To output the results, update your test script in *package.json* to include mochawsome as the reporter:\r\n```javascript\r\n\"test\": \"cross-env NODE_ENV=test mocha --require babel-core/register --require babel-polyfill --reporter mochawesome\"\r\n```\r\n\r\n+ Now run the tests again. Mochawesome will generate reports in the **/mochawesome-reports/** folder in your project\r\n![Mockawesome report](./img/mock.png)\r\n"
    }
  
  ]
  }

