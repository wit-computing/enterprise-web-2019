


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab_Static_React_Apps",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Over the coming weeks we will build three React apps in parallel. A static version of each is the target of this lab.</p>",
  "folder" : "book-2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Building React SPAs (Static).",
    "shortTitle": "Lab_Static_React_Apps",
    "contentMd" : "# Building React SPAs (Static).\r\n \r\nOver the coming weeks we will build three React apps in parallel. A static version of each is the target of this lab."
    },
  
    {
    "title": "## Startup.",
    "shortTitle": "Startup",
    "contentMd" : "## Startup.\r\n\r\nThe three apps being developed over the coming weeks are:\r\n\r\n+ Contact list\r\n+ Phone Catalogue and \r\n+ Hacker News. \r\n\r\nThis lab is focused on step one of the *Thinking in React* process - the development process recommended by the React design team (discussed in a later lectures). This step is titled `Build a static version` of the app. In subsequent labs we will add user interaction and routing.\r\n\r\nDownload [this zip][start] as the starting point and and unzip it. It contains three skeletons apps, one for each of the above mentioned use case. The apps were generated with the `create-react-app` tool. We will use Git to keep a log of the work done in the labs over the coming weeks.\r\n\r\n[start]: ./archives/start.zip"
    },
  
    {
    "title": "## Contact List App.",
    "shortTitle": "Contact_List",
    "contentMd" : "## Contact List App.\r\n\r\n### Setup.\r\n\r\nIn the terminal window, go to `threeApps/contactlist` and install the required packages:\r\n\r\n        $ npm install\r\n\r\nStart the development server:\r\n\r\n        $ npm start\r\n\r\n### UI Design.\r\n\r\nThe desired UI for this app looks as follows:\r\n\r\n![][contactsUI]\r\n\r\nThe proposed component breakdown for the UI is:\r\n\r\n![][contactsDesign]\r\n\r\nSo the set of components are:\r\n\r\n1. Header\r\n1. Add contact mini form\r\n1. List of contacts\r\n1. A contact \r\n\r\nThis breakdown maps to the following component hierarchy:\r\n\r\n                       App (Default)\r\n                        |\r\n          -----------------------------\r\n          |             |             |\r\n         Header    ContactForm    ContactList\r\n                                      |\r\n                                   Contact\r\n\r\n\r\n### Implementation.\r\n\r\nIn `contactlist/src/index.js` add the following import at the top:\r\n\r\n      import '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\r\nCreate the file `contactlist/src/components/header.js` (you need to create the `components` folder manually) and add the following content:\r\n\r\n    import React , { Component } from 'react';\r\n\r\n    class Header extends Component {\r\n      render() {\r\n        return (\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3 offset-md-3\" >\r\n                <div className=\"page-header\">\r\n                  <h2>Contact List <span className=\"badge\"> {50}</span>\r\n                 </h2>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        ) ;\r\n      }\r\n    }\r\n\r\n    export default Header;\r\n\r\nIn `contactlist/src/App.js` replace the entire content with the following:\r\n\r\n    import React , { Component } from 'react';\r\n    import './App.css';\r\n    import Header from './components/header' \r\n\r\n    class App extends Component {\r\n        render() {\r\n          return (\r\n            <div className=\"jumbotron\">\r\n                <Header />\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      export default App;\r\n\r\nAssuming the development server is still running (npm start), the browser should now look as follows:\r\n\r\n![][header]\r\n\r\nCreate the file `contactlist/src/components/contactForm.js` and add the following content:\r\n\r\n    import React , { Component } from 'react';\r\n\r\n     class ContactForm extends Component {\r\n        render() {\r\n          return (\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row\">\r\n                 <div className=\"col-sm-2\" >\r\n                  <button type=\"button\" className=\"btn btn-success\">Add Contact</button>\r\n                </div>              \r\n                <div className=\"col-sm-3\" >\r\n                  <input type=\"text\" className=\"form-control\" defaultValue=\"Enter name\"/>\r\n                </div>\r\n                <div className=\"col-sm-3\" >\r\n                  <input type=\"text\" className=\"form-control\" defaultValue=\"Enter address\"/>\r\n                </div>\r\n                <div className=\"col-sm-2\" >\r\n                   <input type=\"text\" className=\"form-control\" defaultValue=\"Enter telephone\"/>\r\n                </div>                             \r\n               </div>\r\n            </div>\r\n            );\r\n        }\r\n      }\r\n\r\n      export default ContactForm;\r\n\r\nWire this component in to the app by modifying `src/App.js` as shown below:\r\n\r\n    . . . . imports . . . . . \r\n    import ContactForm from './components/contactForm' \r\n\r\n    class App extends Component {\r\n        render() {\r\n          return (\r\n            <div className=\"jumbotron\">\r\n                <Header />\r\n                <ContactForm  />\b\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      export default App;\r\n\r\nNow the browser renders the app as follows:\r\n\r\n![][handf]\r\n\r\nCreate the file `src/components/contact.js` and add the following content:\r\n\r\n      import React , { Component } from 'react';\r\n\r\n      class Contact extends Component {\r\n        render() {\r\n          return (\r\n              <div className=\"col-sm-3\" >\r\n                <div className=\"panel panel-primary\">\r\n                  <div className=\"panel-heading\">\r\n                      { this.props.contact.name }\r\n                  </div>\r\n                  <div className=\"panel-body\"> \r\n                    <p>{ this.props.contact.name }</p>\r\n                      <p>{ this.props.contact.address }</p>\r\n                      <p>{ this.props.contact.phone_number }</p>              \r\n                  </div>\r\n                  <div className=\"panel-footer\"> \r\n                    <div className=\"btn-group btn-group-justified\" role=\"group\" aria-label=\"...\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                          <button type=\"button\" className=\"btn btn-default\">Edit</button>\r\n                        </div>\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                          <button type=\"button\" className=\"btn btn-danger\">Delete</button>\r\n                        </div>\r\n                    </div>                     \r\n                  </div>          \r\n                </div>\r\n              </div>\r\n              ) ;\r\n          }\r\n      }\r\n\r\n      export default Contact;\r\n\r\nNotice, the component expects a data prop to be passed in, e.g. this.props.contact.name, this.props.contact.address. To see how this component renders, make the following temporary adjustment to `src/App.js`:\r\n\r\n     . . . . imports . . . . .\r\n    import Contact from './components/contact' \r\n\r\n    class App extends Component {\r\n        render() {\r\n          return (\r\n            <div className=\"jumbotron\">\r\n                <Header />\r\n                <ContactForm  />\b\r\n                <Contact contact={{name: 'Joe Bloggs', \r\n                    address: '1 High Street',\r\n                    phone_number: '055-12345678'}}  />\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      export default App;\r\n\r\nNow the browser renders the app as follows:\r\n\r\n![][handfandc]\r\n\r\nLets add some dummy data to facilitate rendering many contacts on the web page. In `src/App.js` add the following array definition:\r\n\r\n     . . . . imports . . . . \r\n\r\n     let contacts = [\r\n        {\r\n            \"name\": \"Contact 1\",\r\n            \"address\": \"123 Test St\",\r\n            \"phone_number\": \"132-3212\"\r\n        },       \r\n        {\r\n            \"name\": \"Contact 2\",\r\n            \"address\": \"23 Main St\",\r\n            \"phone_number\": \"934-4329\"\r\n        },        \r\n        {\r\n            \"name\": \"Contact 3\",\r\n            \"address\": \"4 Lower St\",\r\n            \"phone_number\": \"432-5832\"\r\n        },\t        \r\n        {\r\n            \"name\": \"Contact 4\",\r\n            \"address\": \"49 Upper Street\",\r\n            \"phone_number\": \"934-4290\"\r\n        },\r\n        {\r\n            \"name\": \"Contact 5\",\r\n            \"address\": \"4 High Street\",\r\n            \"phone_number\": \"933-4110\"\r\n        }\t\t        \r\n      ] ;    \r\n\r\n      class App extends Component {\r\n         . . . . . as before  . . .\r\n\r\nWe need a component that renders a list of Contacts from the above array. Create `src/components/contactList.js` and add the following code:\r\n\r\n    import React , { Component } from 'react';\r\n    import Contact from './contact' \r\n\r\n    export default class ContactList extends Component {\r\n      render() {\r\n        let contactPanels = this.props.contacts.map(\r\n              (c) => <Contact key={c.phone_number} contact={c} />\r\n        );\r\n        return (\r\n          <div className=\"container-fluid contacts\">\r\n            <div className=\"row\">\r\n                {contactPanels}  \r\n            </div>\r\n            </div>\r\n          ) ;\r\n       }\r\n    } \r\n\r\nThis component expects a prop containing an array of contact objects. In `src/App.js`, replace the single contact rendering code with the list component, as follows:\r\n\r\n    . . . . . other imports . . . .\r\n    import ContactList from './components/contactList' ;\r\n    // Remove the 'import Contact ....' line\r\n\r\n    . . . . contacts array as before . . . . \r\n\r\n    class App extends Component {\r\n        render() {\r\n          return (\r\n            <div className=\"jumbotron\">\r\n                <Header />\r\n                <ContactForm  />\b\r\n                <ContactList contacts={contacts} />\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      export default App;\r\n\r\nThe browser should now be rendering all the contacts in the array. \r\n\r\nA tiny bit of custom CSS is required. Replace the __entire content__ of `src/App.css` with the following:\r\n\r\n    .contacts {\r\n      margin-top: 10px;\r\n    }\r\n\r\nTheir is one small bug in the output rendered. The badge in the header should show the number of contacts being displayed (and dynamically update as contacts are added/deleted - later lab). In other words we want the badge value to reflect the 'current' length of the contacts array. __You are required__ to modify the code to achieve this (Hint: Think props). The result should look as follows:\r\n\r\n![][contactsUI]\r\n\r\nOn completion, in the terminal window, from the  `threeApps/contactlist` folder, type the following commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Static version completed\"\r\n\r\n[contactsUI]: ./img/Contacts.png\r\n[header]: ./img/header.png\r\n[handf]: ./img/handf.png\r\n[handfandc]: ./img/handfandc.png\r\n[contactsDesign]: ./img/ContactsDesign.png\r\n[partial]: ./img/partial.png\r\n"
    },
  
    {
    "title": "## Phone Catalogue App.",
    "shortTitle": "Phone_Catalogue",
    "contentMd" : "## Phone Catalogue App.\r\n\r\n### Setup.\r\n\r\nIn the terminal window, go to `threeApps/phoneCatalogue` folder and install the required packages:\r\n\r\n        $ npm install\r\n\t\t\t\t\r\n### UI Design.\r\n\r\nThe desired UI for this app will look as follows:\r\n\r\n![][phonesUI]\r\n\r\nA component breakdown for this UI is as follows:\r\n\r\n![][phonesDesign]\r\n\r\nThis leads to a component hierarchy of the following:\r\n\r\n                    App (Default)\r\n                     | \r\n              -----------------\r\n              |               |\r\n       SelectControls     PhoneList\r\n                              |\r\n                           Phone\r\n\r\nRemember, we are only developing a static version of the app in this lab - no user interaction works, yet. Ultimately the search text input will cause the app to compute a filtered list of matching phones, based on phone name. For now all phones in the catalogue will be displayed.\r\n\r\n### Additional setup.\r\n\r\nThis app requires a sample data set. Unzip [this archive][data] and place  `Data.js` in the `src/` folder. This is the app's sample data set. Each phone object in the set has an image URL property. These image files (and related specification files to be used in a later lab) are available in [this zip][images]. Unzip it and move the `phoneSpecs` folder into `phoneCatalogue/public`, to give the following structure:\r\n\r\n          phoneCatalogue\r\n           |\r\n           |---public\r\n                |\r\n                |----phoneSpecs\r\n                      |\r\n                      |--- etc\r\n\r\nWe will use Storybook in this app's component development. For your convenience, the necessary source files have been added to the project - see the `.storybook` and `stories` folders.\r\n\r\nIt is good practice to organize the `src/components` folder so that each component has its own sub-folder. Create the following file structure:\r\n\r\n![][files]\r\n\r\nThe added advantage is each component's CSS is easily identified.\r\n\r\n### Implementation.\r\n\r\nThe *SelectControls* component is the easiest. In `src/components/selectControls/index.js` place the following code:\r\n\r\n\timport React, { Component } from 'react';\r\n\r\n\texport default class SelectControls extends Component {\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t\t<div className=\"col-md-10\">\r\n\t\t\t\t\t\t\t<input type=\"text\" placeholder=\"Search\" />\r\n\t\t\t\t\t\t\t<span> Sort by: </span>\r\n\t\t\t\t\t\t\t<select id=\"sort\" >\r\n\t\t\t\t\t\t\t\t\t<option value=\"name\">Alphabetical</option>\r\n\t\t\t\t\t\t\t\t\t<option value=\"age\">Newest</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nIn `stories/phoneApp.js` replace the code with this:\r\n\r\n\timport React from 'react';\r\n\timport { storiesOf } from '@storybook/react';\r\n\timport '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\timport SelectControls from '../src/components/selectControls';\r\n\r\n\tstoriesOf('Phone Catalogue', module)\r\n\t\t\t.add('Select controls', \r\n\t\t\t\t() =>  <SelectControls /> \r\n\t\t\t)\r\n\t\r\nStart the Storybook server:\r\n\r\n     $ npx start-storybook -p 9001 -c .storybook\r\n\r\nand open the interface in the browser: http://localhost:9001/\r\n\r\n![][story1]\r\n\r\nMoving on to the Phone component. In `src/components/phone/index.js` place the following code:\r\n\r\n\timport React, { Component } from 'react';\r\n\timport './phone.css';\r\n\r\n\texport default class Phone extends Component {\r\n\t\trender() {\r\n\t\t\t\tlet url = 'phoneSpecs/' + this.props.phone.imageUrl;\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li className=\"thumbnail phone_item\">\r\n\t\t\t\t\t\t<a href={'/phones/' + this.props.phone.id} className=\"thumb\" >\r\n\t\t\t\t\t\t\t\t<img src={url} alt={this.props.phone.name} /> \r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href={'/phones/' + this.props.phone.id}> {this.props.phone.name}</a>\r\n\t\t\t\t\t<p>{this.props.phone.snippet}</p>\r\n\t\t\t\t\t</li>\r\n\t\t\t) ;\r\n\t\t}\r\n\t}\r\n\r\nSome custom CSS is used above. Define it in `src/components/phone/phone.css`:\r\n\r\n\t.phone_item {\r\n\t\t\theight: 115px;\r\n\t\t\tpadding-top: 15px;\r\n\t\t}\r\n\r\n\t\t.thumb {\r\n\t\t\tfloat: left;\r\n\t\t\tmargin: -0.5em 1em 1.5em 0;\r\n\t\t\tpadding-bottom: 1em;\r\n\t\t\theight: 100px;\r\n\t\t\twidth: 100px\r\n\t\t}\r\n\r\nIn `stories/phoneApp.js` add a story for this component:\r\n\r\n     . . . . other imports . . . . .\r\n     import Phone from '../src/components/phone';\r\n     import Phones from '../src/Data';   // Test data set\r\n\r\n\t storiesOf('Phone Catalogue', module)\r\n\t\t.add('Select controls', \r\n\t       . . . . . \r\n\t\t)\r\n\t\t.add('Phone', \r\n\t        () =>  <Phone phone={Phones[0]} /> \r\n\t\t)     \r\n\t\t\t\r\nIn the Storybook browser page select this component. The image is not rendering. In the JSX code, the img tag is referencing a static file using a relative pathname. We need to contextualize it. Restart the server, as follows:\r\n\r\nA relative pathname is used in the img tag\r\nWe need to tell Story\r\n\r\n     $ npx start-storybook -s ./public -p 9001 -c .storybook\r\n\r\n[-s for static directory name] The image should now appears in the Storybook rendering. \r\n\r\nThe PhoneList component needs a prop containing an array of phone objects. It generates an array of Phone components, using the map method, from the object array. In `components/phoneList/index.js` place the following code:\r\n\r\n      import React, { Component } from 'react';\r\n      import Phone from '../phone'\r\n      import './phoneList.css'\r\n\r\n      export default class PhoneList extends Component {\r\n          render() {\r\n            let displayedPhones =  this.props.phones.map( \r\n                (phone) => <Phone key={phone.id} phone={phone } />\r\n             ) ; \r\n            return (\r\n              <div className=\"col-md-10\">\r\n                <ul className=\"phones\">\r\n                    {displayedPhones}\r\n                </ul>\r\n              </div>\r\n            ) ;\r\n        }\r\n      }\r\n\r\nIn `components/phoneList/phoneList.css` add a small amount of CSS:\r\n\r\n\t.phones {\r\n\t\tlist-style: none;\r\n\t\tpadding-top: 10px;\r\n\t}\r\n\r\nIn `stories/phoneApp.js` add a story for this component:\r\n\r\n     . . . . other imports . . . . .\r\n    import PhoneList from '../src/components/phoneList';\r\n\r\n\tstoriesOf('Phone Catalogue', module)\r\n          . . . . .\t\r\n        .add('Phone list', \r\n           () =>  <PhoneList phones={Phones} /> \r\n        )\t\r\n\r\n\r\n### Assemble the App.\r\n\r\nWe now plug these components together to form the app. Stop Storybook server and start the app server:\r\n\r\n       $ npm start\r\n\r\nIn `src/App.js` replace the entire content with the following:\r\n\r\n\t\timport React , { Component } from 'react';\r\n\t\timport Phones from  './Data';\r\n\t\timport PhoneList from './components/phoneList'\r\n\t\timport SelectControls  from './components/selectControls' ;\r\n\r\n\t\tclass App extends Component {\r\n\t\t\trender() {\r\n\t\t\t\tlet list = Phones ;\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"jumbotron\">\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t<div className=\"col-md-10\" >\r\n\t\t\t\t\t\t\t\t\t<h2>Phone Catalogue App</h2>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t<SelectControls />\r\n\t\t\t\t\t\t\t\t<PhoneList phones={list} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t    }\r\n\t\t}\r\n\t\texport default App;\r\n\r\nThe `src/App.css` file content can be cleared. Finally, `src/index.js` can be set to the following:\r\n\r\n\t\timport React from 'react';\r\n\t\timport ReactDOM from 'react-dom';\r\n\t\timport App from './App';\r\n\t\timport '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\r\n\t\tReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nThe browser should now be rendering the page correctly at: http://localhost:3000  (although their is no user interaction support yet).\r\n\r\n#### Exercise.\r\n\r\nAdd a badge to the header that shows the number of phones displayed on the page:\r\n\r\n![][exercise]\r\n\r\n-----------------------\r\nOn completion, from the `threeApps/phoneCatalogue` folder, type the following commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Static version completed\"\r\n\r\n[phonesUI]: ./img/PhoneCatalogue.png\r\n[files]: ./img/files.png\r\n[story1]: ./img/story1.png\r\n[phonesDesign]: ./img/PhoneCatalogueDesign.png\r\n[partial]: ./img/partialPhone.png\r\n[exercise]: ./img/exercise.png\r\n[images]: ./archives/phoneSpecs.zip\r\n[data]: ./archives/data.zip"
    },
  
    {
    "title": "## Hacher News App.",
    "shortTitle": "Hacker_News",
    "contentMd" : "## Hacher News App.\r\n\r\n### Setup.\r\n\r\nIn a terminal window, go to `threeApps/hackernews` folder and install the required packages:\r\n \r\n        $ npm install\r\n\r\nStart the Storybook server:\r\n\r\n     $ npx start-storybook -p 9001 -c .storybook\r\n\r\nand open the interface in the browser: http://localhost:9001/\r\n\r\n### UI Design.\r\n\r\nThe desired UI for this app looks as follows:\r\n\r\n![][hackerUI]\r\n\r\nNote, each news item has a 'Comment' link. It will allow the user add a comment for the item (developed in a later lab).\r\n\r\nThe app's component breakdown is illustrated below:\r\n\r\n![][hackerDesign]\r\n\r\nThis gives a component hierarchy as follows:\r\n\r\n              App (default)\r\n               |\r\n         ---------------\r\n        |              |\r\n     NewsList      NewsForm\r\n        | \r\n    NewsItem\r\n\r\nCreate the following file structure to support this component set:\r\n\r\n![][hackfiles]\r\n\r\n### Implementation.\r\n\r\nIn `src/components/newsForm/index.ks` use the following code:\r\n\r\n        import React, { Component } from 'react';\r\n\r\n        export default class Form extends Component {\r\n            render() {\r\n                return (\r\n                <form style={{marginTop: '30px'}}>\r\n                   <h3>Add a news item</h3>\r\n                   <div className=\"form-group\">\r\n                      <input type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Title\"></input>\r\n                   </div>\r\n                   <div className=\"form-group\">\r\n                       <input type=\"text\"\r\n                         className=\"form-control\"\r\n                        placeholder=\"Link\"></input>\r\n                   </div>\r\n                   <button type=\"submit\" className=\"btn btn-primary\">Add</button>\r\n                </form>\r\n                );\r\n            }\r\n        }\r\n\r\nAdd a story to `stories/hackerApp.js`:\r\n\r\n        . . . . imports . . . . .  \r\n        import NewsForm from '../src/components/newsForm';\r\n\r\n        storiesOf('Hacker App/News Form', module)\r\n           .add('default', () =>  <NewsForm />\r\n           )\r\n\r\nFor illustration purposes we are using Storybook's grouping syntax (the / character) in the story name - the story is in the 'Hacker App' group. Examine the component in the browser.\r\n\r\nIn `src/components/newsItem/index.ks` use the following code:\r\n\r\n\timport React, { Component } from 'react';\r\n\timport './newsItem.css';\r\n\r\n\texport default class NewsItem extends Component {\r\n\trender() {\r\n\t\tlet line ;\r\n\t\tif (this.props.post.link ) {\r\n\t\t\tline = <a href={this.props.post.link} >\r\n\t\t\t\t\t{this.props.post.title} </a> ;\r\n\t\t} else {\r\n\t\t\tline = <span>{this.props.post.title} </span> ;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div >\r\n\t\t\t<span className=\"glyphicon glyphicon-thumbs-up ptr\"/>\r\n\t\t\t\t{this.props.post.upvotes}\r\n\t\t\t<span className=\"newsitem\" >{line}\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<a href={'#/posts/' + this.props.post.id }>Comments</a>\r\n\t\t\t\t</span>\r\n\t\t\t</span>\r\n\t\t\t</div>  \r\n\t\t\t);\r\n\t\t}\r\n\t} \r\n\r\nAdd some custom CSS to `src/components/newsItem/newsItem.css`:\r\n\r\n\t.newsitem  {\r\n\t\tfont-size: 20px ; \r\n\t\tmargin-left: 10px ; \r\n\t\t}\r\n\r\n\t.ptr {\r\n\t\tcursor:pointer;\r\n\t}\r\n\r\n\r\nThis component expects a prop object detailing the news item (or news post) data. The object's structure is:\r\n\r\n     {\r\n\t\tid: xx,\r\n        title: ' . . . . . . ',\r\n\t\tusername: ' . . . . ',\r\n\t\tlink: ' . . . URL . . . .',   (Optional)\r\n        upvotes: xx,\r\n\t\tcomments: []\r\n\t }\r\n\r\nThe component renders slightly different depending on whether the news item has a hyperlink to an article or not. Add two story to `stories/hackerApp.js`:\r\n\r\n\t. . . . imports . . . . \r\n\timport NewsItem from '../src/components/newsItem';\r\n\r\n\tconst post = {\r\n\t\tid: 1 ,\r\n\t\ttitle : 'Post 1.',\r\n\t\tlink : 'http://www.foo.bar',\r\n\t\tusername : 'jbloggs',\r\n\t\tcomments : [],\r\n\t\tupvotes: 10\r\n\t};\r\n\r\n\tstoriesOf('Hacker App/News Item', module)\r\n\t\t.add('default', () => <NewsItem post= { post }  />\r\n\t\t)\r\n\t\t.add('No hyperlink', () => <NewsItem post= { { ...post, link: ''} }  />\r\n\t\t)\r\n\r\n    // As before\r\n    storiesOf('Hacker App/News Form', module)\r\n        .add('default', () => <NewsForm />\r\n    )\r\n\r\nThe news item and news form stories are under the same group name (Hacker App). Storybook allows multiple invocations of its *storiesOf()* function in the same file - it's a matter of preference.\r\n\r\n![][hackstory]\r\n\r\n#### Exercise.\r\n\r\nThe remaining component is NewsList - renders a list of news items. Add the following stub implementation to `src/components/newsList/index.ks`\r\n\r\n\timport React, { Component } from 'react';\r\n\timport NewsItem from '../newsItem';\r\n\r\n\texport default class NewsList extends Component {\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t   <h1>TODO</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nYOU ARE REQUIRED to complete the implement. Use the PhoneList component from  the Phone catalogue as a guide. Add this story to `stories/hackerApp.js`:\r\n\r\n        . . . . . . \r\n\t\timport NewsList from '../src/components/newsList';\r\n        . . . . . . .\r\n\r\n\t\tstoriesOf('Hacker App/News List', module)\r\n\t\t  .add('default', () => { \r\n\t\t\tconst defaultPosts = [\r\n\t\t\t\t{ ...post, id: 1, title: 'Post 1', upvotes: 10 },\r\n\t\t\t\t{ ...post, id: 2, title: 'Post 2', upvotes: 20 },\r\n\t\t\t\t{ ...post, id: 3, title: 'Post 3', upvotes: 30 },\r\n\t\t\t\t{ ...post, id: 4, title: 'Post 4', upvotes: 40 }\r\n\t\t\t];\r\n\t\t\treturn <NewsList posts= { defaultPosts }  />\r\n\t\t});\r\n\r\nThe story should render as shown below.\r\n\r\n![][hackliststory]\r\n\r\n### Assemble the App.\r\n\r\nWe now have all the components developed. It's time to put the app together. Stop the Storybook server and start the create-react-app development server:\r\n\r\n      $ npm start\r\n\r\nReplace the content of `src/App.js` with the the following:\r\n\r\n\t\timport React, { Component } from 'react';\r\n\t\timport NewsList from './components/newsList';\r\n\t\timport Form from './components/newsForm';\r\n\r\n\t\tlet testPosts = [\r\n\t\t\t{   \r\n\t\t\ttitle : 'India - Tiger population sees 30% increase.',\r\n\t\t\tlink : 'http://www.bbc.com/news/world-asia-30896028',\r\n\t\t\tusername : 'jbloggs',\r\n\t\t\tcomments : [],\r\n\t\t\tupvotes : 10\r\n\t\t    },\r\n\t\t    { \r\n\t\t\ttitle : 'The button that is not.',\r\n\t\t\tlink : 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\r\n\t\t\tusername : 'notme',\r\n\t\t\tcomments : [],\r\n\t\t\tupvotes : 12\r\n\t\t    },\r\n\t\t    { \r\n\t\t\ttitle : 'Google Nears $1B Investment in SpaceX',\r\n\t\t\tlink : null,\r\n\t\t\tusername : 'notme',\r\n\t\t\tcomments : [],\r\n\t\t\tupvotes : 12\r\n\t\t    },\r\n\t\t    { \r\n\t\t\ttitle : 'Coinbase Raises $75M from DFJ Growth, USAA, and More',\r\n\t\t\tlink : 'http://blog.coinbase.com/post/108642362357/coinbase-raises-75m-from-dfj-growth-usaa-nyse',\r\n\t\t\tusername : 'psmith',  \r\n\t\t\tcomments : [],\r\n\t\t\tupvotes : 2\r\n\t\t    }\r\n\t\t] ;\r\n\r\n\t\texport default class App extends Component {\r\n\t\t\trender() {\r\n\t\t\t\treturn (\r\n\t\t\t\t  <div className=\"jumbotron\">\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<div className=\"col-md-9 col-md-offset-3\" >\r\n\t\t\t\t\t\t\t<a href=\"/\"><h1>Hacker News</h1></a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<div className=\"col-md-9 col-md-offset-1\">\r\n\t\t\t\t\t\t\t<NewsList posts={testPosts}  />\r\n\t\t\t\t\t\t\t<Form />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t  </div>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\nIn the browser the app will render but the styling is not correct. The Bootstrap CSS library is missing. Change `src/index.js` as follows: \r\n\r\n\timport React from 'react';\r\n\timport ReactDOM from 'react-dom';\r\n\timport App from './App';\r\n\timport '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\r\n\tReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nYou should now see the following in the browser:\r\n\r\n![][hackerStart]\r\n\r\nCommit the work to the Git repository (from the `threeApps/hackernews` folder) with the commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Static version completed\"\r\n\r\n[hackerUI]: ./img/HackerNews.png\r\n[hackfiles]: ./img/hackfiles.png\r\n[hackliststory]: ./img/hackliststory.png\r\n[hackstory]: ./img/hackstory.png\r\n[hackerDesign]: ./img/HackerNewsDesign.png\r\n[css]: https://facebook.github.io/react/tips/inline-styles.html\r\n[hackerStart]: ./img/hackerStart.png\r\n[newsStoryItem]: ./img/newsStoryItem.png\r\n[newsStoryForm]: ./img/newsStoryForm.png"
    }
  
  ]
  }

