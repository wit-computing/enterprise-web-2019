


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab_React_Data_Flow",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Setup the FilteredFriends applications to illustrate the basic <strong>data flow</strong> design patterns promoted by ReactJS.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#  React data flow.",
    "shortTitle": "Lab_React_Data_Flow",
    "contentMd" : "#  React data flow.\n\nSetup the FilteredFriends applications to illustrate the basic __data flow__ design patterns promoted by ReactJS.\n"
    },
  
    {
    "title": "## 1-way data flow.",
    "shortTitle": "1Way_Data_Flow",
    "contentMd" : "## 1-way data flow.\n\nDownload and unzip [this archive][app] - it's the FilterFriends React app developed with the create-react-app tool. Open a terminal, go to the base folder (`1WayDataFlow`) and type:\n\n        $ npm install\n\nBefore running this app, we first need to setup a __mock__ Web API. The [json-server][json] utility is ideal for this requirement. Install it as follows:\n\n       $ npm install -g json-server\n\nCreate a file in the base folder (`1WayDataFlow`) named `friends.json` and paste in the JSON structure below:  \n\n\t\t{\n\t\t  \"friends\": [\n\t\t    {\n\t\t      \"id\": 1,\n\t\t      \"name\": \"Joe Bloggs\",\n\t\t      \"address\": \"1 Main Street\",\n\t\t      \"email\": \"jbloggs@here.con\"\n\t\t    },\n\t\t    {\n\t\t      \"id\": 2,\n\t\t      \"name\": \"Paula Smith\",\n\t\t      \"address\": \"5 High Street\",\n\t\t      \"email\": \"psmith@here.con\"\n\t\t    },\n\t\t    {\n\t\t      \"id\": 3,\n\t\t      \"name\": \"Catherine Dwyer\",\n\t\t      \"address\": \"2 Upper Street\",\n\t\t      \"email\": \"cdwyer@here.con\"\n\t\t    },\n\t\t    {\n\t\t      \"id\": 4,\n\t\t      \"name\": \"Paul Briggs\",\n\t\t      \"address\": \"3 Side Street\",\n\t\t      \"email\": \"pbriggs@here.con\"\n\t\t    }\n\t\t  ]\n\t\t}\n\nFrom the base folder start the mock API server:\n\n        ¢ json-server ./friends.json -p 3001\n\n[ Note, the server is using port 3001.]\n\nTo prove the mock API is working, in the browser navigate to: http://localhost:3001/friends. The server will responds with the full list of friends. Try a HTTP request to:  http://localhost:3001/friends/2. This time the Web API returns the friend with an id of 2. Leave the API server running. \n\nOpen a second terminal window, go to `1WayDataFlow`  and start the development server (provided by the create-react-app tool):\n\n        $ npm start\n\nThe app should be displaying the full list of friends retrieved from the API (see illustration). Use the search text box to find specific friends.\n\n![][friends]\n\nExamine the code in `src/App.js` and the `src/components` folder to ensure you understand how it works. Some features worth noting are: \n\n+ The FriendsApp component uses React's component state feature to store the current value of the text input field. They are always in sync.\n+ The *componentDidMount* method in the *FriendsApp* component sends an __asynchronous__ HTTP Get request to the API server. It stores the responds (the full list of friends, as a JSON data structure) in the *localCache* custom object and then forces a re-rendering of the component by calling *setState()*.\n+ The *render* method of *FriendsApp* computes the matching subset of friends, based on the current content of the input field.\n+ The *onChange* event handler for the input field - the *filterFriends* function - also forces a re-rendering of its containing component, i.e. every time the user changes the text field the subset of matching friends must be recomputed and the display updated.\n+ Sometimes a change to the input text field does not change the matching subset of friends. In this case their is no need to re-render the display. The *shouldComponentUpdate* method of the *FilteredFriendList* component fulfills this performance check.\n\n[app]: ./archives/1WayDataFlow.zip\n[json]: https://github.com/typicode/json-server\n[friends]: ./img/friends.png"
    },
  
    {
    "title": "## Inverse data flow.",
    "shortTitle": "Inverse_Data_Flow",
    "contentMd" : "## Inverse data flow.\n\nDownload and unzip [this archive][app]. Open a terminal window, go to the base folder (`InverseDataFlow`) and type:\n\n        $ npm install \n\nOpen a second terminal window, go to the `1WayDataFlow` folder and start the json-server:\n\n        ¢ json-server ./friends.json -p 3001\n\nIn the 'InverseDataFlow' terminal window, start the development server:\n\n        $ npm start\n\nThis app is a redesign of the Filtered Friends app from the previous section - exact same functionality though. The component design for this version is as follows:\n\n              FriendsApp\n                   |\n                   V\n            ------------------\n            |                |            \n            V                V\n\tSearchBox      FilteredFriendList\n                              |\n                              |  (multiple)\n                              V\n                           Friend\n\n\nSee `src/App,js` and `src/components` folder for details. \n\nThe main difference in this design is the input text field is now managed by a separate component. *SearchBox*. However, as in the previous design, the *FriendsApp* component still stores the current value of the text field as part of its state object. Any changes in the text field must trigger a recompute of the matching subset of friends. Therefore SearchBox must communicate any change to FriendsApp. This is achieved by the inverse data flow pattern. *FriendsApp* passing a function reference to *SearchBox*, via a prop. The function updates the state, thus forcing a re-rendering. SearchBox calls this function via the field's *onChange* event handler. \n\nExamine the code to ensure you understand how it works.\n\n\n[app]: ./archives/InverseDataFlow.zip\n[json]: https://github.com/typicode/json-server"
    }
  
  ]
  }

