


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab_React_Data_Flow",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Setup the FilteredFriends applications to illustrate the basic <strong>data flow</strong> design patterns promoted by ReactJS.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#  React data flow.",
    "shortTitle": "Lab_React_Data_Flow",
    "contentMd" : "#  React data flow.\r\n\r\nSetup the FilteredFriends applications to illustrate the basic __data flow__ design patterns promoted by ReactJS.\r\n"
    },
  
    {
    "title": "## 1-way data flow.",
    "shortTitle": "1Way_Data_Flow",
    "contentMd" : "## 1-way data flow.\r\n\r\nDownload and unzip [this archive][app] - it's the FilterFriends React app developed with the create-react-app tool. Open a terminal, go to the base folder (`1WayDataFlow`) and type:\r\n\r\n        $ npm install\r\n\r\nBefore running this app, we first need to setup a __mock__ Web API. The [json-server][json] utility is ideal for this requirement. Install it as follows:\r\n\r\n       $ npm install -g json-server\r\n\r\nCreate a file in the base folder (`1WayDataFlow`) named `friends.json` and paste in the JSON structure below:  \r\n\r\n\t\t{\r\n\t\t  \"friends\": [\r\n\t\t    {\r\n\t\t      \"id\": 1,\r\n\t\t      \"name\": \"Joe Bloggs\",\r\n\t\t      \"address\": \"1 Main Street\",\r\n\t\t      \"email\": \"jbloggs@here.con\"\r\n\t\t    },\r\n\t\t    {\r\n\t\t      \"id\": 2,\r\n\t\t      \"name\": \"Paula Smith\",\r\n\t\t      \"address\": \"5 High Street\",\r\n\t\t      \"email\": \"psmith@here.con\"\r\n\t\t    },\r\n\t\t    {\r\n\t\t      \"id\": 3,\r\n\t\t      \"name\": \"Catherine Dwyer\",\r\n\t\t      \"address\": \"2 Upper Street\",\r\n\t\t      \"email\": \"cdwyer@here.con\"\r\n\t\t    },\r\n\t\t    {\r\n\t\t      \"id\": 4,\r\n\t\t      \"name\": \"Paul Briggs\",\r\n\t\t      \"address\": \"3 Side Street\",\r\n\t\t      \"email\": \"pbriggs@here.con\"\r\n\t\t    }\r\n\t\t  ]\r\n\t\t}\r\n\r\nFrom the base folder start the mock API server:\r\n\r\n        ¢ json-server ./friends.json -p 3001\r\n\r\n[ Note, the server is using port 3001.]\r\n\r\nTo prove the mock API is working, in the browser navigate to: http://localhost:3001/friends. The server will responds with the full list of friends. Try a HTTP request to:  http://localhost:3001/friends/2. This time the Web API returns the friend with an id of 2. Leave the API server running. \r\n\r\nOpen a second terminal window, go to `1WayDataFlow`  and start the development server (provided by the create-react-app tool):\r\n\r\n        $ npm start\r\n\r\nThe app should be displaying the full list of friends retrieved from the API (see illustration). Use the search text box to find specific friends.\r\n\r\n![][friends]\r\n\r\nExamine the code in `src/App.js` and the `src/components` folder to ensure you understand how it works. Some features worth noting are: \r\n\r\n+ The FriendsApp component uses React's component state feature to store the current value of the text input field. They are always in sync.\r\n+ The *componentDidMount* method in the *FriendsApp* component sends an __asynchronous__ HTTP Get request to the API server. It stores the responds (the full list of friends, as a JSON data structure) in the *localCache* custom object and then forces a re-rendering of the component by calling *setState()*.\r\n+ The *render* method of *FriendsApp* computes the matching subset of friends, based on the current content of the input field.\r\n+ The *onChange* event handler for the input field - the *filterFriends* function - also forces a re-rendering of its containing component, i.e. every time the user changes the text field the subset of matching friends must be recomputed and the display updated.\r\n+ Sometimes a change to the input text field does not change the matching subset of friends. In this case their is no need to re-render the display. The *shouldComponentUpdate* method of the *FilteredFriendList* component fulfills this performance check.\r\n\r\n[app]: ./archives/1WayDataFlow.zip\r\n[json]: https://github.com/typicode/json-server\r\n[friends]: ./img/friends.png"
    },
  
    {
    "title": "## Inverse data flow.",
    "shortTitle": "Inverse_Data_Flow",
    "contentMd" : "## Inverse data flow.\r\n\r\nDownload and unzip [this archive][app]. Open a terminal window, go to the base folder (`InverseDataFlow`) and type:\r\n\r\n        $ npm install \r\n\r\nOpen a second terminal window, go to the `1WayDataFlow` folder and start the json-server:\r\n\r\n        ¢ json-server ./friends.json -p 3001\r\n\r\nIn the 'InverseDataFlow' terminal window, start the development server:\r\n\r\n        $ npm start\r\n\r\nThis app is a redesign of the Filtered Friends app from the previous section - exact same functionality though. The component design for this version is as follows:\r\n\r\n              FriendsApp\r\n                   |\r\n                   V\r\n            ------------------\r\n            |                |            \r\n            V                V\r\n\tSearchBox      FilteredFriendList\r\n                              |\r\n                              |  (multiple)\r\n                              V\r\n                           Friend\r\n\r\n\r\nSee `src/App,js` and `src/components` folder for details. \r\n\r\nThe main difference in this design is the input text field is now managed by a separate component. *SearchBox*. However, as in the previous design, the *FriendsApp* component still stores the current value of the text field as part of its state object. Any changes in the text field must trigger a recompute of the matching subset of friends. Therefore SearchBox must communicate any change to FriendsApp. This is achieved by the inverse data flow pattern. *FriendsApp* passing a function reference to *SearchBox*, via a prop. The function updates the state, thus forcing a re-rendering. SearchBox calls this function via the field's *onChange* event handler. \r\n\r\nExamine the code to ensure you understand how it works.\r\n\r\n\r\n[app]: ./archives/InverseDataFlow.zip\r\n[json]: https://github.com/typicode/json-server"
    }
  
  ]
  }

