


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab_React_Routing",
  "img" : "img/main.jpg",
  "videoid" : "none",
  "objectives" : "<p>In this lab we add <strong>routing</strong> to the apps being developed over the previous two lab exercises. Only the Phone Catalogue and Hacker News apps require routing logic.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Routing in React.",
    "shortTitle": "Lab_React_Routing",
    "contentMd" : "# Routing in React.\r\n \r\nIn this lab we add __routing__ to the apps being developed over the previous two lab exercises. Only the Phone Catalogue and Hacker News apps require routing logic."
    },
  
    {
    "title": "## Phone Catalogue App.",
    "shortTitle": "Phone_Catalogue",
    "contentMd" : "## Phone Catalogue App.\r\n\r\nThe objective with this app is to display detailed information for a phone when the user clicks it on the main view - see example below:\r\n\r\n![][detail3]\r\n\r\nThe URL for the new view is __parameterized__, for example:\r\n\r\n>'http://localhost:3000/phones/droid-2-global-by-motorola', where *droid-2-global-by-motorola* is a phone identifier. \r\n\r\nThe general form of the URL is:\r\n\r\n>http://localhost:3000/phones/:id\r\n\r\nFor convenience, all phone specifications are stored in JSON files at `phoneCatalogue/public/phoneSpecs/phones`. For example, the file pathname for the sample phone mentioned above is: `phoneCatalogue/public/phoneSpecs/phones/droid-2-global-by-motorola.json`. Find it in your filesystem.\r\n\r\n### Setup.\r\n\r\nFrom `threeApps/phoneCatalogue` folder, install the React Router package:\r\n\r\n       $ npm install react-router-dom@4.2.2 --save\r\n\r\nand also the Superagent packages:\r\n\r\n      $ npm install  superagent@1.6.1 --save\r\n\r\nStart the development server:\r\n\r\n      $ npm start \r\n\r\n### Routing Requirements.\r\n\r\nThis app will support two URL routes:\r\n\r\n1. The root path (/) - Display the main view (already developed).\r\n1. /phones/:id - Display a detailed specification for a specific phone.\r\n       \r\n### Routing implementation.\r\n\r\nIn `phoneCatalogue/src/index.js`, replace the entire content with the following:\r\n\r\n    import React, { Component } from 'react';\r\n    import ReactDOM from 'react-dom';\r\n    import { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\n    import App from './App';\r\n    import '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n    import PhoneDetail from './components/phoneDetail'\r\n\r\n     class Router extends Component {    //}= (props) => \r\n        render() {  \r\n           return ( \r\n            <BrowserRouter>\r\n                <div className=\"jumbotron\">\r\n                   <div className=\"container-fluid\">\r\n                      <div className=\"row\">\r\n                          <div className=\"col-md-10\" >\r\n                            <h1>Phone Catalogue App</h1>\r\n                          </div>\r\n                      </div>\r\n                    </div>\r\n                    <Switch>\r\n                        <Route path='/phones/:id' component={ PhoneDetail } />\r\n                        <Route exact path='/' component={ App } />\r\n                        <Redirect from='*' to='/' />\r\n                    </Switch>\r\n                </div>\r\n            </BrowserRouter>\r\n      );\r\n     }\r\n    }\r\n\r\n    ReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n[This change causes some errors, which can be ignored for the moment.]\r\n\r\nSome points to note in the above code:\r\n\r\n1. The last import statement refers to the components that will render the phone specification page - developed below.\r\n1. The app's routing logic is declared in a separate component, Router. It is the component passed to  ReactDOM.render().\r\n1. The routing component includes some __static/persistent elements__. They representing the fixed header across all views in the app.\r\n\r\nThe App component should no longer displays a header. In `src/App.js` reduce the render method return statement to the following:\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <SelectControls onUserInput={this.handleChange } \r\n                    filterText={this.state.search} \r\n                    sort={this.state.sort} />\r\n                <PhoneList phones={filteredList} />\r\n            </div> \r\n        );\r\n\r\n\r\nCreate the file `src/components/phoneDetail/index.js`. The new *PhoneDetail* component (and its children) will need a significant amount of code, however, we will use a stub implementation for starters; add the following code to the new file:\r\n\r\n      import React, {Component} from 'react';\r\n      import { withRouter } from 'react-router-dom';\r\n\r\n      class PhoneDetail extends Component {\r\n        render() {\r\n          return (\r\n              <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-10\">\r\n                    <h3> Phone id: {this.props.match.params.id} </h3>\r\n                    <h3> Detail page stub </h3>\r\n                  </div>    \r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n      };\r\n\r\n        export default withRouter(PhoneDetail);\r\n\r\nThe main feature to note here is how the component accesses the parameter portion of the active URL address (a phone id). The *withRouter()* function injects various routing-related props in to the component, including the *this.props.match.params* object.  \r\n\r\nIn the browser the main view should now be rendering correctly. Click any phone on the page to see the new stub view - see example below:\r\n\r\n![][detail1]\r\n\r\nThis demonstrates the hyperlinks on the main view do work, however they are 'external' links - they are not integrated in to the React Router system. To fix this we must replace the HTML anchor tags with the React Router __Link__ tag/component. We will also taken the opportunity to use React's stateless function component style. In `src/components/phone/index.js`, replace the entire content with the following::\r\n\r\n      import React from 'react';\r\n      import './phone.css';\r\n      import { Link } from 'react-router-dom';\r\n\r\n      const Phone = ( props ) => {\r\n              const { id, imageUrl, name, snippet } = props.phone\r\n              const fullImageURL = `phoneSpecs/${imageUrl}`\r\n              const path = `/phones/${id}`\r\n              return (\r\n                  <li className=\"thumbnail phone_item\">\r\n                      <Link to={path} className=\"thumb\">\r\n                          <img src={fullImageURL} alt={name} /> \r\n                      </Link>\r\n                      <Link to={path}> {name}</Link>\r\n                      <p>{snippet}</p>\r\n                  </li>\r\n              ) ;\r\n      }\r\n\r\n      export default Phone\r\n\r\nIn the browser, go to the main view and click some phone links. Notice the URL in the address bar changes. A sample URL might be:\r\n\r\n>>http://localhost:3000/phones/motorola-bravo-with-motoblur \r\n\r\n### The PhoneDetail component. \r\n\r\nPhone details are stored in JSON files, for example, see `phoneCatalogue/public/phoneSpecs/specs/dell-streak-7.json`. Our React app can access this data using a HTTP GET request to the development server. In `components/phoneDetail/index.js`, update the code as follows:\r\n\r\n    . . . . other imports . . . . \r\n    import localCache from '../../localCache';\r\n    import request from 'superagent' ; \r\n\r\n    class PhoneDetail extends Component {\r\n        componentDidMount() {\r\n            const url = `/phoneSpecs/phones/${this.props.match.params.id}.json`\r\n            request.get( url, \r\n                (err, res) => {\r\n                  let json = JSON.parse(res.text);\r\n                  localCache.setPhone(json);\r\n                  this.setState({});\r\n                }) ;\r\n        } \r\n\r\n        render(){\r\n            let display = <p>No phone details</p> ; \r\n            let phone = localCache.getPhone();\r\n            if (phone) {\r\n                display =  \r\n                  <div>\r\n                      <h2>{phone.name} </h2>\r\n                      <p>{phone.description}</p>\r\n                  </div> \r\n            }\r\n            return (\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row\">\r\n                      <div className=\"col-md-10\">\r\n                          {display}\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n        export default withRouter(PhoneDetail);\r\n\r\n\r\nIgnore any errors this produces for the moment. This code uses a simple custom class to cache the current phone being viewed. Create the file `src/localCache.js` and paste in the following:\r\n\r\n      class LocalCache {\r\n          constructor() {\r\n              this.phone = null \r\n          }\r\n\r\n          setPhone(phone) {\r\n              this.phone = phone \r\n          }\r\n\r\n          getPhone() {\r\n              return this.phone\r\n          }\r\n\r\n      }\r\n      export default (new LocalCache() );\r\n\r\nIn the PhoneDetail component the *componentDidMount* method uses the Superagent library to make the HTTP request. The asynchronous nature of this behavior means we need to force a re-rendering after a response is received. The built-in setState() method achieves this, even though the component has no actual state data. \r\n\r\nIn the browser, click any phone in the main page to test the new code.\r\n\r\nWe will delegate the content for this view to two new components, as illustrated below:\r\n\r\n![][detail4]\r\n\r\nPlace the custom styling required in a new file `components/phoneDetail/phoneDetail.css`:\r\n\r\n    img.phone {\r\n        float: left;\r\n        border: 1px solid black;\r\n        margin-right: 3em;\r\n        margin-bottom: 2em;\r\n        background-color: white;\r\n        padding: 2em;\r\n        height: 400px;\r\n        width: 400px;\r\n    }\r\n    \r\n    ul.phone-thumbs {\r\n        margin: 0;\r\n        list-style: none;\r\n    }\r\n    \r\n    ul.phone-thumbs li {\r\n        border: 1px solid black;\r\n        display: inline-block;\r\n        margin: 1em;\r\n        background-color: white;\r\n    }\r\n    \r\n    ul.phone-thumbs img {\r\n        height: 100px;\r\n        width: 100px;\r\n        padding: 1em;\r\n    }\r\n    \r\n    ul.specs {\r\n        clear: both;\r\n        margin: 0;\r\n        padding: 0;\r\n        list-style: none;\r\n    }\r\n    \r\n    ul.specs > li{\r\n        display: inline-block;\r\n        width: 200px;\r\n        vertical-align: top;\r\n    }\r\n    \r\n    ul.specs > li > span{\r\n        font-weight: bold;\r\n        font-size: 1.2em;\r\n    }\r\n            \r\nCreate the file `components/phoneDetail/images.js` and paste in following:\r\n\r\n    import React from 'react';\r\n    import './phoneDetail.css'\r\n\r\n    export default  ({phone} ) => { \r\n        let thumbImages = phone.images.map((img,index) => \r\n            <li key={index}>\r\n                <img key={index} src={\"/phoneSpecs/\" + img} alt=\"not available\"/>\r\n            </li>\r\n        );\r\n        let mainImage = (\r\n            <div className=\"phone-images\">\r\n                <img src={\"/phoneSpecs/\" + phone.images[0]} \r\n                            alt={phone.name} className=\"phone\" />\r\n            </div>\r\n            ) ;\r\n        return (\r\n            <div>\r\n                {mainImage}\r\n                <h1>{phone.name}</h1>\r\n                <p>{phone.description}</p>\r\n                <ul className=\"phone-thumbs\">{thumbImages}</ul>\r\n            </div>\r\n        );\r\n      }\r\n\r\nIn the function component parameter list we use  ES6 destructing syntax to extract the phone inner object from the props object.\r\n\r\nUsing Storybook to check the rendering of this component, in `stories/phoneApp.js` add a phone specification object as test data (copied directly from ome of the JSON files in `public/phoneSpecs/phones`):\r\n\r\n      . . . .  imports . . . . \r\n      const phone = \r\n            {\r\n                \"additionalFeatures\": \"Front Facing 1.3MP Camera\", \r\n                \"android\": {\r\n                        \"os\": \"Android 2.2\", \r\n                        \"ui\": \"Dell Stage\"\r\n                }, \r\n                \"availability\": [\r\n                        \"T-Mobile\"\r\n                ], \r\n                \"battery\": {\r\n                        \"standbyTime\": \"\", \r\n                        \"talkTime\": \"\", \r\n                        \"type\": \"Lithium Ion (Li-Ion) (2780 mAH)\"\r\n                }, \r\n                \"camera\": {\r\n                        \"features\": [\r\n                                \"Flash\", \r\n                                \"Video\"\r\n                        ], \r\n                        \"primary\": \"5.0 megapixels\"\r\n                }, \r\n                \"connectivity\": {\r\n                        \"bluetooth\": \"Bluetooth 2.1\", \r\n                        \"cell\": \"T-mobile HSPA+ @ 2100/1900/AWS/850 MHz\", \r\n                        \"gps\": true, \r\n                        \"infrared\": false, \r\n                        \"wifi\": \"802.11 b/g\"\r\n                }, \r\n                \"description\": \"Introducing Dell\\u2122 Streak 7. Share photos, videos and movies together. It\\u2019s small enough to carry around, big enough to gather around. Android\\u2122 2.2-based tablet with over-the-air upgrade capability for future OS releases.  A vibrant 7-inch, multitouch display with full Adobe\\u00ae Flash 10.1 pre-installed.  Includes a 1.3 MP front-facing camera for face-to-face chats on popular services such as Qik or Skype.  16 GB of internal storage, plus Wi-Fi, Bluetooth and built-in GPS keeps you in touch with the world around you.  Connect on your terms. Save with 2-year contract or flexibility with prepaid pay-as-you-go plans\", \r\n                \"display\": {\r\n                        \"screenResolution\": \"WVGA (800 x 480)\", \r\n                        \"screenSize\": \"7.0 inches\", \r\n                        \"touchScreen\": true\r\n                }, \r\n                \"hardware\": {\r\n                        \"accelerometer\": true, \r\n                        \"audioJack\": \"3.5mm\", \r\n                        \"cpu\": \"nVidia Tegra T20\", \r\n                        \"fmRadio\": false, \r\n                        \"physicalKeyboard\": false, \r\n                        \"usb\": \"USB 2.0\"\r\n                }, \r\n                \"id\": \"dell-streak-7\", \r\n                \"images\": [\r\n                        \"img/phones/dell-streak-7.0.jpg\", \r\n                        \"img/phones/dell-streak-7.1.jpg\", \r\n                        \"img/phones/dell-streak-7.2.jpg\", \r\n                        \"img/phones/dell-streak-7.3.jpg\", \r\n                        \"img/phones/dell-streak-7.4.jpg\"\r\n                ], \r\n                \"name\": \"Dell Streak 7\", \r\n                \"sizeAndWeight\": {\r\n                        \"dimensions\": [\r\n                                \"199.9 mm (w)\", \r\n                                \"119.8 mm (h)\", \r\n                                \"12.4 mm (d)\"\r\n                        ], \r\n                        \"weight\": \"450.0 grams\"\r\n                }, \r\n                \"storage\": {\r\n                        \"flash\": \"16000MB\", \r\n                        \"ram\": \"512MB\"\r\n                }\r\n            }\r\n\r\n      storiesOf('Phone Catalogue', module)\r\n          . . . . . . \r\n\r\nNow add a story:\r\n\r\n    . . . . other imports . . . . \r\n    import Images from '../src/components/phoneDetail/images';\r\n\r\n    . . . . . . . \r\n\r\n    storiesOf('Phone Catalogue', module)\r\n      . . . . . . \r\n      .add('Phone list',\r\n        . . . . . .  \r\n      )\r\n\r\n    storiesOf('Phone Detail', module)\r\n      .add('Images', \r\n         () =>  <Images phone={phone} />\r\n      ) \r\n\r\nStart the Storybook server:\r\n\r\n    $ npx start-storybook -s ./public  -p 9001 -c .storybook\r\n\r\nAnd check the browser:\r\n\r\n![][storyp1]\r\n\r\nWhile the new component is rendering, an error now shows for some of the stories from the Phone Catalogue group, e.g. the Phone component. The error is caused by the React Router Link component. It is fixed by wrapping the problem components in a Router component. To avoid code duplication we will apply a *decorator* to perform the wrapping. In `stories/phoneApp.js` make the changes below:\r\n\r\n        . . . . other imports . . . . \r\n    import { MemoryRouter, Route } from 'react-router'\r\n    . . . . . \r\n    storiesOf('Phone Catalogue', module)\r\n       .addDecorator(story => \r\n           <MemoryRouter initialEntries={['/']}>{story()}</MemoryRouter>\r\n       )\r\n       .add('Select controls', \r\n           . . . as before . . . \r\n\r\nIn the browser check all components are now rendering.\r\n\r\nCreate the file `components/phoneDetail/specification.js` and paste in the following:\r\n\r\n      import React from 'react'\r\n      import './phoneDetail.css'\r\n\r\n      export default  ({phone}) => {\r\n          let availability = phone.availability.map(\r\n              (avb,index) => <dd key={index}>{avb}</dd>\r\n          ) \r\n          let dimensions = phone.sizeAndWeight.dimensions.map(\r\n              (dim,index) => <dd key={index}>{dim}</dd> \r\n          ) \r\n          return (\r\n            <div>\r\n                <ul className=\"specs\">\r\n                    <li >\r\n                        <span>Availability and Networks</span>\r\n                        <dl>\r\n                            <dt>Availability</dt>\r\n                                {availability}\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Battery</span>\r\n                        <dl>\r\n                            <dt>Type</dt>\r\n                            <dd>{phone.battery.type}</dd>\r\n                            <dt>Talk Time</dt>\r\n                            <dd>{phone.battery.talkTime}</dd>\r\n                            <dt>Standby time (max)</dt>\r\n                            <dd>{phone.battery.standbyTime}</dd>\r\n                        </dl>\r\n                    </li> \r\n                    <li>\r\n                        <span>Storage and Memory</span>\r\n                        <dl>\r\n                            <dt>RAM</dt>\r\n                            <dd>{phone.storage.ram}</dd>\r\n                            <dt>Internal Storage</dt>\r\n                            <dd>{phone.storage.flash}</dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Connectivity</span>\r\n                        <dl>\r\n                            <dt>Network Support</dt>\r\n                            <dd>{phone.connectivity.cell}</dd>\r\n                            <dt>WiFi</dt>\r\n                            <dd>{phone.connectivity.wifi}</dd>\r\n                            <dt>Bluetooth</dt>\r\n                            <dd>{phone.connectivity.bluetooth}</dd>\r\n                            <dt>Infrared</dt>\r\n                            <dd>{phone.connectivity.infrared}</dd>\r\n                            <dt>GPS</dt>\r\n                            <dd>{phone.connectivity.gps}</dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Android</span>\r\n                        <dl>\r\n                            <dt>OS Version</dt>\r\n                            <dd>{phone.android.os}</dd>\r\n                            <dt>UI</dt>\r\n                            <dd>{phone.android.ui}</dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Size and Weight</span>\r\n                        <dl>\r\n                            <dt>Dimensions</dt>\r\n                                    {dimensions}\r\n                            <dt>Weight</dt>\r\n                            <dd>{phone.sizeAndWeight.weight}</dd>\r\n                        </dl>\r\n                    </li> \r\n                    <li>\r\n                        <span>Display</span>\r\n                        <dl>\r\n                            <dt>Screen size</dt>\r\n                            <dd>{phone.display.screenSize}</dd>\r\n                            <dt>Screen resolution</dt>\r\n                            <dd>{phone.display.screenResolution}</dd>\r\n                            <dt>Touch screen</dt>\r\n                            <dd>{phone.display.touchScreen}</dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Hardware</span>\r\n                        <dl>\r\n                            <dt>CPU</dt>\r\n                            <dd>{phone.hardware.cpu}</dd>\r\n                            <dt>USB</dt>\r\n                            <dd>{phone.hardware.usb}</dd>\r\n                            <dt>Audio / headphone jack</dt>\r\n                            <dd>{phone.hardware.audioJack}</dd>\r\n                            <dt>FM Radio</dt>\r\n                            <dd>{phone.hardware.fmRadio}</dd>\r\n                            <dt>Accelerometer</dt>\r\n                            <dd>{phone.hardware.accelerometer}</dd>\r\n                        </dl>\r\n                    </li> \r\n                    <li>\r\n                        <span>Camera</span>\r\n                        <dl>\r\n                            <dt>Primary</dt>\r\n                            <dd>{phone.camera.primary}</dd>\r\n                            <dt>Features</dt>\r\n                            <dd>{phone.camera.features.join(', ')}</dd>\r\n                        </dl>\r\n                    </li>\r\n                    <li>\r\n                        <span>Additional Features</span>\r\n                        <dd>{phone.additionalFeatures}</dd>\r\n                    </li>           \r\n                    </ul>            \r\n                  </div>\r\n              )\r\n      }\r\n\r\nAdd a story to `stories/phoneApp.js`:\r\n\r\n    . . . . other imports . . . . \r\n    import Specification from '../src/components/phoneDetail/specification'\r\n    . . . . . . \r\n \r\n    storiesOf('Phone Detail', module)\r\n       .add('Images', \r\n           () =>  <Images phone={phone} />\r\n       ) \r\n       .add('Specification', \r\n           () =>  <Specification phone={phone} />\r\n       )\r\n\r\nCheck the component in the browser:\r\n\r\n![][storyp2]\r\n\r\nIntegrate the rwo new components in to the app. In `components/phoneDetail/index.js` add two imports at the top:\r\n\r\n     import Specification from './specification'\r\n     import ImagesSection from './images'\r\n\r\nand change the 'if' statement in the render method as follows:\r\n\r\n     if (phone) {\r\n        display =  \r\n          <div>\r\n            <ImagesSection phone={phone} />  \r\n            <Specification phone={phone} /> \r\n          </div> \r\n      }\r\n\r\nStart the development server (npm start) and check the detail view in the browser.\r\n\r\nGo to the `threeApps/phoneCatalogue` folder and commit this work:\r\n\r\n     $ git add -A\r\n     $ git commit -m \"Routing completed\"\r\n\r\n[detail1]: ./img/detail1.png\r\n[detail2]: ./img/detail2.png\r\n[detail3]: ./img/detail3.png\r\n[detail4]: ./img/detail4.png\r\n[storyp1]: ./img/storyp1.png\r\n[storyp2]: ./img/storyp2.png"
    },
  
    {
    "title": "## Hacher News App.",
    "shortTitle": "Hacker_News",
    "contentMd" : "## Hacher News App.\r\n\r\nWhen the user clicks the 'Comments' link beside a news post the app should navigate to a new view that allow users write comments about that post. The illustration below shows an example of this new view:  \r\n \r\n![][comment]\r\n\r\nThe URL for the new view will be parameterized: \r\n\r\n>'http://localhost:3000/posts/:post_id', where :post_id will be the news post's id in the data store.\r\n\r\n### Setup.\r\n\r\nFrom `threeApps/hackerNews`, install the React Router package:\r\n\r\n       $ npm install react-router-dom@4.2.2  --save\r\n\r\nStart the server:\r\n\r\n         $ npm start \r\n\r\n### The Comments page.\r\n\r\nA comment's properties include author, upvote count, the comment text and an id. A news item's comments will be stored in an array, nested inside the news object, for example:\r\n\r\n     { \r\n        id: 2,\r\n        title : 'The button that is not.',\r\n        link : 'http://blog.nuclearsecrecy.com/2014/12/15/button-isnt/',\r\n        username : 'notme',\r\n        comments : [\r\n            {\r\n                id: 1,\r\n                author: 'Joe Bloggs',\r\n                comment: 'I agree with .....',\r\n                upvotes: 5\r\n            },\r\n            {               {\r\n                id: 2,\r\n                author: 'Jane Smith',\r\n                comment: 'On the other hand .....',\r\n                upvotes: 2\r\n            }\r\n        ],\r\n        upvotes : 12\r\n    }\r\n\r\nGiven the similarities between this page and the main page (web form, upvoting) their is not a need to step through its development in detail. In `hackerNews/src` create the file/folder structure shown below:\r\n\r\n![][folders]\r\n\r\nIn `components/commentForm/index.js` copy the following code:\r\n\r\n    import React, { Component } from 'react';\r\n\r\n    export default class Form extends React.Component {\r\n        state = { comment: '', name: ''};\r\n\r\n        handleCommentChange = (e) => {\r\n            this.setState({comment : e.target.value});\r\n        };\r\n\r\n        handleNameChange = (e) => {\r\n            this.setState({name: e.target.value});\r\n        };\r\n\r\n        onSubmit = (e) => {\r\n            e.preventDefault();\r\n            let comment = this.state.comment.trim();\r\n            let name = this.state.name.trim();\r\n            if (!comment ) {\r\n                return;\r\n            }\r\n            this.props.commentHandler(comment,name );\r\n            this.setState({comment: '', name: ''});\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <form  style={{marginTop: '30px'}}>\r\n                    <h3>Add a new comment</h3>\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\"  className=\"form-control\"\r\n                            placeholder=\"Comment\" value={this.state.comment}\r\n                            onChange={this.handleCommentChange} ></input>\r\n                    </div>     \r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\"  className=\"form-control\"\r\n                            placeholder=\"Your name\" value={this.state.name}\r\n                            onChange={this.handleNameChange} ></input>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\"\r\n                        onClick={this.onSubmit}>Submit</button>\r\n                </form>\r\n            );\r\n        }\r\n    }\r\n\r\nIn `components/comment/index.js` copy the following code:\r\n\r\n    import React, { Component } from 'react';\r\n\r\n    export default class Comment extends Component {\r\n        handleVote = () => {\r\n            this.props.upvoteHandler(this.props.comment.id);\r\n        };\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <span className=\"glyphicon glyphicon-thumbs-up ptr\"\r\n                        onClick={this.handleVote}></span>\r\n                    {this.props.comment.upvotes} - by {this.props.comment.author}\r\n                    <span className=\"newsitem\" >\r\n                        {this.props.comment.comment}\r\n                    </span>\r\n                </div>                \r\n            );\r\n        }\r\n    }\r\n\r\nIn `components/commentList/index.js` copy the following code:\r\n\r\n    import React from 'react';\r\n    import Comment from '../comment';\r\n\r\n    export default ( {comments, upvoteHandler} )  => {\r\n        let items = comments.map(\r\n            (comment,index) =>  \r\n                <Comment key={index} \r\n                    comment={comment} upvoteHandler={upvoteHandler}  />\r\n        )\r\n        return (\r\n            <div>\r\n                {items}\r\n            </div>\r\n        )\r\n    };\r\n\r\nIn `stories/hackerApp.js` add these imports at the top:\r\n\r\n    import CommentForm from '../src/components/commentForm';\r\n    import Comment from '../src/components/comment';\r\n    import CommentList from '../src/components/commentList';\r\n\r\nand these stories at the bottom:\r\n  \r\n    storiesOf('Hacker App/Comment page/Comment Form', module)\r\n        .add('default', () =>  \r\n            <CommentForm  addCommentHandler={ action('comment added') } />\r\n    )\r\n\r\n    const comment = {\r\n        id: 1,\r\n        author: 'Joe Bloggs',\r\n        comment: 'I agree with .....',\r\n        upvotes: 10\r\n    }\r\n\r\n    storiesOf('Hacker App/Comment page/Comment', module)\r\n        .add('default', () =>  \r\n            <Comment upvoteHandler={ action('upvoted') }\r\n                comment={comment} />\r\n    )\r\n\r\n    storiesOf('Hacker App/Comment page/Comment list', module)\r\n        .add('default', () => { \r\n            const defaultComments = [\r\n               comment,\r\n              { ...comment, author: 'Jane Smith', upvotes: 3, id: 2},\r\n              { ...comment, comment: 'On the other hand', id: 3 },\r\n              { ...comment, author: 'Jill Dwyer', upvotes: 5, id: 4 },\r\n            ];\r\n            return <CommentList upvoteHandler={ action('upvoted') }\r\n                        comments= { defaultComments }  />\r\n            }\r\n        )\r\n\r\nCheck these in the browser:\r\n\r\n![][storiesh]\r\n\r\n### Routing implementation.\r\n\r\nIn `src/index.js` replace the entire content with the following (Note, it references a component yet to be developed):\r\n\r\n    import React from 'react';\r\n    import ReactDOM from 'react-dom';\r\n    import { BrowserRouter, Route, Redirect, Switch, Link } from 'react-router-dom';\r\n    import '../node_modules/bootstrap/dist/css/bootstrap.css';\r\n    import App from './App';\r\n    import CommentPage from './components/commentPage';\r\n    \r\n    const Router = (props) => {\r\n        return (\r\n            <BrowserRouter>\r\n              <div className=\"jumbotron\">\r\n                <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-9 col-md-offset-3\" >\r\n                    <h1><Link to='/'>Hacker News</Link></h1>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <Switch>\r\n                    <Route path='/posts/:post_id' component={ CommentPage } />\r\n                    <Route exact path='/' component={ App } />\r\n                    <Redirect from='*' to='/' />\r\n                </Switch>\r\n              </div>\r\n            </BrowserRouter>\r\n        );\r\n    };\r\n\r\n    ReactDOM.render(<Router/>, document.getElementById('root')) ;\r\n\r\n\r\nWe can now assemble the new components in to a page/view. Create `components/commentPage.js` and copy in the following:\r\n\r\n    import React, { Component } from 'react';\r\n    import { withRouter } from 'react-router-dom';\r\n    import _ from 'lodash'\r\n    import api from '../dataStore/stubAPI';\r\n    import CommentList from './commentList'\r\n    import Form from './commentForm'\r\n\r\n    class CommentPage extends Component {\r\n        addComment = (comment, name) => {\r\n            let pid =  this.getId() \r\n            api.addComment(pid,comment ,name );\r\n            this.setState({});\r\n        };\r\n\r\n        incrementUpvote = (commentId) => {\r\n            let pid =  this.getId() \r\n            api.upvoteComment(pid,commentId) ;\r\n            this.setState({});\r\n        };\r\n\r\n        getId = () => parseInt( this.props.match.params.post_id, 10);\r\n\r\n        render() {\r\n            let pid = this.getId()\r\n            let post = api.getPost(pid);\r\n            let line = post.link ?\r\n                <a href={post.link}>{post.title} </a> :\r\n                <span>{post.title} </span> ;\r\n            let comments = _.sortBy(post.comments, \r\n                    (comment) => - comment.upvotes\r\n            ); \r\n            return (  \r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                <div className=\"col-md-9 col-md-offset-1\">\r\n                    <h3>{line} </h3>\r\n                    <CommentList comments={comments} \r\n                        upvoteHandler={this.incrementUpvote } />\r\n                    <Form post={post}  addCommentHandler={this.addComment} /> \r\n                </div>\r\n                </div>\r\n              </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default withRouter(CommentPage);\r\n\r\nThis has no new technical features other than the use of the *parseInt* system function. While post ids are stored as integers, they are extracted from the parameterized URLs as strings. We use parseInt to convert the string to an integer. \r\n\r\nIn `components/newsItem/index.js`, in the render method return statement, change the anchor tags from:\r\n\r\n        <span>\r\n            <a href={'#/posts/' + this.props.post.id }>Comments</a>\r\n        </span>\r\n\r\nto:\r\n\r\n       <span>\r\n          <Link to={`/posts/${this.props.post.id}` }>Comments</Link>\r\n       </span>\r\n\r\nand add an import to the same file:\r\n\r\n      import { Link } from 'react-router-dom';\r\n\r\nFinally, in `src/App.js` replace the render method return statement with the following:\r\n\r\n     return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9 col-md-offset-1\">\r\n                <NewsList posts={posts} \r\n                    upvoteHandler={this.incrementUpvote} />\r\n                <Form handleAdd={ this.addNewsItem } />\r\n                </div>\r\n            </div>\r\n        </div>\r\n     )\r\n\r\nIn the browser, from the main view you should now be able to click any news post's 'Comments' link to see the comments page for that post. Also, add some comments and upvote them.\r\n\r\nThe app is now completed. Go to the `threeApps/hackerNews` folder and  commit the changes:\r\n\r\n        $ git add -A\r\n        $ git commit -m \"Added Comments page and related routing\"\r\n\r\n\r\n[comment]: ./img/comments.png\r\n[comparison]: http://stackoverflow.com/questions/523643/difference-between-and-in-javascript\r\n[folders]: ./img/folders.png\r\n[storiesh]: ./img/storyh.png\r\n"
    },
  
    {
    "title": "## Rerendering policy.",
    "shortTitle": "Rendering_Policy",
    "contentMd" : "## Rerendering policy.\r\n\r\nOne way to improve the responsiveness of a React app is by eliminating unnecessary re-renderings.\r\n\r\n### Contact List App.\r\n\r\nIn the ContactList app, in `src/components/contact.js`, add the following statement at the start of the render method:\r\n\r\n      console.log(`Contact - ${this.props.contact.name}` )\r\n\r\nStart the app server (npm start) and open the Chrome Developer tools in the browser tab. Now try the 'add a new contact' feature. Notice that all the existing contacts are  (unnecessarily) re-rendered. \r\n\r\n![][rerender]\r\n\r\nDelete a contact. Again all remaining contacts are re-rendered unnecessarily.\r\n\r\nAdd the following lifecycle method to the Contact component:\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n          let currentContact = {\r\n              name: this.state.name,\r\n              address: this.state.address,\r\n              phone_number: this.state.phone_number\r\n          }\r\n          let same = _.isEqual(nextProps.contact, currentContact)\r\n          return !same || (nextState.status === 'edit' )\r\n            || (nextState.status !== this.state.status)\r\n      }\r\n\r\nWe also need an import statement at the top:\r\n\r\n     import _ from 'lodash'\r\n\r\nNow a re-rendering of a contact will only happen when:\r\n\r\n1. It's status has changed (e.g. from normal to delete) or\r\n1. It is in edit mode (user is changing a property) , or\r\n1. The new and old props are not the same.\r\n\r\nTry the add and delete contact features again. No existing contacts are re-rendered this time. \r\n\r\nOn completion, from the  `threeApps/contactlist` folder, type the following commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Remove unnecessary re-rendering \"\r\n\r\n### Hacker News app.\r\n\r\nThe entire list of news items are re-rendered for every upvote but only the upvoted item should be. In `src/components/newsItem/index.js` add this to the render method:\r\n\r\n    console.log(`News item - ${this.props.post.id}`)\r\n\r\nIn the browser, upvote a post and notice all items are re-rendered. Now add the lifecycle method:\r\n\r\n     shouldComponentUpdate(nextProps, nextState) {\r\n        return nextProps.post.upvotes !== this.props.post.upvotes\r\n     }\r\n\r\nIn the browser, upvoting a post has STOPPED working entirely; the *shouldComponentUpdate* is always returning false. This is because 'nextProps.post' and 'this.props.post' are referencing the same object instance (stored in the stub API). To fix this, in the  App component, at the start of rendering we should make a  deep copy of the array of news posts and pass is as a prop to the NewsList component. In `src/app.js`, change the start of the render method as follows: \r\n\r\n    render() {\r\n        let sourcePosts = _.sortBy(\r\n            api.getAll(), \r\n            (post) => - post.upvotes )\r\n        let posts = _.clone(sourcePosts, true)\r\n    return (\r\n        . . .  as before . . . . \r\n\r\nIn the browser now only the upvoted news post is re-rendered.\r\n\r\nOn completion, from the  `threeApps/hackerNews` folder, type the following commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Remove unnecessary re-rendering \"\r\n\r\n[rerender]: ./img/rerender.png\r\n"
    },
  
    {
    "title": "## Legacy Code.",
    "shortTitle": "Legacy_Code",
    "contentMd" : "## Legacy Code.\r\n\r\nWe will use JSCodeShift to upgrade any legacy React code, concentrating on the Phone Catalogue app only (you may wish to repeat the process for the other apps.).\r\n\r\nFirst, install the toolkit:\r\n\r\n      $ npm install -g jscodeshift\r\n\r\nCreate a new folder (away from the three app folders), called, say, `codemods`. In the terminal window, go to the `codemods` folder and type:\r\n\r\n     $ git clone https://github.com/reactjs/react-codemod.git\r\n\r\nThis downloads the codemod scripts for transforming legact React code. \r\n\r\nTo use jscodeshift command we must specify:\r\n\r\n+ The pathname of the transformer script.\r\n+ The pathname of the legacy source code to be examined for transformation.\r\n+ Arguments for the transformer\r\n\r\nIn the terminal go to `threeapps/phoneCatalogue` and type:\r\n\r\n       $ jscodeshift -t [path to codemods]/react-codemod/transforms/pure-component.js ./src/  --useArrows=true --destructuring=true\r\n\r\nwhere:\r\n\r\n+ '[path to codemods]/react-codemod/transforms/pure-component.js' is the transformer script pathname. You need to substitute in the pathname to your `codemods` directory.\r\n+ './src' is the legacy code.\r\n\r\nTwo file will be modified by jscodeshift:\r\n\r\n1. `src/index.js`\r\n1. `src/components/phoneList/index.js`\r\n\r\nStart the development server:\r\n\r\n       $ npm start\r\n\r\nJSCodeShift did make a tiny syntax error in the transformation. In `src/components/phoneList/index.js` move the export statement to the end:\r\n\r\n        const PhoneList = .... as before ....\r\n           . . . . . . \r\n        export default PhoneList\r\n\r\nThe app should now be rendering correctly in the browser.\r\n\r\nOn completion, from the  `threeApps/phonecatalogue` folder, type the following commands:\r\n\r\n         $ git add -A\r\n         $ git commit -m \"Upgraded legacy code using jscodeshift \"\r\n"
    }
  
  ]
  }

