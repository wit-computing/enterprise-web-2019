


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01_JS_Objects",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>By completing a set of small exercises, this lab helps you develop an understanding of the basic syntax and fundamental concepts of the JavaScript language, with particular emphasis on data representation.</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Javascript (JS) Fundamentals - Objects.",
    "shortTitle": "Lab-01_JS_Objects",
    "contentMd" : "# Javascript (JS) Fundamentals - Objects.\r\n\r\nBy completing a set of small exercises, this lab helps you develop an understanding of the basic syntax and fundamental concepts of the JavaScript language, with particular emphasis on data representation.\r\n"
    },
  
    {
    "title": "## Start-up.",
    "shortTitle": "Startup",
    "contentMd" : "## Start-up.\r\n\r\nDownload the sample code ([here][source]) supporting the lecture slides and unzip the archive. Open a terminal window (Shell/DOS window) and use the *cd* command to relocate to this code's base folder (the `samplecode` folder). Run the first sample script, as follows:\r\n\r\n\t$ node 01_primitives.js\r\n\r\n[Note: As a convention, the dollar symbol ($) is used to represent the terminal prompt - it is not part of a typed command.]\r\n\r\nThe screen-shot shows the expected result.\r\n\r\n![][terminal1]\r\n\r\nNow examine the code in the script file `02_objects.js` and run it:\r\n\r\n\t$ node 02_objects.js\r\n\r\nDo you understand how the code generated the response displayed?\r\n\r\nCreate a new folder (away from `samplecode`), called `lab001`, and in it create a file named `fundamentals.js`. Paste the code below into this file:\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : \"Joe Bloggs\",\r\n\t\t\ttype : 'Toyota Corolla 1.8',\r\n\t\t\tregistration : '10WD1058'\r\n\t\t};\r\n\r\n\t\tconsole.log(aCar.owner);\r\n\r\nOpen a second terminal window, go to the `lab001` folder and run the script:\r\n\r\n\t$ node fundamentals.js \r\n\r\nIt should display the car owner's name.\r\n\r\nAdd a git repository to the `lab001` folder:\r\n\r\n        $ git init\r\n        $ git add -A\r\n        $ git commit -m \"Initial structure\"\r\n\r\n[source]: ./archives/samplecode.zip\r\n[terminal1]: ./img/terminal1.png"
    },
  
    {
    "title": "## Nested Objects.",
    "shortTitle": "Nesting",
    "contentMd" : "## Nested Objects.\r\n\r\nBefore attempting the exercise below, first examine the file `04_1_nested_objects.js` from the samples. Run it and ensure you understand how it generated its output.\r\n\r\nIn `fundamentals.js` the car's *type* property is a simple string but structurally it can be broken down into three parts: Make (eg Toyota), Model (eg Corolla), and CC (eg 1.8). __You are required__ to change this property of *aCar* from a string to an object with three properties, namely *make*, *model* and *cc*. To prove your change worked, add the following log statement to the bottom of the file:\r\n\r\n    console.log(aCar.owner + ' drives a ' + aCar.type.make);\r\n\r\nand run it as before: \r\n\r\n\t$ node fundamentals.js \r\n\r\nIt should display: __Joe Bloggs drives a Toyota__.\r\n\r\n(The solution to this exercise is available [here][solution] under 'Solution 01'.)\r\n\r\nSimilarly, a car's *registration* is also composed of three distinct elements; year (10 for 2010), county code (WD for Waterford), and number (1058). __You are required__ to again change aCar to reflect this nested structure. Also add a log statement that displays the following: __Reg. = 10-WD-1058__.\r\n\r\n(The solution is [here][solution] under 'Solution 02'.)\r\n\r\nBefore continuing, update the git repository, as follows:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Nested objects\"\r\n\r\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "## Dynamic properties.",
    "shortTitle": "Dynamic",
    "contentMd" : "## Dynamic properties.\r\n\r\nFor this section examine `03_dynamic_objects.js` from the samples provided. Notice how properties can be dynamically added (employer) and removed (age) __after the initialization__ of the *me* object. Run it (switch to the other terminal window) and ensure you understand how it generated its output.\r\n\r\nIn `fundamentals.js`, __after the initialization statement__, dynamically add two new properties to *aCar*, namely:\r\n\r\n1. mileage - set it to 80000.\r\n1. color - this should be an object rather than a primitive value. It should detail exterior color (say, red) and interior fabric. Interior has two attributes, namely, texture (e.g. leather) and shade (e.g. cream).\r\n\r\nTo test your solution, add a 'console.log' statement at the end of the file that displays the following: __It is a red car, 80000 mileage, with leather interior.__.\r\n\r\n(The solution is [here][solution] under 'Solution 03'.)\r\n\r\nBefore continuing, update the git repository (from `lab001` folder):\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Dynamic properties\"\r\n\r\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "## Arrays.",
    "shortTitle": "Arrays",
    "contentMd" : "## Arrays.\r\n\r\nExamine `05_arrays.js` from the samples. Run it and ensure you understand how it generated its output.\r\n\r\nIn `fundamentals.js` add a *previous owners* property to *aCar* (statically for simplicity), as follows:\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t    previous_owners : ['Pat Smith - 1 Main Street', \r\n\t\t                       'Sheila Dwyer - 2 High Street'],\r\n\t\t    . . . . . . \r\n\t\t\tregistration : {year : 10, county : 'WD', number : 1058}\r\n\t\t} ;\r\n\r\nThis new property is an array of strings. To test it, add a log statement to the bottom of the file, as follows:\r\n\r\n\t  console.log('First owner : ' + aCar.previous_owners[0] )\r\n\r\nand run the code:\r\n\r\n\t\t$ node fundamentals.js \r\n\r\nThe new log statement displays: __First owner : Pat Smith - 1 Main Street__.\r\n\r\nA better design for *previous_owners* would be an array of objects, where each object's structure is:\r\n\r\n          { name : ' .......', address : '.......'}\r\n\r\n__You are required__ to change *previous_owners*  to reflect this redesign and also rewrite the log statement so that it still displays the same information.\r\n\r\n(The solution is [here][solution] under 'Solution 04'.)\r\n\r\nFor completeness, add a property to *aCar* for the current owner's address, as follows:\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t\taddress : '3 Walkers Lane',\r\n\t\t\tprevious_owners : ...........\r\n\t\t    .\r\n\t\t    .\r\n\t\t    .\r\n\t\t} ;\r\n\r\n\r\nBefore continuing, update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Arrays\"\r\n\r\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "## Looping/Iteration constructs.",
    "shortTitle": "Iteration",
    "contentMd" : "## Looping/Iteration constructs.\r\n\r\nSuppose the car has a list of *extra features*. We can represent this as a simple array of strings, as follows:\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t    .\r\n\t\t    .\r\n\t\t    .\r\n\t\t\tfeatures : ['Parking assist', \r\n\t\t\t            'Alarm', \r\n\t\t\t            'Tow-bar'],\r\n\t\t\tregistration : .......\r\n\t\t} ;\r\n\r\nAt the end of `fundamentals.js`, add a for-loop to display this list, as follows:\r\n\r\n\t\tfor (let i = 0 ; i < aCar.features.length ; i += 1) {\r\n\t\t\tconsole.log(aCar.features[i]) ;\r\n\t\t} \r\n\r\nRun the code to prove it works.\r\n\r\n__You are required__ to write a second for-loop that displays the name only (not the address) of each previous owners. \r\n\r\n(See [Solution 05][solution] for the completed code.)\r\n\r\nThe loop construct for iterating over an object's properties is slightly different. For example, to display the key-value pairs in the *type* property of aCar, add the following code at the end of `fundamentals.js`:\r\n\r\n\t\tfor (let p in aCar.type)  {\r\n\t\t    console.log(p.toUpperCase() + ' = ' + aCar.type[p] ) ;\r\n\t\t}\r\n\r\nRun the code to prove it works. \r\n\r\nIn the above code the expression `aCar.type[p]` demonstrates the __subscript notation__ style for accessing an object's properties. The p variable is dereferenced before the expression is evaluated.\r\n       \r\n\t   e.g.\r\n       p = 'make' \r\n       aCar.type[p] => aCar.type['make']\r\n\r\n In all the earlier examples we used the __dot notation__ style, e.g. aCar.type.make), however, it will not work in the above case as dereferencing does not take place - 'aCar.type.p' is undefined. \r\n \r\nUpdate the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Loop constructs\"\r\n\r\nTo prove Git has recorded the above incremental changes, type the command:\r\n\r\n         $ git log\r\n\r\nFor more detailed output use:\r\n\r\n        $ git log -p\r\n\r\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "# The Browser as a Javascript Development tool.",
    "shortTitle": "Chrome_DevTools",
    "contentMd" : "# The Browser as a Javascript Development tool.\r\n\r\nSo far we have used the __node.js__ platform to execute JS code. However, the Web Browser was the original JS execution environment. In recent years, browser vendors have added excellent *Developer Tools* to assist with debugging web applications. The remainder of this lab introduces the developer tools in the [Google Chrome][chrome] browser - other browsers have similar tools. [You should install this browser to complete the lab.] \r\n\r\nTo demonstrate the tools, we will paste the JS code developed so far into a blank web page. Download [this file][demo], unzip it and study the content. Open the `demo.html` web page in the Chrome browser. Although the page renders as blank, the JS code inside the 'script' tag has been executed. To prove this, open the Developer tools by clicking the Chrome menu icon on the top right and selecting the tools, as illustrated below:\r\n\r\n![][devtool]\r\n\r\nThe tools pane appears in the browser window and the __Console__ tab is selected as the default (if not then select it manually). All the log statements from our JS code appear in the console view, as illustrated below:\r\n\r\n![][console]\r\n\r\nThe Console allows us interact with the JS code by typing statements at the prompt. [In a later lab we will use the console to interact with the current web page]. At the prompt, type the following statement and hit return:\r\n\r\n          aCar.owner\r\n\r\nThe response is illustrated below:\r\n\r\n![][prompt]\r\n\r\nWe can also change any object property, for example, type these two statements at the prompt:\r\n\r\n        aCar.color.exterior = 'blue'\r\n        aCar.color.exterior\r\n\r\nThe Console attempts to evaluate any JavaScript expression you enter at the prompt. It also provides __auto-completion and tab-completion__. For example, as you type expressions, property names are automatically suggested (see illustration). If there are multiple properties with the same prefix, pressing the Tab key cycles through them. Pressing the right arrow key accepts the current suggestion. \r\n\r\n![][completion]\r\n\r\nNotice that the *aCar* object has a number of properties not explicitly defined by us - see illustration. These are inherited by all objects by default - some are useful. \r\n\r\n![][properties]\r\n\r\nWhen a statement execution returns an object rather than a primitive then you can expand the object to see its property detail.\r\n\r\n![][expand]\r\n\r\nExperiment a while with the tool; it will be useful for debugging application code later in the semester. \r\n\r\n-------------------------------------\r\n\r\n[demo]: ./archives/demo.zip \r\n[chrome]: https://developer.chrome.com/devtools\r\n[devtool]: ./img/devtool.png\r\n[console]: ./img/console.png\r\n[prompt]: ./img/prompt.png\r\n[completion]: ./img/completion.png\r\n[properties]: ./img/properties.png\r\n[expand]: ./img/expand.png\r\n\r\n[chromeconsole]: ./img/chromeconsole.png\r\n[assist]: ./img/assist.png\r\n[functions]: ./img/functions.png\r\n"
    },
  
    {
    "title": "## Solution 01",
    "shortTitle": "Solutions",
    "contentMd" : "## Solution 01\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t\ttype : {\r\n\t\t\t\tmake : 'Toyota',\r\n\t\t\t\tmodel : 'Corolla',\r\n\t\t\t\tcc : 1.8\r\n\t\t\t},\r\n\t\t\tregistration : '10WD1058'\r\n\t\t};\r\n        console.log(aCar.owner + ' drives a ' + aCar.type.make);\r\n\r\n\r\n## Solution 02.\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs,\r\n\t\t\ttype : {\r\n\t\t\t\tmake : 'Toyota',\r\n\t\t\t\tmodel : 'Corolla',\r\n\t\t\t\tcc : 1.8\r\n\t\t\t},\r\n\t\t\tregistration : {year : 10, county : 'WD', number : 1058}\r\n\t\t};\r\n\r\n\t\tconsole.log(aCar.owner + ' drives a ' + aCar.type.make);\r\n\t\tconsole.log('Reg. = ' + aCar.registration.year + '-' +\r\n\t\t                        aCar.registration.county + '-' +\r\n                                aCar.registration.number );\r\n\r\n## Solution 03.\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t\ttype : {\r\n\t\t\t\tmake : 'Toyota',\r\n\t\t\t\tmodel : 'Corolla',\r\n\t\t\t\tcc : 1.8\r\n\t\t\t},\r\n\t\t\tregistration : {year : 10, county : 'WD', number : 1058}\r\n\t\t};\r\n\r\n\t\tconsole.log(aCar.owner + ' drives a ' + aCar.type.make);\r\n\t\tconsole.log('Reg. = ' + aCar.registration.year + '-' +\r\n\t\t                        aCar.registration.county + '-' +\r\n\t\t                        aCar.registration.number );\r\n\r\n\t\taCar.mileage = 80000;\r\n\t\taCar.color = { exterior : 'red', \r\n               interior : { texture : 'leather', shade : 'cream' }\r\n             };\r\n\r\n\t\tconsole.log('It is a ' + aCar.color.exterior + \r\n\t\t\t         ' car, '  + aCar.mileage + ' mileage, with ' + \r\n\t\t\t         aCar.color.interior.texture + ' interior.');\r\n\r\n\r\n## Solution 04.\r\n\r\n\t\tlet aCar = {\r\n\t\t\towner : 'Joe Bloggs',\r\n\t\t    previous_owners : [ \r\n\t\t\t\t{ name : 'Pat Smith', address : '1 Main Street'}, \r\n\t\t        { name : 'Sheila Dwyer', address : '2 High Street'}\r\n\t\t\t],\r\n            . . . . . . . . .\r\n\t\t\tregistration : {year : 10, county : 'WD', number : 1058}\r\n\t\t};\r\n        . . . . . . . . \r\n\t\tconsole.log('First owner : ' + aCar.previous_owners[0].name + \r\n\t\t\t         ' - ' + aCar.previous_owners[0].address );\r\n\r\n\r\n## Solution 05.\r\n\r\n\t\tfor (let i = 0 ; i < aCar.previous_owners.length ; i += 1) {\r\n\t\t\tconsole.log(aCar.previous_owners[i].name);\r\n\t\t}\r\n\r\n\r\n\r\n\t\t"
    }
  
  ]
  }

