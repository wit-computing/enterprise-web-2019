


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-02_JS_functions",
  "img" : "img/main.jpg",
  "videoid" : "none",
  "objectives" : "<p>This lab continues our exploration of Javascripr fundamentals, this time focusing on the behavioral side. The topics covered include function definition, method definition, and constructor functions.</p>",
  "folder" : "book-2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Javascript (JS) fundamentals - Functions.",
    "shortTitle": "Lab-02_JS_functions",
    "contentMd" : "# Javascript (JS) fundamentals - Functions.\r\n\r\nThis lab continues our exploration of Javascripr fundamentals, this time focusing on the behavioral side. The topics covered include function definition, method definition, and constructor functions."
    },
  
    {
    "title": "## Start-up.",
    "shortTitle": "Startup",
    "contentMd" : "## Start-up.\r\n\r\nUnzip [this archive][start] and use it as the starting point for the lab exercises. \r\nThe content of `lab002/functions.js` should look familiar - it's from the previous lab exercise. We will expand this file in the next few sections.\r\n\r\nCreate a Git repository in `lab02`:\r\n\r\n       $ git init\r\n       $ git add -A\r\n       $ git commit -m \"Initial structure\"\r\n\r\n[start]: ./archives/start.zip"
    },
  
    {
    "title": "## Functions.",
    "shortTitle": "Functions",
    "contentMd" : "## Functions.\r\n\r\nSuppose we want a function that allows us add an entry to the *previous_owners* property of *aCar*. Copy the following function expression, placing it at the end of `functions.js`:\r\n\r\n\tlet addPreviousOwner = function(car, newName, newAddress) {\r\n\t\t\tlet o = { name : newName, address : newAddress } ;\r\n\t\t\tcar.previous_owners.push(o) ;\r\n\t\t} ;\r\n\r\nTo test the above function, place the following statements after the function expression:\r\n\r\n\t\taddPreviousOwner(aCar,'Jim Nugent','3 Lower Road') ;\r\n\t\tlet last = aCar.previous_owners.length - 1;\r\n\t\tconsole.log(aCar.previous_owners[last].name) ;\r\n\r\nRun it, as follows:\r\n\r\n         $ node functions.js\r\n\r\nThe log statement displays 'Jim Nugent'.\r\n\r\nAssume we only need to record the three most recent previous owners of a car. Trying to add a fourth person should cause the first previous owner to be removed from the record, leaving the second owner as the new first entry in the array. A similar outcome should happen on adding a fifth and subsequent person - the array should only ever have a maximum of three entries. __You are required__ to change the implementation of the *addPreviousOwner* function to meet this requirement. \r\n\r\nHint: The *shift* method removes the first entry in an array, e.g. arrayRef.shift().\r\n\r\nTo test your solution, add the following additional lines to the bottom of `functions.js`:\r\n\r\n\t\t addPreviousOwner(aCar,'Rachel Fleming','4 Upper Road') \r\n\t\t console.log(aCar.previous_owners[2].name) \r\n\t\t console.log(aCar.previous_owners[0].name) \r\n\r\nThe two log statements should display the names 'Rachel Fleming' and 'Sheila Dwyer'.\r\n\r\n(See [solution 01][solution] for the completed code.)\r\n\r\nAfter completing your solution, update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"addPreviousOwner function\"\r\n\r\n[solution]: ./index.html#/Solutions"
    },
  
    {
    "title": "## Methods.",
    "shortTitle": "Methods",
    "contentMd" : "## Methods.\r\n\r\nThe *addPreviousOwner* function should really be a method of *aCar*. Make the following adjustment to the *aCar* object:\r\n\r\n\t\tlet aCar = {\r\n\t\t\t.\r\n\t\t\t.\r\n\t\t\t.\r\n\t\t\taddPreviousOwner : function(newName,newAddress) {\r\n\t\t\t       let o = { name : newName, address : newAddress } ;\r\n\t\t\t       if (this.previous_owners.length === 3) {\r\n\t\t\t       \t  this.previous_owners.shift() ;\r\n\t\t\t       }\r\n\t\t\t       this.previous_owners.push(o) ;\r\n\t\t\t    },\r\n\t\t       previous_owners : [  . . . as before . . . ],\r\n\t\t\t. . . as before . . .\r\n\t\t}; // end aCar \r\n\r\nNote, the keyword 'this' is used inside the method to reference the containing object (aCar). You should now remove the old *addPreviousOwner* function expression and replace all calls to it with method calls, as follows (the 'console.log' statements remain unchanged):\r\n\r\n        aCar.addPreviousOwner('Jim Nugent','3 Lower Road') ;\r\n\r\n__You are required__ to add a new method to *aCar*, called *newOwner*. The method's arguments are the name and address of the new owner of the car. The method should add the current owner details to the list of previous owners and then assign the new owner details  to the current owner properties. \r\n \r\n        let aCar = {\r\n\t        owner : 'Joe Bloggs',        // Current owner details\r\n\t        address : '3 Walkers Lane',\r\n\t        .\r\n\t        .\r\n\t        .\r\n\t    } ;\r\n\r\nTest your method implementation by adding the following statements to the end of the file:  \r\n\r\n\t\taCar.newOwner('Donal Dunne','5 Kings Way') ;\r\n\t\tconsole.log('Sold by: ' + aCar.previous_owners[2].name) ;\r\n\t\tconsole.log('Bought by: ' + aCar.owner) ;\r\n\r\nThe log statements should display:\r\n\r\n>>Sold by: Joe Bloggs\r\n>>Bought by: Donal Dunne\r\n\r\n(See [solution 02][solution] for the completed code.)\r\n\r\nAfter completing your solution, update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Demonstrate methods\"\r\n\r\n### Method/Function return value.\r\n\r\nOur methods so far returned nothing (undefined). It is generally better to return something explicitly, even if the caller may not actually use it.\r\n\r\nAdd the following method to  aCar:\r\n\r\n\t\tlet aCar = {\r\n\t\t\t. . . . . \r\n\t\t\thowOld : function() {\r\n\t\t\t    let today = new Date();\r\n\t\t\t\tlet thisYear = today.getFullYear() ;\r\n\t\t        return thisYear - (this.registration.year + 2000) ;\r\n\t\t\t},\r\n\t\t\t.\r\n\t\t\t.\r\n\t\t\t.\r\n\t\t}\r\n\r\n\r\n[The Date feature used in the above method is useful. You can experiment with it in the Google Chrome Developer tools, as illustrated below:\r\n\r\n![][date]\r\n\r\n]\r\n\r\nThe howOld function computes the car's age, in years. To test it, add the following log statement at the end of the file and run it:\r\n\r\n     console.log(`Car age: ${ aCar.howOld() } years.`) ;\r\n\r\n[The above log statement is using string template syntax from ES^. It's an alternative to string concatenation, which is quite cumbersome.]\r\n\r\nSome methods return a boolean result. For example, add a method that determines whether a car has a certain feature, as follows:\r\n\r\n\r\n\t\tlet aCar = {\r\n\t\t    . . . . .\r\n\t\t\taddPreviousOwner : function(.....) { \r\n\t\t        . . . . .\r\n\t\t    },\r\n\t\t\thasFeature : function(query) {\r\n\t\t\t\tlet result = false;\r\n\t\t\t    this.features.forEach(function(feature) {\r\n\t\t\t   \t    if (query.toUpperCase() === feature.toUpperCase() ) {\r\n\t\t\t\t\t   result = true ;\r\n\t\t\t\t    }\r\n\t\t\t\t})\r\n\t\t\t    return result ;\r\n\t\t\t},\r\n\t\t\t.\r\n\t\t\t.\r\n\t\t\t. \r\n\t\t}\r\n\r\n[For robustness the method above is made case-insensitive by temporarily converting any string to upper-case.]\r\n\r\nTo test this method add the following to the bottom of the file and run the code:\r\n\r\n     console.log(`Alarm: ${aCar.hasFeature('alarm')}.` ) ;\r\n\r\n__You are required__ to implement a method that determines if a particular person (based on name only) was a previous owner of the car. Test your implementation by adding the following to the end of the file:\r\n\r\n     let name = 'Jim Nugent'\r\n     console.log(`${name} ? ${aCar.wasOwnedBy(name)}.` ) \r\n     name = 'Paul Minihan' \r\n     console.log(`${name} ? ${aCar.wasOwnedBy(name)}.` ) ;\r\n\r\nThe log statements should display:\r\n\r\n\t\tJim Nugent ? true\r\n\t\tPaul Minihan ? false\r\n\r\n[See [Solution 03][solution] for the correct implementation.]\r\n\r\nAfter completing a solution, update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Method responses\"\r\n\r\nBecause searching an array for a matching entry is such a common requirement, the Array *find* method is provided. Change the implementation of *hasFeature* to the following:\r\n\r\n        .\r\n        .\r\n        .\r\n\t\thasFeature : function(query) {\r\n\t\t\tlet match = this.features.find(function(element) {\r\n\t\t\t\treturn query.toUpperCase() === element.toUpperCase() ;\r\n\t\t\t});\r\n\t\t\treturn match === undefined ? false : true \r\n\t\t},\r\n\t\t.\r\n\t\t.\r\n\t\t.\r\n\r\n*find* returns the matching array entry, if found; otherwise it returns undefined. The ternary operator (?:) is also used above for convenience. See [here][find] for more information on *find*. \r\n\r\n__You are required__ to refactor the *wasOwnedBy* method to avail of the Array find feature.\r\n\r\nAfter completing a solution, update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Refactoring\"\r\n\r\n[solution]: ./index.html#/Solutions\r\n[date]: ./img/date.png\r\n[find]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find\r\n"
    },
  
    {
    "title": "## Constructors.",
    "shortTitle": "Constructur",
    "contentMd" : "## Constructors.\r\n\r\nThe literal object syntax used in the previous sections is inefficient when creating multiple car objects. A __constructor function__ should be used instead. \r\n\r\nCreating a new file in `lab002`. called `constructor.js`. and paste in this code:\r\n \r\n\t\tfunction Car(name,address,make,model,cc,registration ) {\r\n\t\t\tthis.owner = name\r\n\t\t\tthis.address = address\r\n\t\t\tthis.previous_owners = [ ]\r\n\t\t\tthis.type = { make : make, model : model, cc : cc }\r\n\t\t\tthis.features = ['Parking assist', 'Alarm', 'Tow-bar'];\r\n\r\n\t\t\tthis.addPreviousOwner = function(newName,newAddress) {\r\n\t\t\t\tlet o = { name : newName, address : newAddress }\r\n\t\t\t\tif (this.previous_owners.length === 3) {\r\n\t\t\t\t\tthis.previous_owners.shift()\r\n\t\t\t\t}\r\n\t\t\t\tthis.previous_owners.push(o)\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tthis.wasOwnedBy = function(query) {\r\n\t\t\t\tlet match = this.previous_owners.find(function(element) {\r\n\t\t\t\t\treturn element.name.toUpperCase() === query.toUpperCase() ;\r\n\t\t\t\t});\r\n\t\t\t\treturn match == undefined ? false : true \r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tlet car1 = new Car('Joe Bloggs','3 Walkers Lane',\r\n\t\t\t'Toyota','Corolla',1.8,\r\n\t\t\t'10-WD-1058') ;\r\n\t\tcar1.addPreviousOwner( 'Pat Smith', '1 Main Street') ;\r\n\t\tcar1.addPreviousOwner( 'Pat Smith', '1 Main Street') ;\r\n\t\tcar1.addPreviousOwner( 'Sheila Dwyer', \r\n\t\t\t'2 High Street') ;\r\n\t\tconsole.log(`Pat Smith ?  ${car1.wasOwnedBy('Pat Smith')}.` ) ;\r\n\r\n\r\nNote, this code is not yet complete. Take time to study it and then run it:\r\n\r\n        $ node constructor.js \r\n \r\n Update the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Added initial car constructor\"\r\n \r\nIn the previous section we declared a *newOwner* method. Using that implementation as a guide, __you are required__ to add the method to the *Car* constructor. Test it by adding the following to the end of `constructor.js`:\r\n\r\n\t   car1.newOwner('Donal Dunne','5 Kings Way') ;\r\n       console.log('Sold by: ' + car1.previous_owners[2].name) \r\n       console.log('Bought by: ' + car1.owner) \r\n\r\nThe log statements should display the seller as 'Joe Bloggs' and buyer as 'Donal Dunne'.\r\n\r\n(See [Solution 04][solution] for the completed code.)\r\n\r\nUpdate the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"newOwner added to constructor\"\r\n\r\nThe registration details are not yet supported. While this information is stored internally as an object structure, we don't need to expose this in the constructor's interface. Using a simple string as the constructor parameter seems more natural, e.g. new Car(....,'10-WD-1058'). Consequently, the constructor function must parse the registration string and place the elements in the nested object. The predefined String *split* method can help here. You can experiment with it in  Chrome's Developer Tools console, as illustrated below: \r\n\r\n![][split]\r\n\r\nUpdate the Car constructor to make use of this feature, as follows:\r\n\r\n\t\tfunction Car(name, address, make, model, cc, registration) {\r\n            .\r\n            .\r\n            .\r\n\t\t\tlet regParts = registration.split('-')\r\n\t\t\tthis.registration = {\r\n\t\t\t\tyear : parseInt(regParts[0]), \r\n\t\t\t\tcounty : regParts[1], \r\n\t\t\t\tnumber : regParts[2] \r\n\t\t\t};\r\n\t\t}\r\n\r\n[ The *parseInt()* function converts a numeric string to an integer.]\r\n\r\nTo prove the new code works, add the *howOld* method, as follows:\r\n\r\n\t\tfunction Car(... as before ...) {\r\n\t\t    .\r\n\t\t    . \r\n\t\t    .\r\n\t\t\tthis.howOld = function() {\r\n\t\t\t\tlet today = new Date();\r\n\t\t\t\tlet thisYear = today.getFullYear();\r\n\t\t        return thisYear - (this.registration.year + 2000);\r\n\t\t\t};\r\n\r\n\t\t\tthis.newOwner = function(....) { . . . .  } ;\r\n\t\t\t. . . . . \r\n\t\t}\r\n\t  \r\nand add this test line to the end of the file:\r\n\r\n      console.log(`Car age: ${car1.howOld()}` ) ;\r\n\r\nThe log statement should display 'Car age: 9'. \r\n\r\nUpdate the git repository:\r\n \r\n        $ git add -A\r\n        $ git commit -m \"Add registration support and howOld method\"\r\n\r\n[solution]: ./index.html#/Solutions\r\n[date]: ./img/date.png\r\n[split]: ./img/split.png"
    },
  
    {
    "title": "## Solution 01",
    "shortTitle": "Solutions",
    "contentMd" : "## Solution 01\r\n\r\n      let addPreviousOwner = function(car,newName,newAddress) {\r\n             let o = { name : newName, address : newAddress } ;\r\n             if (car.previous_owners.length === 3) {\r\n                car.previous_owners.shift() ;\r\n             }\r\n             car.previous_owners.push(o) ;\r\n       } ;\r\n\r\n\r\n## Solution 02\r\n\r\n      let aCar = {\r\n          owner : 'Joe Bloggs',\r\n          address : '3 Walkers Lane',\r\n          newOwner : function(name, address) {\r\n             this.addPreviousOwner(this.owner,this.address) ;\r\n             this.owner = name ;\r\n             this.address = address ;\r\n          },\r\n          . . . . . . . .. \r\n      } ;\r\n\r\n## Solution 03\r\n\r\n      let aCar = {\r\n          . . . . . . \r\n            wasOwnedBy : function(name) {\r\n                let result = false ;\r\n                this.previous_owners.forEach(function(owner) {\r\n                    if (name.toUpperCase() === owner.name.toUpperCase()) {\r\n                        result = true ;\r\n                    }\r\n                }) ;\r\n                return result ;\r\n            },    \r\n          . . . . . .\r\n      } ;\r\n\r\n## Solution 04.\r\n\r\n    function Car(name,address,make,model,cc,registration) {\r\n         .\r\n         .\r\n         . \r\n        this.newOwner = function(newName,newAddress) {\r\n            this.addPreviousOwner(this.owner,this.address)\r\n            this.owner = newName\r\n            this.address = newAddress\r\n        };\r\n        this.addPreviousOwner = function(.....) {\r\n            .\r\n            .\r\n            .\r\n       };"
    }
  
  ]
  }

