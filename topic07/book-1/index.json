


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "node_lab1",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab introduces <strong>node.js</strong> as a server-side technology. You will use node.js to run javascript programs on the &quot;server-side&quot; which are capable of servicing HTTP requests. You will learn how to:</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Node and Express 1",
    "shortTitle": "node_lab1",
    "contentMd" : "# Node and Express 1\n\nThis lab introduces **node.js** as a server-side technology. You will use node.js to run javascript programs on the \"server-side\" which are capable of servicing HTTP requests. You will learn how to:\n\n- Create and use a remote repo on Github\n- Set node up as a HTTP server.\n- Use Node's built in http module to create a simple HTTP server.\n- Node's packaging system.\n- How to host your existing web resources in a Node.js HTTP server.\n- How to do a simple route for a HTTP request.\n"
    },
  
    {
    "title": "# Get Git",
    "shortTitle": "01",
    "contentMd" : "# Get Git\n\n![git](./img/git1.png)\n\nYou will probably have git from the previous labs. If not, follow the instructions for your operating system.\n### Windows OS\nIf you're on Windows, download the  **GitHub Desktop**, from [here](https://desktop.github.com/) which includes Git, and use the Git Shell for your terminal.\n\n\n### Mac\nYou can install Git automatically. To do this, open the Terminal application from spotlight and type `git`. This will prompt Git to install the rest of the command line tools for Git. This should only take a few minutes. It will ask if you would like to download Xcode, which you can ignore.\n\n### Linux\n\nYou can use the package-management tool that comes with your distribution. For Fedora use:\n\n~~~bash\n$ sudo yum install git-all \n~~~\n\nFor Debian use:\n\n~~~bash\n$ sudo apt-get install git-all\n~~~\n\n## Tell Git who you are\nYou will need to configure git with your identity so that it can record your git activity such as repo creation and changes. To set a global identity for all repos on the machine, enter the following:\n~~~bash\n$ git config --global user.email \"your@email.com\"\n$ git config --global user.name \"Your Name\"\n~~~\n\n## Clone a Repository\n\n### Clone the samples repository\nSelect a location on your machine where you would like to keep the code examples taken from the weekly talks. Open a terminal window in that location and clone the samples repository:\n\n```\ngit clone https://github.com/fxwalsh/ewd-examples-2019.git\n```\n\nThis should create a new folder called *ewd-examples-2019*. Open the folder and you should see the node samples from the lecture slides. We will use this repository for our example code as the module progresses. You will need to *pull* the repository from time to time to get the latest code examples from the lectures.\n\n## Create a repository\nYou can think of a repository as a project folder with all the related files inside of it.\n![git repos](./img/repos.png)\nYou intialise a folder as a  Git repository and Git will start tracking the changes to that folder. Any files added, removed or changed are tracked and time stamped by Git. That's version control.\n\nYou're going to create a new folder and initialize it as a Git repository.\nMake a new folder by opening a terminal window at a suitable  location on your machine. Enter the follwoing commands to make a new directory called *ewd-node-labs-2019* and then change directory into it :\n~~~bash\n$ mkdir ewd-node-labs-2019\n$ cd ewd-node-labs-2019\n~~~\n\nNow initialise the folder as a Git repo:\n~~~\n$ git init\n~~~\nTo check that it's a Git repository, type ``git status`` and if returns something like 'On branch master ....', you've got a new local repo!\n\n## Add to the repository\nOpen a text editor. Now write a couple of lines of text:\n\n~~~text\n# Node Development Practical Labs\n~~~\n\nand save the file as ``readme.md`` in the *ewd-node-labs-2019* folder.\n\n## Status, Add and Commit Changes\nNext check the status of your repository to find out if there have been changes. In the terminal, you should still be within the 'ewd-node-labs-2019' directory. Enter ``git status`` for a report on any changes listed:\n\n~~~bash\n$ git status\n~~~\n![Git Status](./img/git-status.png)\n\nYou can see that the *readme.md* file is untracked at the moment. Add it to the files you'd like to track with Git.\n\n~~~bash\n$ git add readme.md\n~~~\n\nFinally, commit those changes to the repository's history with a short description of the updates.\n\n~~~bash\n$ git commit -m \"Created the readme file\"\n~~~\n\n### Make More Changes\n\nNow add another line to *readme.md* and save.\n\nIn terminal, you can view the difference between the file now and how it was at your last commit using ``git diff``.\n\n![Git Diff](./img/git-diff.png)\n\nNow, what you just learned above, commit this latest change.\n"
    },
  
    {
    "title": "# Github",
    "shortTitle": "02",
    "contentMd" : "# Github\nThe repository you've created so far is just on your computer, which is handy, but makes it pretty hard to share and work with others on.\n\n## Create a GitHub Account\nGitHub is a website that allows people everywhere to upload what they're working on with Git and to easily work together.\n\nVisit [github.com](http://github.com) and sign up for a free account.\n\n## Add username to Git\n\nAdd your GitHub username to your Git configuration, which will be needed in order to push the upcoming labwork to Github. Save it exactly as you created it on GitHub â€” capitalise where capitalised, and remember you don't need to enter the \"<\" and \">\" .\n\nAdd your GitHub username to your configuration:\n\n~~~bash\n$ git config --global user.username <YOUR_GITHUB_USERNAME>\n~~~\n\n## Remote Repository\nWhen you put files on GitHub, that copy lives on one of GitHub's servers. This makes it a *remote* repository because it is not on your computer. You need to *push* your local (on your computer) changes to it, you keep it up to date.\n\nOthers can always get the latest from your project by pulling your changes down from the remote (and onto their computer). In fact, this is how you will get the weekly updates to the code examples repo. It is also how you can collaborate with others.\n\n### Create a Remote Repository\n\nYou want to sync your local version with one stored on GitHub.com called the *remote* version. So first create an empty remote repository on GitHub.com.\n\nGo to github.com, log in, and click the '+' in the top right to create a new repository.\nGive it a name that matches your local repository's name, ***ewd-node-labs-2019***, and a short description.\nSelect the following options:\n- make it public or private as you see fit.\n- **don't** create a readme.md (you have one already in your local repo).\n- create a .gitignore and select the *Node* option in the dropdown.\nClick create repository and you should be taken to your new repo page. \n- Copy the URL from the \"clone or download\" option on the repo page.  You will need the URL of the repo to connect your local repo to this *remote* repo.\n![Repo URL](./img/repo-url.png)\n### Connect your Local to your Remote\n\nNow you've got a remote repository on GitHub.com, back in your terminal in 'ewd-node-labs-2019' folder, you want to tell Git the location of the remote version on GitHub's servers. You can have multiple remotes so each requires a name. For your main one, this is commonly named *origin*.\n\n~~~bash\n$ git remote add origin <YOUR_URL_FROM_GITHUB>\n~~~\n\nYour local repository now knows where your remote one named 'origin' is (i.e. on GitHub). T\n\n>    A note:\n>    \n>    If you have GitHub for Windows on your computer, a remote named 'origin' is automatically created. In that case, you'll just need to tell it what URL to associate with origin. Use this command instead of the 'add' one above:\n>    \n>    $ git remote set-url origin <YOUR_URL_FROM_GITHUB>\n\n### Pull down the changes on the remote repo\nYou created a .gitignore file on the remote repo. You need to *pull* this change into your local repo. Git has a branching system so that you can work on different parts of a project at different times but by default the first branch is named 'master'. When you pull (and push) from a project, you tell Git the branch name you want and the name of the remote that it lives on.\n- Enter the following command to pull the remote changes into the master branch on your local repo:\n~~~bash\n$ git pull origin master --allow-unrelated-histories\n~~~ \n- The ``--allow-unrelated-histories`` needs to be included as the local and remote repositories were created independently and have some commits.\n\nNow we will *push* your local work (i.e. the readme.md) to the remote repo. \n\n### Push Work to your Remote\n\nNext you want to push (send) everything you've done locally to GitHub. Ideally you want to stay in sync, meaning your local and remote versions match.\n\nSimilar to a pull, when you push from a project you tell Git the branch name you want to push and the name of the remote that it lives on.\n\nIn this case, we'll send our branch named 'master' to our remote on GitHub named 'origin'.\n\n~~~bash\n$ git push origin master\n~~~\n\nNow go to GitHub and refresh the page of your repository. Everything is the same locally and remotely. You should see the following in your local repo:\n\n![Empty Local Repo](./img/git_repo_init.png)\n\nCongrats on your first public repository! You will use this repository to contain the rest of your lab work.\n"
    },
  
    {
    "title": "# Development Dependencies",
    "shortTitle": "03",
    "contentMd" : "# Development Dependencies\nWe will now set up and configure a development environment for Node.js. \n\n\n## package.json\nIf you're developing a Node program or library for deployment, it's standard practice to include a **package.json** file. This file is the **manifest of the Node project** and is located at your project root. It contains various information specific to your project such as module dependencies and scripts. \n\n\n\n- Create a new folder called *node_lab1* in your new repo.\n![Empty Local Repo](./img/git_repo_lab1.png)\n- Open a terminal window in *node_lab1* and enter the following command:\n\n~~~bash\nnpm init\n~~~\n\n- You will be prompted for details. Enter the following:\n\n~~~\nname: (lab1) node-lab1\nversion: (1.0.0) \ndescription: node lab 1\nentry point: (index.js)\ntest command:\ngit repository: \nkeywords:\nauthor: YOUR_GIT_USERNAME\nlicense: (ISC)\n~~~\n\nYou should now see a ``package.json`` file in the lab directory with these details.\n\n## Babel\n\nWe will be writing our Javascript using ES2015 so we require transcoding before our Node app runs. We need to bring in some babel packages to handle this.\n\n- Enter the following command to get the relevant babel package and relevant  presets.\n\n~~~bash\nnpm install --save-dev babel-cli\nnpm install --save-dev babel-preset-env\n~~~\n\nThe ``--save-dev`` will write this dependency to the development section of the package.json. Have a look at the *package.json* file and you will now see the dev dependency on babel as highlighted below:\n\n![Development Dependencies](./img/package.PNG)\n\n\n\n- To configure babel to transcode from es2015, create a file called **.babelrc** in the **node-lab1** folder and enter in the following:\n~~~json\n{\n  \"presets\": [\"env\"]\n}\n~~~\nNow have a look at the  *package.json* file. You'll see that the babel development dependencies are specified.  \n\n## Nodemon\nWhen we change things in a Node.js project, a restart is required for the changes to be reflected in the running process. This can be very time consuming. Instead of manually restarting Node, we will install the ``nodemon`` package as a **development dependency**, which can monitor our files and auto-restart Node for us when we save changes to disk.\n\n- Install Nodemon:\n~~~bash\nnpm install --save-dev nodemon\n~~~\n\n## Commit it\n\nNow that we have a our basic setup and configuration complete,this is a good time to commit your changes to git.\n\n- In the directory *ewd-node_labs_2019* run the following:\n~~~bash\ngit add --all\ngit commit -m \"set up and initial configuration\"\n~~~\n\nYou should **NOT** see any output indicating changes ignored file and folders, for example the *node_modules*. We do not need to track changes here as it's contents are specified in the *package.json*.\n"
    },
  
    {
    "title": "# The "Hello World" HTTP Server",
    "shortTitle": "04",
    "contentMd" : "# The \"Hello World\" HTTP Server\n\nWe will be using node as a web API platform. In this step we'll set up a simple HTTP server that responds to every request with the plain text message \"Hello World\".\n\n## App Config\n\nAs discussed in class, one of the advantages of NPM is the wide availability of handy utility packages that follow accepted best practice. App configuration management and environment variables are common to many apps. When using public, cloud based repos you should use best practice approaches to keep sensitive parameters such as private keys and passwords safe.  \n\nDotenv is a zero-dependency module that loads environment variables from a .env file into *process.env*. In doing this Dotenv stores configuration in the environment separate from code is based on \"The Twelve-Factor App\" methodology.\nThis simple application just needs some typical configuration details, for example the port and host info.\n\n- Install Dotenv as a normal, runtime dependency\n~~~bash\nnpm install dotenv --save\n~~~\n\n- Create a new file in your application root folder called **.env** and add the following content:\n~~~javascript\nNODE_ENV=development\nPORT=8080\nHOST=localhost\n~~~\n\nAs you could be putting sensitive stuff in the .env file, you should **NOT** commit your .env file to version control. It should only include environment-specific values such as database passwords or API keys used by your server-side API. Also, your production database should have a different password than your development database.\n\nTo ensure this is the case, do the following:\n\n- Open *.gitignore* file in you *node-labs-2018* folder. Check that it contains the following entry:\n~~~json\n# dotenv environment variables file\n.env\n~~~\n\n## HTTP service\n\n- In the *node-lab1* create a new file called  *index.js*  with the following contents:\n\n~~~javascript\n\n// Load the http module to create an http server.\nimport http from 'http';\nimport dotenv from 'dotenv'\n\ndotenv.config()\n\nconst port = process.env.PORT\n// Configure our HTTP server to respond with Hello World to all requests.\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello  World!');\n});\n\nserver.listen(port);\n\n// Put a friendly message on the terminal\nconsole.log(`Server running at ${port}`);\n~~~\nIn the first line, we import the http core module and assign it to ``http``. Next we assign the variable  ``server`` from the ``http.createServer(...)`` function. The argument passed into this call is the function that is called whenever an http request comes in.\nFinally we call ``server.listen(config.port)`` to tell node.js the port on which we want our server to run.\n\n## Startup Script\nWe want to specify a script to start up the Node server, which will be the **index.js** file. So our start script would be ``node index.js``. However, since we want the code to be transcoded using  babel and started with nodemon, we will add a **nodemon** execution wrapper and use **babel-node** instead of the node command.\n\n- Find the ``scripts`` property in the *package.json* file and replace it with the following: \n\n~~~json\n....\n\"scripts\": {\n    \"start\": \"nodemon --exec babel-node index.js\"\n  },\n....\n~~~\n\nTo run the server open a terminal/command window in the node-lab1 folder and enter:\n\n~~~bash\nnpm start\n~~~\n\nYou should see output smilar to the following:\n\n![Node Start](./img/node-start.png)\nNow open your browser to 'http://localhost:8080'. You should see the following:\n![Node Hello World](./img/hello_world.png)\n\n\nThe connection function is invoked with a **req** and **res** object. The **req** object represents the HTTP request and is a readable stream that emits 'data' events for each incoming piece of data (like a form submission or file upload). The ***res*** object represents the HTTP response and is used to send data back to the client. In our case we are simply sending a 200 OK header, as well as the body 'Hello World'.\n\nLeave the app running for the next section.\n\n## Nodemon in Action\n\nNow that your node app is running using Nodemon, any saved changes to your source code(index.js) will cause the app to restart automatically.\n\n- Change ``index.js`` to return \"Hello EWD!\" in the response and take a look at the terminal. You should see the console output indicating a restart. However, you will require a refresh in the browser to see the new \"Hello EWD!\" message."
    },
  
    {
    "title": "# Linting",
    "shortTitle": "05",
    "contentMd" : "# Linting\nIt'd be nice to get feedback on the quality of your Javascript code as you write it. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. It can be used to detect syntax errors in the editor and also to enforce code styles, for example the use of semicolons at the end of each statement.\n\n- Install ESLint as follows:\n~~~bash\nnpm install --save-dev eslint babel-eslint\n~~~\n\n- To configure ESLint, enter the following at the command line:\n~~~bash\nnpx eslint --init\n~~~\n\n- Answer the resulting questions as follows:\n\n![ESLint Config](./img/eslint.png)\n\nYou should now see a file called *.eslintrc.json* in the *node-lab1* folder.\n\n- Open *.eslintrc.json* and replace the ``rules`` property with the following: \n\n~~~json\n\"rules\": {\n        \"semi\": 1,\n        \"no-console\": \"off\"\n    }\n~~~\n\nThe *.eslint.json* file specifies that we wish to lint ES6 Javascript in module format (uses imports and exports). We also specify the environment is Node.js with associated global variables and Node.js scoping. Finally, we add some rules that warn if you leave out a semicolon and permit the use of ``console.log()`` (we should really use a proper logging module...).\n\nYou've now set your project folder up for linting your Javascript files.\n\n> NOTE: These linting rules are to keep your code style consistent. If you already use JS and you wish to follow other rules (with justification) then feel free to impelement them here. For example, alot of JS developers do not use the semicolon at the end of each statement (as you've seen in index.js, you don't need it!)\n\n### How bad is your code?\nNow lets check your code using ESLint on the command line.\n\n- Run the following command to lint your code:\n~~~bash\nnpx eslint index.js\n~~~\nThe rules will warn you if any statement does not end with a semicolon. The linter should highlight this and you should see the following output:\n![Node Hello World](./img/linter.png)\nYou can fix manually or use the command ``npx eslint index.js --fix`` to resolve the problems(if the linter suggests it).\nWhen the code is in good order, the linter should return nothing. Nice code!\n\n## Linting in VS Code\n\nIf you use the VS Code editor you can install the **ESLint Extension** so that the editor will highlight issues as you type. \n\nDo ``control-shift-x`` search for \"ESLint\" and install. It will autmatically pick up the ESLint config of your folder...\n\n![ESLint in VS Code](./img/eslint2.png)\n\n## Commit your changes\n- Commit the changes you have just made using git.\n~~~bash\ngit add -A\ngit commit -m \"node-lab1,  simple server\"\n~~~\n"
    },
  
    {
    "title": "# The Module System",
    "shortTitle": "06",
    "contentMd" : "# The Module System\nNode.js provides a simple module system that lets you structure your program into different files. In our *index.js* example, we use the core http module to create our HTTP service. You can also write your own modules. When creating a module, this can be interpreted as moving all related functions into a file.\n\n- Create a new file called 'greeting.js' in the same folder with the following content:  \n\n~~~javascript\nconst greeting = {\n    en: \"Hello World!\",\n    fr: \"Bonjour!\"\n}\n\nexport default greeting;\n~~~\n\n- Update your *index.js* file as follows:\n\n~~~javascript\n// Load the http module to create an http server.\nimport http from 'http';\nimport dotenv from 'dotenv';\nimport greeting from './greeting.js';\n\ndotenv.config();\nconst port = process.env.PORT;\n\n// Configure our HTTP server to respond with Hello World to all requests.\nconst server = http.createServer((req, res) => {\n  let lang = req.headers['accept-language'];\n  const defaultLang='en';\n  if (!greeting[lang]) lang=defaultLang;\n  const response={\n    lang: lang,\n    message: greeting[lang],\n  };\n\n  res.writeHead(200, {'Content-Type': 'text/plain',\n                      'Content-Language': response.lang});\n  res.end(response.message);\n});\n\nserver.listen(port);\n\n// Put a friendly message on the terminal\nconsole.log(`Server running at ${port}`);\n~~~\n\n\nNow test your file again using a browser. The ``export`` expose greeting to other modules that require them. To access the exported functions in our simple server, we can load the greeting module using the require function in ``import greeting from ('./greeting');``. The server gets the accepted language from the requesting process using ``req.headers[\"accept-language\"]`` . To set the accept-language HTTP header of the request:\n\n- install a suitable REST client. This lab will opt for [Postman](https://www.getpostman.com/).\n- Perform a **HTTP GET** request to **localhost:8080** with ``Accept-language=fr``.\n\nYou should see the french representation for the greeting returned in the response.\n\n> ![Greeting in French](./img/greeting_in_french.png)\n\nAs you will see, the core modules give you very few modules. Most of the real power in Node.js is contained in the third party modules available through the Node Package Management system(NPM).\n\n### Commit your changes\n- Commit the changes you have just made using git.\n~~~bash\ngit add -A\ngit commit -m \"node-lab1,  greeting module added\"\n~~~\n"
    },
  
    {
    "title": "# Express Applications",
    "shortTitle": "07",
    "contentMd" : "# Express Applications\n\nWe'll now add some static content to our web server. Up to now you've used **http-server** which is fine for prototyping HTML. We'll now move to Express, a richer web app package and provides a nice high level approach to serving up static content. It's based around the idea of creating an Express \"app\" that you can easily configure. One of the configuration options allows you to specify the location of your publicly available content such as static HTML, CSS, client-side Javascript files etc.\n\n## Express\nTo create an Express app, we need to install it as a **normal dependency**.\n\n- Install the express package.\n~~~bash\nnpm install --save express\n~~~\n\nThe ``--save`` flag will write this dependency to package.json.\n\n- In your *node-lab-1* folder, create the following folder structure:\n~~~\n+public\n    |-javascript\n    |-stylesheets\n~~~\n- Get the solution to the [*html/css lab*](./files/static.zip) and place the files directly into the *public* folder(the *index.hmtl* file should in the *public* folder).\n- In node-lab-1, replace the contents of **index.js** with the following javascript:\n\n~~~javascript\n\nimport dotenv from 'dotenv';\nimport express from 'express';\n\ndotenv.config();\n\nconst server = express();\n\nconst port = process.env.PORT;\n\nserver.use(express.static('public'));\n\nserver.listen(port, () => {\n  console.info(`Server running at ${port}`);\n});\n\n~~~\n\n- Now test the application as before in a browser. It should display the default resource (index.html) from the public folder.\n\n## Simple Routing using Express\nExpress gives us an easy way of mapping specific URL paths to Javascript functions. You will now replicate the functionality from the \"Hello World\" section so that a **HTTP GET** request for the URL path  '/greeting/' will respond with \"Hello World\". Modify the index.js by adding an ``app.get([route],[callback function])``.\n- Modify the index.js script to include a route for /greeting that responds with \"hello world\".\n\n~~~javascript\nimport dotenv from 'dotenv';\nimport express from 'express';\nimport greeting from './greeting';\n\ndotenv.config();\n\nconst app = express();\n\nconst port = process.env.PORT;\n\napp.use(express.static('public'));\n\n// add route for /greeting\napp.get('/greeting', (req, res)=>{\n  let lang = req.headers['accept-language'];\n  const defaultLang='en';\n  if (!greeting[lang]) lang=defaultLang;\n  const response={\n    lang: lang,\n    message: greeting[lang],\n  };\n\n  res.writeHead(200, {'Content-Type': 'text/plain',\n                      'Content-Language': response.lang});\n  res.end(response.message);\n});\n\n\napp.listen(port, () => {\n  console.info(`Server running at ${port}`);\n});\n~~~\n## Commit and Push to Github\nCommit your changes using git as before and push your changes to your remote repository.\n\n~~~script\ngit add -A\ngit commit -m \"node1-lab, changed to express app\"\ngit push origin master\n~~~\n\n### Contacts API\n\n Ultimately we would like our API to use a database such as Mongo and allow for a more realistic API that can cope with large volumes of data you would expect in a production environment.\n\nCreate a new folder called **api** in **node-lab-1**. Create another folder called **contacts** in **api**. Your folder structure should look as follows:\n\n~~~\n+node-lab-1\n    |-api\n       |-contacts\n~~~\n\nWe will use test data for the time being. \n\n- Create a new file called **contacts.js** in the contacts folder and add the following code:\n\n~~~javascript\nexport const contacts = [\n  {\n    'name': 'Contact 1',\n    'address': '123 Test St',\n    'phone_number': '132-3212',\n  },\n  {\n    'name': 'Contact 2',\n    'address': '23 Main St',\n    'phone_number': '934-4329',\n  },\n  {\n    'name': 'Contact 3',\n    'address': '4 Lower St',\n    'phone_number': '432-5832',\n  },\n  {\n    'name': 'Contact 4',\n    'address': '49 Upper Street',\n    'phone_number': '934-4290',\n  },\n];\n~~~\n\n- Also in the contacts folder, create a new file called **index.js** and enter the folowing javascript:\n\n~~~javascript\nimport express from 'express';\nimport {contacts} from './contacts';\n\nconst router = express.Router(); // eslint-disable-line\nrouter.get('/', (req, res) => {\n  res.send({contacts: contacts});\n});\n\nexport default router;\n~~~\n\n\n- Now update **index.js** in the root folder to use the new contacts routing script by replacing the contents with the following code\n\n~~~javascript\nimport dotenv from 'dotenv';\nimport express from 'express';\nimport contactsRouter from './api/contacts';\n\ndotenv.config();\n\nconst app = express();\n\nconst port = process.env.PORT;\n\napp.use(express.static('public'));\n\napp.use('/api/contacts', contactsRouter);\napp.use(express.static('public'));\n\napp.listen(port, () => {\n  console.info(`Server running at ${port}`);\n});\n~~~\n\nNow test the application again by doing a HTTP GET on ``localhost:8080/api/contacts``. You should see something simlilar toe the following:\n\n![Get contact details](./img/contacts_api_1.png)\n\n### Challenge\n\n- Try to include in server-side route for the Hacker News lab you did last week. Follow the same procedure as above.\n\n> hint: create a new folder in api for Hacker News. Create a routing script and update index.js to add the Hacker News route.\n"
    }
  
  ]
  }

